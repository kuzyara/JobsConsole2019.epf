//////////////////////////////////////
// ФормаСхемаЗапроса

#Область СвойстваЭлементовФормы

	//Элементы.ДеревоТаблиц.ТолькоПросмотр = Истина	
	//Элементы.ДеревоТаблиц.Шапка = Ложь
	//Элементы.ДеревоТаблиц.ИзменятьПорядокСтрок = Ложь
	//Элементы.ДеревоТаблиц.ИзменятьСоставСтрок = Ложь
	//Элементы.ДеревоТаблиц.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.КоманднаяПанель
	
	//Элементы.ДеревоСхемыЗапроса.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//Элементы.ДеревоСхемыЗапроса.ИзменятьПорядокСтрок = Ложь;
	//Элементы.ДеревоСхемыЗапроса.СоставКоманд.. = Ложь;
	
	//Элементы.ОтображаемыйТекстЗапроса.ТолькоПросмотр = Истина;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФормаСхемаЗапроса_НастроитьФорму();
	ФормаОператор_НастроитьФорму();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ЭтотОбъект.СхемаЗапросаВХ = ПоместитьВоВременноеХранилище(СхемаЗапроса, ЭтотОбъект.УникальныйИдентификатор);
	Если Параметры.Свойство("ТекстЗапроса") И Не ПустаяСтрока(Параметры.ТекстЗапроса) Тогда
		СхемаЗапроса.УстановитьТекстЗапроса(Параметры.ТекстЗапроса);		
	КонецЕсли;
	ДеревоСхемыЗапроса_ЗаполнитьСхемуЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Оповестить("ФормаСхемаЗапросаПриОткрытии");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если Не ЗакрытиеФормы И ЭтотОбъект.Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ВопросОЗакрытииФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ГруппаФормаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаФорма.ТекущаяСтраница = Элементы.ГруппаСхемаЗапроса И ЭтотОбъект.ОператорИзменения.ЕстьИзменения Тогда
		НастройкаОператора_Загрузить();
	КонецЕсли;
	
КонецПроцедуры

#Область ДеревоТаблиц

&НаКлиенте
Процедура ДеревоТаблицПередРазворачиванием(Элемент, Строка, Отказ)
	
	//bookmark
	//Возврат; // Вариант1
	
	ТекДанные = ЭтотОбъект.ДеревоТаблиц.НайтиПоИдентификатору(Строка);
	ИскомаяСтрока = ТекДанные.ПолучитьЭлементы()[0];
	Если ИскомаяСтрока.Значение = "@" Тогда
		ТекДанные.ПолучитьЭлементы().Очистить();
		//ДеревоТаблиц_ЗаполнитьСостав(Строка); // Вариант0
		ДеревоТаблиц_ЗаполнитьКоллекциюВариант2(Строка)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСхемыЗапроса

&НаКлиенте
Процедура ДеревоСхемыЗапросаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Expanding
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные; 	
	ДеревоСхемыЗапроса_ВыборИзменение(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапросаПриАктивизацииСтроки(Элемент)
	
	ДеревоСхемыЗапроса_ПриАктивизацииСтроки();
	
КонецПроцедуры                                                                                                

&НаКлиенте
Процедура ДеревоСхемыЗапросаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	// prevent F9
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапросаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные; 	
	ДеревоСхемыЗапроса_ВыборИзменение(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапросаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.ДеревоСхемыЗапроса.ВыделенныеСтроки.Количество() > 1 Тогда
		Сообщить("Нельзя удалить несколько строк");
		Возврат;
	КонецЕсли;  
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	
	Если Не (ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос
		Или ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор) Тогда
		Сообщить("Можно удалить запрос или оператор");
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор
		И ТекДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
		Сообщить("Нельзя удалить единственный оператор");
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Тогда
		ДеревоСхемыЗапроса_УдалитьЗапрос(ТекДанные);
	ИначеЕсли ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор Тогда
		ДеревоСхемыЗапроса_УдалитьОператор(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура СхемаЗапросаОК(Команда)
	
	Если Элементы.ГруппаФорма.ТекущаяСтраница = Элементы.ГруппаОператор Тогда
		Результат = Оператор_ВыполнитьОператор();
		Если Не Результат.Результат Тогда
			ПоказатьПредупреждение(, Результат.ТекстЗапроса);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрЗакрытия = СхемаЗапроса_ТекстСхемыЗапроса(ЭтотОбъект.СхемаЗапросаВХ);
	
	ЭтотОбъект.ЗакрытиеФормы = Истина;
	ЭтотОбъект.Закрыть(ПараметрЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаЗапросаОтмена(Команда)
	
	ЭтотОбъект.ЗакрытиеФормы = Истина;
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТекущийЗапрос(Команда)
	
	Если Элементы.ГруппаФорма.ТекущаяСтраница = Элементы.ГруппаОператор И ЭтотОбъект.ОператорИзменения.ЕстьИзменения Тогда
		НастройкаОператора_Загрузить();
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);	
	ПараметрСобытия = СхемаЗапроса_ТекстПоТекущийЗапрос(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки.ИндексЗапроса);
	Оповестить("ФормаСхемаЗапросаВыполнитьТекущийЗапрос", ПараметрСобытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапросВыбора(Команда)
	
	ДеревоСхемыЗапроса_ДобавитьЗапросВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложенныйЗапрос(Команда)
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);	
	Если Не СтруктураСтроки.ЕстьОператор Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоСхемыЗапроса_ДобавитьВложенныйЗапрос(СтруктураСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗапросУничтожения(Команда)
	
	ДеревоСхемыЗапроса_ВыборВременнойТаблицы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОператор(Команда)
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	
	Если СтруктураСтроки.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоСхемыЗапроса_ДобавитьОператор(ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторИсточникаЗапроса));	
	СхемаЗапроса_ДобавитьОператор(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);	
	ПодключитьОбработчикОжидания("ОтображаемыйТекстЗапроса_ОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьСтроки(Команда)

	Для Каждого Строка Из ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСхемыЗапроса.Свернуть(Строка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСтроки(Команда)

	Для Каждого Строка Из ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы() Цикл
		Элементы.ДеревоСхемыЗапроса.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Переместить(Команда)
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	
	Если Не (ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Или ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Тогда
		Дерево = ЭтотОбъект.ДеревоСхемыЗапроса;
	Иначе
		Дерево = ТекДанные.ПолучитьРодителя();
	КонецЕсли;
	
	Коллекция 	= Дерево.ПолучитьЭлементы();
	Количество	= Коллекция.Количество();
	
	Если Количество = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Индекс 		= Коллекция.Индекс(ТекДанные);
	Направление	= ?(Команда.Имя = "ПереместитьВверх", -1, 1);
	
	Если Направление = -1 И Индекс = 0 Тогда
		Возврат;
	ИначеЕсли Направление = 1 И Индекс = Количество - 1 Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция.Сдвинуть(Индекс, Направление);
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Тогда
		ДеревоСхемыЗапроса_ПронумероватьЗапрос(ЭтотОбъект);
	Иначе
		ДеревоСхемыЗапроса_ПронумероватьОператор(ЭтотОбъект, Дерево);
		ЭтотОбъект.ОператорИдентификатор = Null;
		Элементы.ГруппаОператор.Доступность = Ложь;
	КонецЕсли;
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Тогда
		СхемаЗапроса_ПереместитьЗапрос(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки, Направление);
	Иначе
		СхемаЗапроса_ПереместитьОператор(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки, Направление);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	
	Если Не (ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Или ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор) Тогда
		Сообщить("Можно скопировать запрос или оператор");
		Возврат;
	КонецЕсли;
	
	ДеревоСхемыЗапроса_СкопироватьСтроку(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОператора(Команда)
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);	
	Если СтруктураСтроки.ЕстьОператор Тогда
		НастройкаОператора_Выгрузить(СтруктураСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекстЗапроса(Команда)

	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	
	ПараметрыОткрытия = Новый Структура("Источник, СхемаЗапросаВХ, ИндексЗапроса", "СхемаЗапроса", ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки.ИндексЗапроса);
	
	ОткрытьФорму(ИмяФормыОбработки("ТекстЗапроса"), ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , , 
		Новый ОписаниеОповещения("ОтображаемыйТекстЗапроса_Завершение", ЭтотОбъект, Новый Структура("СтруктураСтроки", СтруктураСтроки)));
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекстЗапроса(Команда)

	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	ОтображаемыйТекстЗапроса_Выгрузить(СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область ФормаСхемаЗапроса

&НаСервере
Процедура ФормаСхемаЗапроса_НастроитьФорму()
	
	ЭтотОбъект.ПеречислениеТипСтроки = Новый Структура();
	// ДеревоСхемыЗапроса.ТипСтроки
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("Запрос", 			"Запрос");
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("Оператор", 			"Оператор");
	// ДеревоСхемыЗапроса,ИсточникиДоступныеПоля.ТипСтроки
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("Источник", 			"Источник");
	// ИсточникиДоступныеПоля.ТипСтроки
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("ДоступноеПоле", 		"ДоступноеПоле");
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("ВыбираемыеПоля", 	"ВыбираемыеПоля");
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("ВыбираемоеПоле", 	"ВыбираемоеПоле");
	
	// ДеревоСхемыЗапроса.ТипЗапроса
	ЭтотОбъект.ПеречислениеТипЗапроса = Новый Структура();
	ЭтотОбъект.ПеречислениеТипЗапроса.Вставить("ЗапросВыбораСхемыЗапроса", 					"ЗапросВыбораСхемыЗапроса");
	ЭтотОбъект.ПеречислениеТипЗапроса.Вставить("ЗапросУничтоженияТаблицыСхемыЗапроса", 		"ЗапросУничтоженияТаблицыСхемыЗапроса");
	
	// ДеревоСхемыЗапроса,ИсточникиДоступныеПоля.ТипИсточника
	ЭтотОбъект.ПеречислениеТипИсточника = Новый Структура();
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ТаблицаСхемыЗапроса", 					"ТаблицаСхемыЗапроса");
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ВложенныйЗапросСхемыЗапроса", 			"ВложенныйЗапросСхемыЗапроса");
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ОписаниеВременнойТаблицыСхемыЗапроса", 	"ОписаниеВременнойТаблицыСхемыЗапроса");
	
	// ДеревоТаблиц,ДеревоСхемыЗапроса,ИсточникиДоступныеПоля.ТипТаблицы
	ЭтотОбъект.ПеречислениеТипТаблицы = Новый Структура();
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ОбычнаяТаблица", 	"ОбычнаяТаблица");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ТабличнаяЧасть", 	"ТабличнаяЧасть");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ВиртТаблица", 		"ВиртТаблица");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("Изменения", 		"Изменения");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ВремТаблица", 		"ВремТаблица");
	
	ЭтотОбъект.ПеречислениеКартинки = Новый Структура();
	ЭтотОбъект.ПеречислениеКартинки.Вставить("ВиртТаблица", 				Элементы.КартинкаВиртТаблица.Картинка);	
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Последовательность", 			Элементы.КартинкаПоследовательность.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("ЗапросВыбораСхемыЗапроса", 	Элементы.КартинкаЗапросВыбораСхемыЗапроса.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Оператор", 					Элементы.КартинкаОператор.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Функция", 					Элементы.КартинкаФункция.Картинка);
	
	ОписаниеКоллекций_Заполнить();	
	ДеревоТаблиц_Заполнить();
	
	ЭтотОбъект.ОтображаемыйТекстЗапросаВариантОтображения = "Текущий запрос";
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытииФормы()
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗакрытииФормы_Завершение", ЭтотОбъект, Новый Структура()), "Запрос изменен. Закрыть форму?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытииФормы_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.ЗакрытиеФормы = Истина;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСхемыЗапроса

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ПриАктивизацииСтроки()
			
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ЭтотОбъект.ОтображаемыйТекстЗапроса.УстановитьТекст("");
		Возврат;
	КонецЕсли;
	
	НовыйИдентификаторСтроки = ТекДанные.ПолучитьИдентификатор();
	Если ЭтотОбъект.ТекущийИдентификаторСтроки <> НовыйИдентификаторСтроки Тогда
		ЭтотОбъект.ТекущийИдентификаторСтроки = НовыйИдентификаторСтроки;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	Если ЭтотОбъект.ТекущийИдентификаторЗапроса <> СтруктураСтроки.ИдентификаторЗапроса Тогда
		ЭтотОбъект.ТекущийИдентификаторЗапроса = СтруктураСтроки.ИдентификаторЗапроса;
		ВременныеТаблицы = ДеревоСхемыЗапроса_ВременныеТаблицы(ЭтотОбъект, СтруктураСтроки.ИдентификаторЗапроса);
		ДеревоТаблиц_ЗаполнитьВременныеТаблицы(ЭтотОбъект, ВременныеТаблицы);
		ОтображаемыйТекстЗапросаЗаполнить = Истина;
	КонецЕсли;
	Если ЭтотОбъект.ТекущийИдентификаторИсточникаЗапроса <> СтруктураСтроки.ИдентификаторИсточникаЗапроса Тогда
		ЭтотОбъект.ТекущийИдентификаторИсточникаЗапроса = СтруктураСтроки.ИдентификаторИсточникаЗапроса;
	КонецЕсли;	
	
	Если СтруктураСтроки.ЕстьОператор Тогда
		Если ЭтотОбъект.ТекущийИдентификаторОператора <> СтруктураСтроки.ИдентификаторОператора Тогда
			ЭтотОбъект.ТекущийИдентификаторОператора = СтруктураСтроки.ИдентификаторОператора;
		КонецЕсли;			
	Иначе
		ЭтотОбъект.ТекущийИдентификаторОператора = Null;
	КонецЕсли;
	
	Если ОтображаемыйТекстЗапросаЗаполнить = Истина Тогда             
		ПодключитьОбработчикОжидания("ОтображаемыйТекстЗапроса_ОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
	Элементы.ГруппаОператор.Доступность = (СтруктураСтроки.ЕстьОператор И ЭтотОбъект.ОператорИдентификатор = СтруктураСтроки.ИдентификаторОператора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ВыборИзменение(Знач ТекДанные)
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос
		И ТекДанные.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса Тогда
		ДеревоСхемыЗапроса_ВыборВременнойТаблицы(ТекДанные);
	Иначе
		СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
		Если СтруктураСтроки.ЕстьОператор Тогда
			НастройкаОператора_Выгрузить(СтруктураСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ВыборВременнойТаблицы(Знач ТекДанные = Неопределено)
	
	ИдентификаторЗапроса = ?(ТекДанные <> Неопределено, ТекДанные.Идентификатор, -1);
	ВременныеТаблицы = ДеревоСхемыЗапроса_ВременныеТаблицы(ЭтотОбъект, ИдентификаторЗапроса);
	
	ПараметрыОткрытия = Новый Структура("ВременныеТаблицы", ВременныеТаблицы);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", (ТекДанные = Неопределено));
	Если ТекДанные <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("ИмяТаблицы", ТекДанные.Псевдоним);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбработки("ВыборВременнойТаблицы"), ПараметрыОткрытия,
		ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , ,
		Новый ОписаниеОповещения("ДеревоСхемыЗапроса_ВыборВременнойТаблицыЗавершение", ЭтотОбъект, 
		Новый Структура("ИдентификаторСтроки", ?(ТекДанные = Неопределено, Неопределено, ТекДанные.ПолучитьИдентификатор()))));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоСхемыЗапроса_ВыборВременнойТаблицыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИдентификаторСтроки = Неопределено Тогда
		Для Каждого ИмяТаблицы Из Результат Цикл
			ДеревоСхемыЗапроса_ДобавитьЗапросУничтожения(ИмяТаблицы);
		КонецЦикла;                                                  
		Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы()[ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Количество() - 1].ПолучитьИдентификатор();
	Иначе
		ТекДанные = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		ТекДанные.Псевдоним = Результат[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДеревоСхемыЗапроса_ПронумероватьЗапрос(Знач Форма)
	
	Индекс = 0;
	Для Каждого Строка Из Форма.ДеревоСхемыЗапроса.ПолучитьЭлементы() Цикл
		Строка.ИмяТаблицы = "Запрос " + Индекс;
		Если Строка.ТипЗапроса = Форма.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса Тогда
			Строка.ИмяТаблицы = Строка.ИмяТаблицы + " (уничтожение)";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДеревоСхемыЗапроса_ПронумероватьОператор(Знач Форма, Знач Дерево)
	
	Индекс = 0;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл         
		Строка.ИмяТаблицы = "Оператор " + Индекс;
		Индекс = Индекс + 1;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ДобавитьЗапросВыбора()
	
	НовСтр = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();	
	НовСтр.ТипСтроки 	 	= ЭтотОбъект.ПеречислениеТипСтроки.Запрос;
	НовСтр.ТипЗапроса 	 	= ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросВыбораСхемыЗапроса;
	ИндексЗапроса  			= ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Количество() - 1;
	НовСтр.ИмяТаблицы 	 	= "Запрос " + ИндексЗапроса;                             	
	НовСтр.Картинка 	 	= ЭтотОбъект.ПеречислениеКартинки.ЗапросВыбораСхемыЗапроса;
	
	ДеревоСхемыЗапроса_ДобавитьОператор(НовСтр);
	
	СхемаЗапроса_ДобавитьЗапросВыбора(ЭтотОбъект.СхемаЗапросаВХ);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ДобавитьВложенныйЗапрос(Знач СтруктураСтроки)
	
	НовСтр = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторОператора).ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор = НовСтр.ПолучитьИдентификатор();	
	НовСтр.ТипСтроки 	 = ЭтотОбъект.ПеречислениеТипСтроки.Источник;
	НовСтр.ТипИсточника  = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса;
	НовСтр.ИмяТаблицы 	 = "ВложенныйЗапрос";
	НовСтр.Псевдоним 	 = "ВложенныйЗапрос";
	НовСтр.Картинка 	 = БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос;
	
	ДеревоСхемыЗапроса_ДобавитьОператор(НовСтр);
	
	СхемаЗапроса_ДобавитьВложенныйЗапрос(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки, НовСтр.Псевдоним);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ДобавитьЗапросУничтожения(Знач ИмяТаблицы)
	
	НовСтр = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор = НовСтр.ПолучитьИдентификатор();	
	НовСтр.ТипСтроки 	 = ЭтотОбъект.ПеречислениеТипСтроки.Запрос;
	НовСтр.ТипЗапроса 	 = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса;
	ИндексЗапроса = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Количество() - 1;
	НовСтр.ИмяТаблицы 	 = "Запрос " + ИндексЗапроса + " (уничтожение)";
	НовСтр.Псевдоним 	 = ИмяТаблицы;
	НовСтр.Картинка 	 = БиблиотекаКартинок.КонструкторЗапросаСоздатьЗапросУничтоженияВременнойТаблицы;
	
	СхемаЗапроса_ДобавитьЗапросУничтожения(ЭтотОбъект.СхемаЗапросаВХ, ИмяТаблицы);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_ДобавитьОператор(Знач ТекДанные)
	
	НовСтр = ТекДанные.ПолучитьЭлементы().Добавить();              
	НовСтр.Идентификатор	= НовСтр.ПолучитьИдентификатор();	
	НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Оператор;
	ИндексОператора 		= ТекДанные.ПолучитьЭлементы().Количество() - 1;
	НовСтр.ИмяТаблицы 	 	= "Оператор " + ИндексОператора;
	НовСтр.Картинка 		= ЭтотОбъект.ПеречислениеКартинки.Оператор;
	
	Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = НовСтр.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_СкопироватьСтроку(Знач ТекДанные)
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос Тогда
		ДеревоСхемыЗапроса_СкопироватьЗапрос(СтруктураСтроки);
		Идентификатор = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы()[СтруктураСтроки.ИндексЗапроса + 1].ПолучитьИдентификатор();
		Элементы.ДеревоСхемыЗапроса.Развернуть(Идентификатор, Истина);
		Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = Идентификатор;
		ПодключитьОбработчикОжидания("ОтображаемыйТекстЗапроса_ОбработчикОжидания", 0.1, Истина);
	ИначеЕсли ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор Тогда
		ТекДанныеИсточникаЗапроса = ТекДанные.ПолучитьРодителя();
		ДеревоСхемыЗапроса_СкопироватьОператор(СтруктураСтроки);
		КоличествоОператоров = ТекДанныеИсточникаЗапроса.ПолучитьЭлементы().Количество();
		ТекДанныеОператора = ТекДанныеИсточникаЗапроса.ПолучитьЭлементы()[КоличествоОператоров - 1];
		Идентификатор = ТекДанныеОператора.ПолучитьИдентификатор();
		Элементы.ДеревоСхемыЗапроса.Развернуть(Идентификатор, Истина);
		Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = Идентификатор;
		ПодключитьОбработчикОжидания("ОтображаемыйТекстЗапроса_ОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_СкопироватьЗапрос(Знач СтруктураСтроки)
	
	СхемаЗапроса_СкопироватьЗапрос(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);
	
	СхемаЗапроса  = ПолучитьИзВременногоХранилища(ЭтотОбъект.СхемаЗапросаВХ);
	Запрос = СхемаЗапроса.ПакетЗапросов[СтруктураСтроки.ИндексЗапроса + 1];
	
	ТекДанные = ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Вставить(СтруктураСтроки.ИндексЗапроса + 1);
	ДеревоСхемыЗапроса_ЗаполнитьЗапрос(ТекДанные, Запрос, СтруктураСтроки.ИндексЗапроса + 1);
	ДеревоСхемыЗапроса_ПронумероватьЗапрос(ЭтотОбъект); 
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_СкопироватьОператор(Знач СтруктураСтроки)
	
	СхемаЗапроса_СкопироватьОператор(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);
	
	КурсорСЗ 	= СхемаЗапроса_КурсорСЗ(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= Запрос.Операторы[Запрос.Операторы.Количество() - 1];
	
	ТекДанныеИсточникаЗапроса = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторИсточникаЗапроса);
	ТекДанныеОператора = ТекДанныеИсточникаЗапроса.ПолучитьЭлементы().Добавить();
	ДеревоСхемыЗапроса_ЗаполнитьОператор(ТекДанныеОператора, Запрос, Оператор, ТекДанныеИсточникаЗапроса.ПолучитьЭлементы().Количество() - 1);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_УдалитьЗапрос(Знач ТекДанные)
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	СхемаЗапроса_УдалитьЗапрос(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);
	
	ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Удалить(ТекДанные);
	ДеревоСхемыЗапроса_ПронумероватьЗапрос(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСхемыЗапроса_УдалитьОператор(Знач ТекДанные)
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);	
	СхемаЗапроса_УдалитьОператор(ЭтотОбъект.СхемаЗапросаВХ, СтруктураСтроки);
	
	ТекДанныеИсточникаЗапроса = ТекДанные.ПолучитьРодителя();
	Коллекция = ТекДанныеИсточникаЗапроса.ПолучитьЭлементы();
	Коллекция.Удалить(ТекДанные);
	Если СтруктураСтроки.ИндексОператора = Коллекция.Количество() Тогда
		Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = Коллекция[Коллекция.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	ДеревоСхемыЗапроса_ПронумероватьОператор(ЭтотОбъект, ТекДанныеИсточникаЗапроса);
	
	ПодключитьОбработчикОжидания("ОтображаемыйТекстЗапроса_ОбработчикОжидания", 0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Функция ДеревоСхемыЗапроса_СтруктураСтроки(Знач ТекДанные)
	
	Результат = Новый Структура("ИдентификаторЗапроса, ТипЗапроса, ИндексЗапроса, ИдентификаторИсточникаЗапроса, ЭтоЗапросПакета, КоличествоОператоров,
		|ЕстьОператор,ИдентификаторОператора, ИндексОператора, ПозицияОператора");
	Результат.ЕстьОператор = Ложь;
	Результат.ИдентификаторОператора = Неопределено;
	Результат.ИндексОператора = Неопределено;
	Результат.ПозицияОператора = Неопределено;
	
	ИскомаяСтрока = ТекДанные;
	
	// Поиск запроса+
	// Влож. запрос в п.о. является источником, потом уже — запросом
	Если ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
		И ИскомаяСтрока.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса Тогда
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЕсли;
	
	Пока Не (ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос
		Или (ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
			И ИскомаяСтрока.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса)) Цикл
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Если ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
		И ИскомаяСтрока.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса Тогда
		Результат.ИдентификаторИсточникаЗапроса = ИскомаяСтрока.Идентификатор;
		Пока Не (ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос) Цикл
			ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
		КонецЦикла;	
	КонецЕсли;
	
	ТекДанныеЗапросаПакета = ИскомаяСтрока;
	
	Результат.ИдентификаторЗапроса		= ИскомаяСтрока.Идентификатор;
	Результат.ТипЗапроса 				= ИскомаяСтрока.ТипЗапроса;
	Результат.ИндексЗапроса 			= ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Индекс(ИскомаяСтрока);
	 	
	Если Результат.ИдентификаторИсточникаЗапроса = Неопределено Тогда
		Результат.ИдентификаторИсточникаЗапроса = ИскомаяСтрока.Идентификатор;
	КонецЕсли;
	
	Результат.ЭтоЗапросПакета = (Результат.ИдентификаторЗапроса = Результат.ИдентификаторИсточникаЗапроса);
	
	Если Результат.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросВыбораСхемыЗапроса Тогда
		Коллекция = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(Результат.ИдентификаторИсточникаЗапроса).ПолучитьЭлементы();
		Результат.КоличествоОператоров = Коллекция.Количество();
	Иначе
		Результат.КоличествоОператоров = 0;
	КонецЕсли;
	// Поиск запроса-
	
	ИскомаяСтрока = ТекДанные;
	
	// Поиск оператора+	
	Если ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Запрос
		И ИскомаяСтрока.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросВыбораСхемыЗапроса Тогда
		ИскомаяСтрока = ТекДанные.ПолучитьЭлементы()[0];
	КонецЕсли;
	
	Если Не (ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Оператор
		Или ИскомаяСтрока.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока ИскомаяСтрока.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.Оператор Цикл
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;	
	
	Результат.ЕстьОператор 				= Истина;
	Результат.ИдентификаторОператора	= ИскомаяСтрока.Идентификатор;	
	Результат.ИндексОператора 			= ИскомаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ИскомаяСтрока);	
	КурсорОператора = ДеревоСхемыЗапроса_КурсорОператора(ТекДанныеЗапросаПакета, Результат.ИдентификаторОператора); 
	Результат.ПозицияОператора 			= КурсорОператора.ПозицияОператора;
	// Поиск оператора-
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДеревоСхемыЗапроса_КурсорОператора(Знач Запрос, Знач ИдентификаторОператора, ТекПозицияОператора = 0)
	
	Для Каждого Оператор Из Запрос.ПолучитьЭлементы() Цикл
		Если Оператор.Идентификатор = ИдентификаторОператора Тогда
			Возврат Новый Структура("ПозицияОператора", ТекПозицияОператора);
		КонецЕсли;
		ТекПозицияОператора = ТекПозицияОператора + 1;
		Для Каждого Источник Из Оператор.ПолучитьЭлементы() Цикл
			Если Источник.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса Тогда
				Структура = ДеревоСхемыЗапроса_КурсорОператора(Источник, ИдентификаторОператора, ТекПозицияОператора);
				Если Структура <> Неопределено Тогда
					Возврат Структура;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДеревоСхемыЗапроса_ВременныеТаблицы(Знач Форма, Знач ИдентификаторЗапроса)
	
	МассивЗначений = Новый Массив();
	Для Каждого СтрокаЗапроса Из Форма.ДеревоСхемыЗапроса.ПолучитьЭлементы() Цикл
		Если СтрокаЗапроса.Идентификатор = ИдентификаторЗапроса Тогда
			Прервать;
		КонецЕсли;
		Если СтрокаЗапроса.ТипЗапроса = Форма.ПеречислениеТипЗапроса.ЗапросВыбораСхемыЗапроса И Не ПустаяСтрока(СтрокаЗапроса.Псевдоним) Тогда
			МассивЗначений.Добавить(СтрокаЗапроса.Псевдоним);
		ИначеЕсли СтрокаЗапроса.ТипЗапроса = Форма.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса Тогда
			Индекс = МассивЗначений.Найти(СтрокаЗапроса.Псевдоним);
			Если Индекс <> Неопределено Тогда
				МассивЗначений.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивЗначений;	
	
КонецФункции

&НаСервере
Процедура ДеревоСхемыЗапроса_ЗаполнитьСхемуЗапроса()
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(ЭтотОбъект.СхемаЗапросаВХ);
	
	ИндексЗапроса = 0;
	Для Каждого Запрос Из СхемаЗапроса.ПакетЗапросов Цикл
		ДеревоСхемыЗапроса_ЗаполнитьЗапрос(ЭтотОбъект.ДеревоСхемыЗапроса.ПолучитьЭлементы().Добавить(), Запрос, ИндексЗапроса);
		ИндексЗапроса = ИндексЗапроса + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_ЗаполнитьЗапрос(Знач НовСтр, Знач Запрос, Знач ИндексЗапроса)
	
	НовСтр.Идентификатор	= НовСтр.ПолучитьИдентификатор();
	НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Запрос;
	Если ТипЗнч(Запрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		НовСтр.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросВыбораСхемыЗапроса;
		НовСтр.Картинка   = ЭтотОбъект.ПеречислениеКартинки.ЗапросВыбораСхемыЗапроса;
	Иначе
		НовСтр.ТипЗапроса = ЭтотОбъект.ПеречислениеТипЗапроса.ЗапросУничтоженияТаблицыСхемыЗапроса;
		НовСтр.Картинка   = БиблиотекаКартинок.КонструкторЗапросаСоздатьЗапросУничтоженияВременнойТаблицы;
	КонецЕсли;
	НовСтр.ИмяТаблицы		= "Запрос " + ИндексЗапроса;
	Если ТипЗнч(Запрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		НовСтр.Псевдоним = Запрос.ТаблицаДляПомещения;
		ИндексОператора = 0;
		Для Каждого Оператор Из Запрос.Операторы Цикл
			ДеревоСхемыЗапроса_ЗаполнитьОператор(НовСтр.ПолучитьЭлементы().Добавить(), Запрос, Оператор, ИндексОператора);
			ИндексОператора = ИндексОператора + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Запрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		НовСтр.ИмяТаблицы	= НовСтр.ИмяТаблицы + " (уничтожение)";
		НовСтр.Псевдоним 	= Запрос.ИмяТаблицы;		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_ЗаполнитьОператор(Знач НовСтр, Знач Запрос, Знач Оператор, Знач ИндексОператора)
	
	НовСтр.Идентификатор	= НовСтр.ПолучитьИдентификатор();
	НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Оператор;	
	НовСтр.ИмяТаблицы		= "Оператор " + ИндексОператора;
	НовСтр.Картинка 		= ЭтотОбъект.ПеречислениеКартинки.Оператор;
	
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
		ДеревоСхемыЗапроса_ЗаполнитьИсточник(НовСтр.ПолучитьЭлементы().Добавить(), Запрос, ИсточникСхемыЗапроса);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_ЗаполнитьИсточник(Знач НовСтр, Знач Запрос, Знач ИсточникСхемыЗапроса)
	
	Источник = ИсточникСхемыЗапроса.Источник;

	НовСтр.Идентификатор	= НовСтр.ПолучитьИдентификатор();
	НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Источник;	
	НовСтр.Псевдоним 		= Источник.Псевдоним;
	
	Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
		НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ТаблицаСхемыЗапроса;
		НовСтр.ИмяТаблицы 	= Источник.ИмяТаблицы;                      
		ТаблицаФормы_УстановитьТипКартинкуТаблицы(НовСтр);				
	ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
		НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса;		
		НовСтр.ИмяТаблицы 	= "ВложенныйЗапрос";
		НовСтр.Картинка 	= БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос;
		ИндексОператора = 0;
		Для Каждого Оператор Из Источник.Запрос.Операторы Цикл
			ДеревоСхемыЗапроса_ЗаполнитьОператор(НовСтр.ПолучитьЭлементы().Добавить(), Источник.Запрос, Оператор, ИндексОператора);
			ИндексОператора = ИндексОператора + 1;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
		НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ОписаниеВременнойТаблицыСхемыЗапроса;
		НовСтр.ИмяТаблицы 	= Источник.ИмяТаблицы;
		НовСтр.Картинка 	= БиблиотекаКартинок.КонструкторЗапросаОписаниеВременнойТаблицы;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_ПрочитатьЗапрос(Знач СтруктураСтроки)
	
	ТекДанные = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторЗапроса);
	ТекДанные.ПолучитьЭлементы().Очистить();
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(ЭтотОбъект.СхемаЗапросаВХ);
	Запрос = СхемаЗапроса.ПакетЗапросов[СтруктураСтроки.ИндексЗапроса];
	ДеревоСхемыЗапроса_ЗаполнитьЗапрос(ТекДанные, Запрос, СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоСхемыЗапроса_ПрочитатьОператор(Знач СтруктураСтроки)
	
	ТекДанные = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторОператора);
	ТекДанные.ПолучитьЭлементы().Очистить();
	
	КурсорСЗ 	= СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	ДеревоСхемыЗапроса_ЗаполнитьОператор(ТекДанные, Запрос, Оператор, СтруктураСтроки.ИндексОператора);
	
КонецПроцедуры

#КонецОбласти

#Область ОтображаемыйТекстЗапроса

&НаКлиенте
Процедура ОтображаемыйТекстЗапроса_ОбработчикОжидания()
	
	ТекДанные = Элементы.ДеревоСхемыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДеревоСхемыЗапроса_СтруктураСтроки(ТекДанные);
	ОтображаемыйТекстЗапроса_Выгрузить(СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ОтображаемыйТекстЗапроса_Выгрузить(Знач ИндексЗапроса)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(ЭтотОбъект.СхемаЗапросаВХ);
	Текст = СхемаЗапроса_ТекстЗапроса(СхемаЗапроса, ИндексЗапроса);
	
	ЭтотОбъект.ОтображаемыйТекстЗапроса.УстановитьТекст(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображаемыйТекстЗапроса_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтроки = ДополнительныеПараметры.СтруктураСтроки;
	
	ОтображаемыйТекстЗапроса_ЗавершениеСервер(СтруктураСтроки);
	
	Элементы.ДеревоСхемыЗапроса.Развернуть(СтруктураСтроки.ИдентификаторЗапроса, Истина);
	Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = СтруктураСтроки.ИдентификаторЗапроса;
	
КонецПроцедуры

&НаСервере
Процедура ОтображаемыйТекстЗапроса_ЗавершениеСервер(Знач СтруктураСтроки)
	
	ДеревоСхемыЗапроса_ПрочитатьЗапрос(СтруктураСтроки);
	
	ОтображаемыйТекстЗапроса_Выгрузить(СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаОператора

&НаКлиенте
Процедура НастройкаОператора_Выгрузить(Знач СтруктураСтроки)
	
	Если Не (СтруктураСтроки.ИдентификаторОператора = ЭтотОбъект.ОператорИдентификатор) Тогда
		НастройкаОператора_ВыгрузитьСервер(СтруктураСтроки);
	КонецЕсли;
	
	Элементы.ГруппаФорма.ТекущаяСтраница 	= Элементы.ГруппаОператор;
	Элементы.ГруппаОператор.Доступность 	= Истина;
	ЭтотОбъект.ОператорИдентификатор 		= СтруктураСтроки.ИдентификаторОператора;
	
	ЭтотОбъект.ОператорИзменения.ЕстьИзменения = Ложь;
			
КонецПроцедуры

&НаСервере
Процедура НастройкаОператора_ВыгрузитьСервер(Знач СтруктураСтроки)
	
	// Иначе строка поиска дерева таблиц будет не доступна (?)
	Элементы.ГруппаОператор.Доступность = Истина;
	
	Если Не (ЭтотОбъект.ПараметрСтруктураСтроки = Неопределено) И ЭтотОбъект.ПараметрСтруктураСтроки.КоличествоОператоров > 1 Тогда
		УдаляемыеРеквизиты = Новый Массив();
		Для ИндексОператора = 0 По ЭтотОбъект.ПараметрСтруктураСтроки.КоличествоОператоров - 1 Цикл
			УдаляемыеРеквизиты.Добавить("ТекущаяКоллекцияВыбираемыеПоля.Выражение" + ИндексОператора);
		КонецЦикла;
		ЭтотОбъект.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		Для ИндексОператора = 0 По ЭтотОбъект.ПараметрСтруктураСтроки.КоличествоОператоров - 1 Цикл
			Элементы.Удалить(Элементы["ТекущаяКоллекцияВыбираемыеПоляВыражение" + ИндексОператора]);
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект.ПараметрСтруктураСтроки = СтруктураСтроки;
	
	Оператор_ЗаполнитьИзСхемыЗапроса();
	
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	Элементы.СвойстваЗапросаВыбиратьРазрешенные.Видимость 		= (СтруктураСтроки.ЭтоЗапросПакета И СтруктураСтроки.ИндексОператора = 0);
	Элементы.СвойстваЗапросаАвтопорядок.Видимость           	= (СтруктураСтроки.ЭтоЗапросПакета И СтруктураСтроки.ИндексОператора = 0);
	Элементы.ГруппаИтоги.Видимость 								= (СтруктураСтроки.ЭтоЗапросПакета И СтруктураСтроки.ИндексОператора = 0);
	Элементы.СвойстваЗапросаТаблицаДляПомещения.Видимость       = (СтруктураСтроки.ЭтоЗапросПакета И СтруктураСтроки.ИндексОператора = 0);	
	Элементы.СвойстваОператораСворачивать.Видимость				= (СтруктураСтроки.ИндексОператора > 0);
	
	Элементы.ТекущаяКоллекцияВыбираемыеПоля.ИзменятьСоставСтрок 	= (СтруктураСтроки.ИндексОператора = 0);
	Элементы.ТекущаяКоллекцияВыбираемыеПоля.ИзменятьПорядокСтрок 	= (СтруктураСтроки.ИндексОператора = 0);
	Элементы.ТекущаяКоллекцияВыбираемыеПоляПсевдоним.ТолькоПросмотр = Не (СтруктураСтроки.ИндексОператора = 0);
	
	Элементы.ГруппаСвойства.ТекущаяСтраница 						= Элементы.ГруппаВыбираемыеПоля;	
	Элементы.ИсточникиДоступныеПоляГруппаФункция.Доступность		= Ложь; 
	ЭтотОбъект.РежимЗамены 											= Не (СтруктураСтроки.ИндексОператора = 0);
	Элементы.РежимЗамены.ТолькоПросмотр 							= Не (СтруктураСтроки.ИндексОператора = 0);
	Элементы.ТекущаяКоллекцияВыбираемыеПоляКнопкаУдалить.Видимость 	= (СтруктураСтроки.ИндексОператора = 0);
	
	ЭтотОбъект.ОператорТекстИсключения = "";
	Элементы.ДекорацияТекстИсключения.Видимость = Ложь;
	Элементы.ДекорацияНеоднозначности.Видимость = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОператора_Загрузить()
	
	Результат = Оператор_ВыполнитьОператор();
	Если Результат.Результат Тогда
		НастройкаОператора_ЗагрузитьЗавершение();
	Иначе
		Элементы.ГруппаФорма.ТекущаяСтраница = Элементы.ГруппаОператор;
		ВопросОЗакрытииОператора();
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОператора_ЗагрузитьЗавершение()
	
	НастройкаОператора_ЗагрузитьСервер();
	
	Элементы.ДеревоСхемыЗапроса.ТекущаяСтрока = ЭтотОбъект.ПараметрСтруктураСтроки.ИдентификаторОператора;
	Элементы.ДеревоСхемыЗапроса.Развернуть(ЭтотОбъект.ПараметрСтруктураСтроки.ИдентификаторОператора, Истина);
	
	ЭтотОбъект.Модифицированность = Истина;
	
	ЭтотОбъект.ОператорИзменения.ЕстьИзменения = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НастройкаОператора_ЗагрузитьСервер()
	
	СтруктураСтроки = ЭтотОбъект.ПараметрСтруктураСтроки;
	
	ДеревоСхемыЗапроса_ПрочитатьОператор(СтруктураСтроки);
	ОтображаемыйТекстЗапроса_Выгрузить(СтруктураСтроки.ИндексЗапроса);
	
	Если СтруктураСтроки.ИндексОператора = 0 Тогда
		ТекДанныеЗапроса = ЭтотОбъект.ДеревоСхемыЗапроса.НайтиПоИдентификатору(СтруктураСтроки.ИдентификаторЗапроса);
		ТекДанныеЗапроса.Псевдоним = ЭтотОбъект.СвойстваЗапросаТаблицаДляПомещения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытииОператора()
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗакрытииОператора_Завершение", ЭтотОбъект, Новый Структура()), "Возникло исключение при обработке запроса. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ВопросОЗакрытииОператора_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы.ГруппаФорма.ТекущаяСтраница = Элементы.ГруппаСхемаЗапроса;
		НастройкаОператора_ЗагрузитьЗавершение();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////
// ФормаОператор

#Область СвойстваЭлементовФормы
	
	//Элементы.ИсточникиДоступныеПоля.Шапка = Ложь
	//Элементы.ИсточникиДоступныеПоля.СоставКоманд.. = Ложь
	
	//Элементы.ТекущаяКоллекция..СоставКоманд.Список\ИерархическийСписок\Дерево = Ложь
	
	//Элементы.ТекущаяКоллекцияПоляСАФ.СоставКоманд..= Ложь
	//Элементы.ТекущаяКоллекцияПоляСАФ.ПоложениеКоманднойПанели = Нет
	//Элементы.ТекущаяКоллекцияПоляСАФ.ТолькоПросмотр = Истина
	
	//Элементы.ГруппаВыбираемыеПоляВыборка..Заголовок
	
	//Элементы.ТекущаяКоллекцияВыраженияИтогов.СоставКоманд.. = Ложь
	//Элементы.ТекущаяКоллекцияИндекс.СоставКоманд.. = Ложь
	//Элементы.ТекущаяКоллекцияТаблицыДляИзменения.СоставКоманд.. = Ложь
	
#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ГруппаСвойстваПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаГруппировки
		Или Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаПорядок
		Или Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаИтоги
		Или Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаПрочее Тогда
		ИсточникиДоступныеПоля_ОтобразитьВыбираемыеПоля(Истина);
	Иначе                                                     		
		ИсточникиДоступныеПоля_ОтобразитьВыбираемыеПоля(Ложь);	
	КонецЕсли;
	
	Элементы.ИсточникиДоступныеПоляГруппаФункция.Доступность = (Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаГруппировки);
	
	Если Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаГруппировки Тогда
		ТекущаяКоллекцияГруппировки_ЗаполнитьПоляСАФ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЗапросаОператораПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("СвойстваЗапросаОператора");
	
КонецПроцедуры

#Область ИсточникиДоступныеПоля

&НаКлиенте
Процедура ИсточникиДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИсточникиДоступныеПоля_РазвернутьДоступныеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
		И ТекДанные.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ОписаниеВременнойТаблицыСхемыЗапроса Тогда
		ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	
	Если ТекДанные.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.Источник Тогда	
		Возврат;
	КонецЕсли;
	
	ИсточникиДоступныеПоля_УдалитьИсточник(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Идентификатор = ПараметрыПеретаскивания.Значение[0];
	ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(Идентификатор);
	ПараметрыПеретаскивания.Значение = ИсточникиДоступныеПоля_ВыражениеДоступногоПоля(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// prevent Cancel (?)
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Не (Поле = Неопределено) И Поле.Имя = "ИсточникиДоступныеПоляЗначение" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Значение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		Значение = Значение[0];
		Если ТипЗнч(Значение) = Тип("ДанныеФормыЭлементДерева")
			И Значение.Свойство("ЭтоИсточник")
			И Значение.ЭтоИсточник Тогда
			ИсточникиДоступныеПоля_ДобавитьТаблицу(Значение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыбираемыеПоля

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;
	Если ЭтотОбъект.РежимЗамены Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКоллекцияВыбираемыеПоля_ИзменитьВыражение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПередНачаломИзменения(Элемент, Отказ)
		
	Если Элемент.ТекущийЭлемент.Имя = "ТекущаяКоллекцияВыбираемыеПоляВыражение" Тогда
		Отказ = Истина;
		ТекДанные = Элементы.ТекущаяКоллекцияВыбираемыеПоля.ТекущиеДанные;
		Если ТекДанные.ЭтоВТ Тогда
			Возврат;
		КонецЕсли;
		ТекущаяКоллекцияВыбираемыеПоля_ИзменитьВыражение(ТекДанные);
	КонецЕсли; 
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПередУдалением(Элемент, Отказ)
	
	Если ЭтотОбъект.РежимЗамены Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
	ТекущаяКоллекцияВыбираемыеПоля_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоляПсевдонимПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТекущаяКоллекцияВыбираемыеПоля.ТекущиеДанные;
	ТекущаяКоллекцияВыбираемыеПоля_УстановитьПсевдоним(ТекДанные, ТекДанные.Псевдоним);
	
КонецПроцедуры

#КонецОбласти

#Область Соединения

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Соединения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ТекущаяКоллекцияСоединения.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекДанные.ТипСоединения = "Левое внешнее";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("Соединения");
	
	ТекущаяКоллекцияСоединения_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияСоединенияВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТекущаяКоллекцияСоединения.ТекущиеДанные;
	Если ПустаяСтрока(ТекДанные.Источник) Или ПустаяСтрока(ТекДанные.Приемник) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыражения = Новый Структура();
	СтруктураВыражения.Вставить("Источник", 	ТекДанные.Источник);
	СтруктураВыражения.Вставить("Приемник", 	ТекДанные.Приемник);
	
	ТаблицаФормы = "Соединения";
	ПараметрыОткрытия = НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, ТекДанные.Выражение, ТекДанные.ПолучитьИдентификатор());	
	ПараметрыОткрытия.Вставить("Выражение", 			ТекДанные.Выражение);	
	ПараметрыОткрытия.Вставить("СтруктураВыражения", 	СтруктураВыражения);
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
			
КонецПроцедуры

#КонецОбласти

#Область Группировки

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Группировки");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ 	= Истина;
	Индекс 	= ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы().Количество();
	
	НовСтр = ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы().Добавить();
	НовСтр.Выражение = "Группировка " + Индекс;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ТекущаяКоллекцияГруппировки.ТекущиеДанные;
	
	Если ТекДанные.ПолучитьРодителя() = Неопределено И ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы().Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПослеУдаления(Элемент)

	Индекс = 0;	
	Для Каждого Строка Из ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы() Цикл
		Строка.Выражение = "Группировка " + Индекс + ?(Индекс = 0, " Авто", "");
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("Группировки");
	
	ТекущаяКоллекцияГруппировки_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

#КонецОбласти

#Область Отбор

&НаКлиенте
Процедура ТекущаяКоллекцияОтборПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Отбор");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//bookmark
	//Отказ = Истина;
	//НовСтр = ЭтотОбъект.ТекущаяКоллекцияОтбор.ПолучитьЭлементы().Добавить();
	//Элементы.ТекущаяКоллекцияОтбор.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	//Элементы.ТекущаяКоллекцияОтбор.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборПередНачаломИзменения(Элемент, Отказ)
	
	//bookmark
	//Отказ = Истина;
	//ТекущаяКоллекцияОтбор_ИзменитьВыражение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("Отбор");
	
	ТекущаяКоллекцияОтбор_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтборВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТекущаяКоллекцияОтбор.ТекущиеДанные;
	
	ТаблицаФормы = "Отбор";
	ПараметрыОткрытия = НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, ТекДанные.Выражение, ТекДанные.ПолучитьИдентификатор());
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
			
КонецПроцедуры

#КонецОбласти

#Область Параметры

&НаКлиенте
Процедура ТекущаяКоллекцияПараметрыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ТекущаяКоллекцияПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТекущаяКоллекцияПараметрыВыражение.СписокВыбора.ЗагрузитьЗначения(ТекДанные.Варианты.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПараметрыПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = Элементы.ТекущаяКоллекцияПараметры.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТекущаяКоллекцияПараметрыВыражение" Тогда
		Если ТекДанные.ТипПараметра = "Вариант" Тогда
			Элемент.ТекущийЭлемент.РедактированиеТекста = Ложь;
		Иначе
			Элемент.ТекущийЭлемент.РедактированиеТекста = Истина;		
		КонецЕсли;
		Если ТекДанные.ТипПараметра = "" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если ТекДанные.ТипПараметра = "Условие" Тогда
			Элемент.ТекущийЭлемент.КнопкаВыбора = Истина;
		Иначе
			Элемент.ТекущийЭлемент.КнопкаВыбора = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПараметрыВыражениеПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Параметры");
	
	ТекДанные = Элементы.ТекущаяКоллекцияПараметры.ТекущиеДанные;
	
	Если ТекДанные.Имя = "Периодичность" Тогда
		ТекущаяКоллекцияПараметры_ИзменитьПериодичность(ТекДанные.ПолучитьРодителя().Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПараметрыВыражениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТекущаяКоллекцияПараметры.ТекущиеДанные;
	
	СтруктураВыражения = Новый Структура();
	СтруктураВыражения.Вставить("Псевдоним", 		ТекДанные.ПолучитьРодителя().Имя);
	СтруктураВыражения.Вставить("ДоступныеПоля", 	ТекДанные.ДоступныеПоля);
	СтруктураВыражения.Вставить("Индекс", 			ТекДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекДанные));
	
	ТаблицаФормы = "Параметры";
	ПараметрыОткрытия = НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, ТекДанные.Выражение, ТекДанные.ПолучитьИдентификатор());
	ПараметрыОткрытия.Вставить("Выражение", 			ТекДанные.Выражение);	
	ПараметрыОткрытия.Вставить("СтруктураВыражения", 	СтруктураВыражения);
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
			
КонецПроцедуры

#КонецОбласти

#Область ТаблицыДляИзменения

&НаКлиенте
Процедура ТекущаяКоллекцияТаблицыДляИзмененияПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("ТаблицыДляИзменения");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияТаблицыДляИзмененияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияТаблицыДляИзмененияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияТаблицыДляИзмененияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("ТаблицыДляИзменения");
	
	ТекущаяКоллекцияТаблицыДляИзменения_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

#КонецОбласти

#Область Порядок

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;	
	ТекущаяКоллекцияПорядок_ИзменитьВыражение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущийЭлемент.Имя = "ТекущаяКоллекцияПорядокКолонкаВыражение" Тогда
		Отказ = Истина;
		ТекДанные = Элементы.ТекущаяКоллекцияПорядок.ТекущиеДанные;
		ТекущаяКоллекцияПорядок_ИзменитьВыражение(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("Порядок");
	
	ТекущаяКоллекцияПорядок_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

#КонецОбласти

#Область ВыраженияИтогов

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("ВыраженияИтогов");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("ВыраженияИтогов");
	
	ТекущаяКоллекцияВыраженияИтогов_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговФункцияПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("ВыраженияИтогов");
	
	ТекДанные = Элементы.СписокЗапросВыраженияИтогов.ТекущиеДанные;	
	ТекущаяКоллекцияВыраженияИтоговПсевдонимФункцияПриИзменении(ТекДанные);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольныеТочкиИтогов

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("КонтрольныеТочкиИтогов");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Отказ = Истина;	
	ТекущаяКоллекцияКонтрольныеТочкиИтогов_ИзменитьВыражение();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущийЭлемент.Имя = "ТекущаяКоллекцияКонтрольныеТочкиИтоговКолонкаВыражение" Тогда
		Отказ = Истина;
		ТекДанные = Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ТекущиеДанные;
		ТекущаяКоллекцияКонтрольныеТочкиИтогов_ИзменитьВыражение(ТекДанные);
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтоговПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("КонтрольныеТочкиИтогов");
	
	ТекущаяКоллекцияКонтрольныеТочкиИтогов_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

#КонецОбласти

#Область Индекс

&НаКлиенте
Процедура ТекущаяКоллекцияИндексПриИзменении(Элемент)
	
	Оператор_ЗафиксироватьИзменение("Индекс");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияИндексНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияИндексПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	// prevent Cancel (?) 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияИндексПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Оператор_ЗафиксироватьИзменение("Индекс");
	
	ТекущаяКоллекцияИндекс_ПеренестиЗначение(ПараметрыПеретаскивания.Значение, Строка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОператорТекстЗапроса(Команда)
		
	Результат = Оператор_ВыполнитьОператор();
	Если Не Результат.Результат Тогда
		ПоказатьПредупреждение(, Результат.ТекстЗапроса);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("Источник, ОтображаемыйТекстЗапроса", "Оператор", Результат.ТекстЗапроса);
	ОткрытьФорму(ИмяФормыОбработки("ТекстЗапроса"), ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДоступныеПоля(Команда)
	
	ИсточникиДоступныеПоля_РазвернутьДоступныеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТаблицу(Команда)

	ТекДанные = Элементы.ДеревоТаблиц.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Или Не ТекДанные.ЭтоИсточник Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиДоступныеПоля_ДобавитьТаблицу(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОписаниеВТ(Команда)
	
	ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереименоватьТаблицу(Команда)
	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.Источник Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиДоступныеПоля_ПереименоватьИсточник(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьТаблицу(Команда)

	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.Источник Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникиДоступныеПоля_ЗаменитьИсточник(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыраженияПрименитьФункцию(Команда)
	
	ТекДанные 	= Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не (ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле И Не ТекДанные.ЭтоВТ) Тогда
		Возврат;
	КонецЕсли;
		
	ТекДанные.Выражение = Выражения_ПрименитьФункцию(ТекДанные.Выражение, Команда.Имя);
	ТекДанные.Значение  = ТекДанные.Выражение;
	ТекДанные.САФ 		= Истина;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанные);
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТекДанные.Псевдоним, "Псевдоним");
	ИскомаяСтрока.Выражение = ТекДанные.Выражение;
	ИскомаяСтрока.САФ 		= Истина;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ИскомаяСтрока);
	
	ТекущаяКоллекцияГруппировки_ЗаполнитьПоляСАФ();
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыраженияОчиститьФункцию(Команда)
	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не (ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле И Не ТекДанные.ЭтоВТ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Выражение = Выражения_ОчиститьФункцию(ТекДанные.Выражение);
	ТекДанные.Значение  = ТекДанные.Выражение;
	ТекДанные.САФ 		= Ложь;                                                 	
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанные);
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТекДанные.Псевдоним, "Псевдоним");
	ИскомаяСтрока.Выражение = ТекДанные.Выражение;
	ИскомаяСтрока.САФ 		= Ложь;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ИскомаяСтрока);
	
	ТекущаяКоллекцияГруппировки_ЗаполнитьПоляСАФ();
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыраженияПрименитьEСТЬNULL(Команда)
	
	ТекДанные = Элементы.ТекущаяКоллекцияВыбираемыеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.ЭтоВТ Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Выражение = Выражения_ОчиститьЕСТЬNULL(ТекДанные.Выражение);
	ТекДанные.Выражение = Выражения_ПрименитьEСТЬNULL(ТекДанные.Выражение, ТекДанные.ТипЗначения);
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыраженияОчиститьЕСТЬNULL(Команда)
	
	ТекДанные = Элементы.ТекущаяКоллекцияВыбираемыеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанные.ЭтоВТ Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Выражение = Выражения_ОчиститьЕСТЬNULL(ТекДанные.Выражение);
	
	Оператор_ЗафиксироватьИзменение("ВыбираемыеПоля");
	
КонецПроцедуры

#КонецОбласти

#Область ФормаОператор

&НаСервере
Процедура ФормаОператор_НастроитьФорму()
	
	ЭтотОбъект.ОператорИзменения = Новый Структура("ЕстьИзменения", Ложь);
	
	ВыраженияНастроитьФорму(Элементы.ИсточникиДоступныеПоляПодменюФункция);
	
	Элементы.СвойстваЗапросаТаблицаДляПомещения.КнопкаОчистки = Истина;
	
	Элементы.СвойстваОператораКоличествоПолучаемыхЗаписей.КнопкаВыпадающегоСписка = Истина;
	Элементы.СвойстваОператораКоличествоПолучаемыхЗаписей.СписокВыбора.Добавить(1);
	
	// ВыбираемыеПоля
	
	Элементы.ТекущаяКоллекцияВыбираемыеПоляВыражение.РедактированиеТекста = Ложь;
	
	// Соединения
	
	Элементы.ТекущаяКоллекцияСоединения.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияСоединенияИсточник.РежимВыбораИзСписка = Истина;
	Элементы.ТекущаяКоллекцияСоединенияИсточник.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияСоединенияПриемник.РежимВыбораИзСписка = Истина;
	Элементы.ТекущаяКоллекцияСоединенияПриемник.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.РежимВыбораИзСписка = Истина;
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.РедактированиеТекста = Ложь;
	// bookmark
	//Элементы.ТекущаяКоллекцияСоединенияВыражение.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияСоединенияВыражение.КнопкаВыбора = Истина;
	Элементы.ТекущаяКоллекцияСоединенияВыражение.УстановитьДействие("НачалоВыбора", "ТекущаяКоллекцияСоединенияВыражениеНачалоВыбора");
	Элементы.ТекущаяКоллекцияСоединенияВыражение.МногострочныйРежим = Истина;
	
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.СписокВыбора.Добавить("Левое внешнее");
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.СписокВыбора.Добавить("Правое внешнее");
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.СписокВыбора.Добавить("Полное внешнее");
	Элементы.ТекущаяКоллекцияСоединенияТипСоединения.СписокВыбора.Добавить("Внутреннее");
	
	// Группировки
	
	Элементы.ТекущаяКоллекцияГруппировки.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	Элементы.ТекущаяКоллекцияГруппировкиВыражение.ТолькоПросмотр = Истина;
	
	// Отбор
	
	Элементы.ТекущаяКоллекцияОтбор.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияОтборВыражение.КнопкаВыбора = Истина;
	Элементы.ТекущаяКоллекцияОтборВыражение.УстановитьДействие("НачалоВыбора", "ТекущаяКоллекцияОтборВыражениеНачалоВыбора");
	Элементы.ТекущаяКоллекцияОтборВыражение.МногострочныйРежим = Истина;
	
	// Таблицы для изменения
	
	Элементы.ТекущаяКоллекцияТаблицыДляИзменения.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияТаблицыДляИзмененияИмяТаблицы.ТолькоПросмотр = Истина;
	
	// Параметры
	
	Элементы.ТекущаяКоллекцияПараметры.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	Элементы.ТекущаяКоллекцияПараметры.ИзменятьСоставСтрок = Ложь;
	Элементы.ТекущаяКоллекцияПараметры.ИзменятьПорядокСтрок = Ложь;
	
	Элементы.ТекущаяКоллекцияПараметрыИмя.ТолькоПросмотр = Истина;
	Элементы.ТекущаяКоллекцияПараметрыТипПараметра.ТолькоПросмотр = Истина;
	
	Элементы.ТекущаяКоллекцияПараметрыВыражение.КнопкаВыпадающегоСписка = Истина;
	Элементы.ТекущаяКоллекцияПараметрыВыражение.КнопкаОчистки = Истина;	
	Элементы.ТекущаяКоллекцияПараметрыВыражение.УстановитьДействие("ПриИзменении", "ТекущаяКоллекцияПараметрыВыражениеПриИзменении");	
	Элементы.ТекущаяКоллекцияПараметрыВыражение.УстановитьДействие("НачалоВыбора", "ТекущаяКоллекцияПараметрыВыражениеНачалоВыбора");
	Элементы.ТекущаяКоллекцияПараметрыВыражение.МногострочныйРежим = Истина;
	
	// Порядок
	
	Элементы.ТекущаяКоллекцияПорядок.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияПорядокКолонкаВыражение.РедактированиеТекста = Ложь;
	
	Элементы.ТекущаяКоллекцияПорядокНаправление.РежимВыбораИзСписка = Истина; 
	Элементы.ТекущаяКоллекцияПорядокНаправление.СписокВыбора.Добавить("По возрастанию");
	Элементы.ТекущаяКоллекцияПорядокНаправление.СписокВыбора.Добавить("По возрастанию иерархии");
	Элементы.ТекущаяКоллекцияПорядокНаправление.СписокВыбора.Добавить("По убыванию");
	Элементы.ТекущаяКоллекцияПорядокНаправление.СписокВыбора.Добавить("По убывванию иерархии");
	
	// ВыраженияИтогов
	
	Элементы.ТекущаяКоллекцияВыраженияИтогов.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияВыраженияИтоговПсевдоним.ТолькоПросмотр = Истина;
	
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.КнопкаВыпадающегоСписка = Истина;	
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("СУММА");
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("МИНИМУМ");
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("МАКСИМУМ");
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("СРЕДНЕЕ");
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("КОЛИЧЕСТВО");
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.СписокВыбора.Добавить("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ)");
		
	Элементы.ТекущаяКоллекцияВыраженияИтоговФункция.УстановитьДействие("ПриИзменении", "ТекущаяКоллекцияВыраженияИтоговФункцияПриИзменении");
	
	// КонтрольныеТочкиИтогов
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтогов.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКолонкаВыражение.РедактированиеТекста = Ложь;
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.КнопкаВыпадающегоСписка = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.СписокВыбора.Добавить("Элементы");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.СписокВыбора.Добавить("Иерархия");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.СписокВыбора.Добавить("Только иерархия");
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.РедактированиеТекста = Ложь;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.КнопкаВыпадающегоСписка = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Без дополнения");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Год");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Полугодие");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Квартал");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Месяц");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Декада");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Неделя");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("День");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Минута");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Час");
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.СписокВыбора.Добавить("Секунда");
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПериодаДополнения.КнопкаВыпадающегоСписка = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПериодаДополнения.КнопкаОчистки = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПериодаДополнения.СписокВыбора.Добавить("&НачалоПериода");
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКонецПериодаДополнения.КнопкаВыпадающегоСписка = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКонецПериодаДополнения.КнопкаОчистки = Истина;
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКонецПериодаДополнения.СписокВыбора.Добавить("&КонецПериода");
	
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.Заголовок 		= "Итоги";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипКонтрольнойТочки.Подсказка		= "Тип контрольной точки";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.Заголовок 	= "Дополнение";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговТипДополненияПериодами.Подсказка 	= "Тип дополнения периодами";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПериодаДополнения.Заголовок 	= "Начало периода";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговНачалоПериодаДополнения.Подсказка	= "Начало периода дополнения";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКонецПериодаДополнения.Заголовок 	= "Конец периода";
	Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтоговКонецПериодаДополнения.Подсказка		= "Конец периода дополнения";
	
	// Индекс
	
	Элементы.ТекущаяКоллекцияИндекс.Отображение = ОтображениеТаблицы.Список;
	
	Элементы.ТекущаяКоллекцияИндексКолонкаВыражение.ТолькоПросмотр = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДоступныеПоля

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ДобавитьТаблицу(Знач ТекДанныеИсточника)
	
	Оператор_ЗафиксироватьИзменение("Источники");
	
	НовСтр = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Добавить();	
	НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Источник;
	НовСтр.ТипИсточника		= ЭтотОбъект.ПеречислениеТипИсточника.ТаблицаСхемыЗапроса; 
	НовСтр.ИмяТаблицы 		= ТекДанныеИсточника.Имя;
	НовСтр.ТипТаблицы		= ТекДанныеИсточника.ТипТаблицы;
	НовСтр.Картинка 		= ТекДанныеИсточника.Картинка;
	
	ИсточникиДоступныеПоля_ДобавитьТаблицуСервер(ТекДанныеИсточника.Имя, НовСтр.ПолучитьИдентификатор());
	
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	ИсточникиДоступныеПоля_ПроверитьНеоднозначности();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ДобавитьТаблицуСервер(Знач ИмяТаблицы, Знач ИдентификаторИсточника) 
	
	ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ИдентификаторИсточника);
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();	
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.Добавить(ИмяТаблицы);

	ТекДанные.Псевдоним = ИсточникСхемыЗапроса.Источник.Псевдоним;
	ТекДанные.Значение  = ТекДанные.Псевдоним;
	
	ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(ТекДанные, ИсточникСхемыЗапроса.Источник);
	
	Если ИсточникСхемыЗапроса.Источник.Параметры.Количество() > 0 Тогда
		КоллекцияПараметры_Заполнить(ИсточникСхемыЗапроса.Источник, ТекДанные.Картинка);
	КонецЕсли;
	
	КоллекцияСоединения_ОбновитьСоединенияПриемника(КурсорСЗ.Оператор, ИсточникСхемыЗапроса.Источник.Псевдоним);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ(Знач ИдентификаторИсточника = Неопределено)
	
	Если ИдентификаторИсточника <> Неопределено Тогда
		Результат = Оператор_ВыполнитьОператор(Истина);
	КонецЕсли;
	
	ПараметрыОткрытия = ОписаниеВТ_ПараметрыОткрытия(ИдентификаторИсточника);                                      
		
	ОткрытьФорму(ИмяФормыОбработки("ОписаниеВТ"), ПараметрыОткрытия,
		ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , ,
		Новый ОписаниеОповещения("ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ_Завершение", ЭтотОбъект,
			Новый Структура("ИдентификаторИсточника", ИдентификаторИсточника)));
		
КонецПроцедуры
		
&НаКлиенте
Процедура ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оператор_ЗафиксироватьИзменение("Источники");
	
	Если ДополнительныеПараметры.ИдентификаторИсточника = Неопределено Тогда		
		ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Добавить();
		ТекДанные.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.Источник;
		ТекДанные.ТипИсточника 	= ЭтотОбъект.ПеречислениеТипИсточника.ОписаниеВременнойТаблицыСхемыЗапроса;	
	Иначе	
		ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторИсточника);
	КонецЕсли;
	
	ТекДанные.ИмяТаблицы 	= Результат.ИмяТаблицы;
	ТекДанные.Псевдоним		= Результат.Псевдоним;
	ТекДанные.Картинка 		= БиблиотекаКартинок.КонструкторЗапросаОписаниеВременнойТаблицы;
	ТекДанные.Значение 		= ТекДанные.Псевдоним;
		
	ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ_ЗавершениеСервер(Результат.ДоступныеПоля, ТекДанные.ПолучитьИдентификатор());
	
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	ИсточникиДоступныеПоля_ПроверитьНеоднозначности();
			
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ДобавитьИзменитьОписаниеВТ_ЗавершениеСервер(Знач АдресВХ, Знач ИдентификаторИсточника)
	
	ОписаниеВТ_ЗагрузитьДоступныеПоляВХ(АдресВХ, ИдентификаторИсточника);
	Оператор_ОбновитьИзСхемыЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ПереименоватьИсточник(Знач ТекДанные)
	
	Результат = Оператор_ВыполнитьОператор(Истина);
	
	Оповещение = Новый ОписаниеОповещения("ИсточникиДоступныеПоля_ПереименоватьИсточникЗавершение", ЭтотОбъект, Новый Структура("ИдентификаторИсточника", ТекДанные.ПолучитьИдентификатор()));
	ПоказатьВводСтроки(Оповещение, ТекДанные.Псевдоним, "Новый псевдоним");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ПереименоватьИсточникЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не (ТипЗнч(Результат) = Тип("Строка") И Не ПустаяСтрока(Результат)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторИсточника);
	Если Результат = ТекДанные.Псевдоним Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если Строка = ТекДанные Тогда
			Продолжить;
		КонецЕсли;
		Если Результат = Строка.Псевдоним Тогда
			Сообщить("Повторящийся псевдоним");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Оператор_ЗафиксироватьИзменение("Источники");
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияПараметры, ТекДанные.Псевдоним, "Имя");
	Если ИскомаяСтрока <> Неопределено Тогда
		ИскомаяСтрока.Имя = Результат;
	КонецЕсли;
	
	ИсточникиДоступныеПоля_ПереименоватьИсточникСервер(ТекДанные.Псевдоним, Результат);
	
	ТекДанные.Псевдоним = Результат;
	ТекДанные.Значение 	= Результат;
		
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	ИсточникиДоступныеПоля_ПроверитьНеоднозначности();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ПереименоватьИсточникСервер(Знач СтарыйПсевдоним, Знач НовыйПсевдоним)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();	
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.НайтиПоПсевдониму(СтарыйПсевдоним);
	ИсточникСхемыЗапроса.Источник.Псевдоним = НовыйПсевдоним;
	
	Оператор_ОбновитьИзСхемыЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ЗаменитьИсточник(Знач ТекДанные)
	
	Результат = Оператор_ВыполнитьОператор(Истина);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВременныеТаблицы", ДеревоСхемыЗапроса_ВременныеТаблицы(ЭтотОбъект, ЭтотОбъект.ПараметрСтруктураСтроки.ИдентификаторЗапроса));
	Оповещение = Новый ОписаниеОповещения("ИсточникиДоступныеПоля_ЗаменитьИсточникЗавершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("ВыборТаблицы"), ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ЗаменитьИсточникЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оператор_ЗафиксироватьИзменение("Источники");
	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	ТекДанные.ИмяТаблицы 	= Результат.ИмяТаблицы;
	ТекДанные.ТипТаблицы 	= Результат.ТипТаблицы;
	ТекДанные.Картинка 		= Результат.Картинка;
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияПараметры, ТекДанные.Псевдоним, "Имя");
	Если ИскомаяСтрока <> Неопределено Тогда
		ЭтотОбъект.ТекущаяКоллекцияПараметры.ПолучитьЭлементы().Удалить(ИскомаяСтрока);
	КонецЕсли;
		
	ИсточникиДоступныеПоля_ЗаменитьИсточникСервер(Результат, ТекДанные.ПолучитьИдентификатор());
	
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	ИсточникиДоступныеПоля_ПроверитьНеоднозначности();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаменитьИсточникСервер(Знач Результат, Знач ИдентификаторИсточника) 
	
	ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ИдентификаторИсточника);
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.НайтиПоПсевдониму(ТекДанные.Псевдоним);
	Индекс = КурсорСЗ.Оператор.Источники.Индекс(ИсточникСхемыЗапроса);	
	ДоступнаяТаблица = КурсорСЗ.Запрос.ДоступныеТаблицы.Найти(Результат.ИмяТаблицы);
	КурсорСЗ.Оператор.Источники.Заменить(Индекс, ДоступнаяТаблица);
		
	Если ИсточникСхемыЗапроса.Источник.Параметры.Количество() > 0 Тогда
		КоллекцияПараметры_Заполнить(ИсточникСхемыЗапроса.Источник, Результат.Картинка);
	КонецЕсли;
	
	ТекДанные.Псевдоним 	= ИсточникСхемыЗапроса.Источник.Псевдоним;
	ТекДанные.Значение 		= ТекДанные.Псевдоним;
	
	ТекДанные.ПолучитьЭлементы().Очистить();	
	ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(ТекДанные, ИсточникСхемыЗапроса.Источник);
	
	Оператор_ОбновитьИзСхемыЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_УдалитьИсточник(Знач ТекДанные)
	
	Оператор_ЗафиксироватьИзменение("Источники");
	
	Результат = Оператор_ВыполнитьОператор(Истина);
	
	ИндексТекДанных = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Индекс(ТекДанные);
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияПараметры, ТекДанные.Псевдоним, "Имя");
	Если ИскомаяСтрока <> Неопределено Тогда
		ЭтотОбъект.ТекущаяКоллекцияПараметры.ПолучитьЭлементы().Удалить(ИскомаяСтрока);
	КонецЕсли;
	
	ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Удалить(ИндексТекДанных);
	ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(ЭтотОбъект);
	
	ИсточникиДоступныеПоля_УдалитьИсточникСервер(ТекДанные.Псевдоним);
	
	ИсточникиДоступныеПоля_ПроверитьНеоднозначности();
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_УдалитьИсточникСервер(Знач Псевдоним)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	КурсорСЗ.Оператор.Источники.Удалить(Псевдоним);
	
	Оператор_ОбновитьИзСхемыЗапроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ПроверитьНеоднозначности()
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекДанные Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемыеПоля Тогда
			Продолжить;
		КонецЕсли;
		ТекМассивСтрок = ИсточникиДоступныеПоля_НайтиНеоднозначности(ТекДанные);
		ДобавитьМассив(МассивСтрок, ТекМассивСтрок);
	КонецЦикла;
	
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок.Вставить(0, Новый ФорматированнаяСтрока("Обнаружены неоднозначности. Рекомендуется переименовать таблицу", , WebЦвета.Красный));
		МассивСтрок.Вставить(1, Символы.ПС);
	КонецЕсли;
	
	ЕстьНеоднозначности = (МассивСтрок.Количество() > 0);
	Если ЕстьНеоднозначности Тогда
		Элементы.ДекорацияНеоднозначности.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		Элементы.ДекорацияНеоднозначности.Заголовок = "";
	КонецЕсли; 
	
	Элементы.ДекорацияНеоднозначности.Видимость = ЕстьНеоднозначности;
	
КонецПроцедуры

&НаКлиенте
Функция ИсточникиДоступныеПоля_НайтиНеоднозначности(Знач ТекДанные)
	
	МассивСтрок = Новый Массив();
	
	Для Каждого Источник Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если Источник = ТекДанные Или Источник.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемыеПоля Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Поле Из Источник.ПолучитьЭлементы() Цикл
			Если Поле.Имя = ТекДанные.Псевдоним Тогда
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Таблица: ", Новый ФорматированнаяСтрока(ТекДанные.Псевдоним, , WebЦвета.ТемноСиний)));
				МассивСтрок.Добавить(Символы.ПС);
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Поле: " + Источник.Псевдоним + ".", Новый ФорматированнаяСтрока(Поле.Имя, , WebЦвета.ТемноСиний)));
				МассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;                                                                                                                                 		
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

#КонецОбласти

#Область ВыбираемыеПоля

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ИзменитьВыражение(Знач ТекДанные = Неопределено)
			
	ИндексВТ 		= Неопределено; // уже не нужно
	ИндексСтроки 	= Неопределено;
	Если ТекДанные <> Неопределено Тогда
		СтрокаВТ = ТекДанные.ПолучитьРодителя();
		Если СтрокаВТ = Неопределено Тогда
			ИндексВТ = Неопределено;
			ИндексСтроки  = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Индекс(ТекДанные);
		Иначе
			ИндексВТ = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Индекс(СтрокаВТ);
			ИндексСтроки  = СтрокаВТ.ПолучитьЭлементы().Индекс(ТекДанные);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаФормы 		= "ВыбираемыеПоля";
	Выражение 			= ?(ТекДанные <> Неопределено, ТекДанные.Выражение, Неопределено);
	Идентификатор		= ?(ТекДанные <> Неопределено, ТекДанные.ПолучитьИдентификатор(), Неопределено);
	ПараметрыОткрытия 	= НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, Выражение, Идентификатор);
	ПараметрыОткрытия.Вставить("СтруктураВыражения", Новый Структура("ИндексСтроки,ИндексВТ", ИндексСтроки, ИндексВТ));		                       
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры)
	
	ЭтоИзменение = (ДополнительныеПараметры.Идентификатор <> Неопределено);	
	ТекДанные = ?(ДополнительныеПараметры.Идентификатор <> Неопределено, ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор), Неопределено);
	ТекСтрока = Элементы.ТекущаяКоллекцияВыбираемыеПоля.ТекущиеДанные;
	
	СписокВТ 			= ИсточникиДоступныеПоля_СписокВТ();
	ПроверкаПриемника 	= ТекущаяКоллекцияВыбираемыеПоля_ПроверкаПриемника(СписокВТ, Результат.Выражение);
	
	Если ЭтоИзменение Тогда
		Если ПроверкаПриемника.Результат Тогда
			Если Не (ТекДанные.ПолучитьРодителя() <> Неопределено И ТекДанные.ПолучитьРодителя().Выражение = ПроверкаПриемника.ВыражениеПриемник) Тогда
				Сообщить("Некорректная замена");
				Возврат; // Отказ
			Иначе
				ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(ТекДанные, Результат); // Выражение принимается
			КонецЕсли;
		ИначеЕсли Результат.ЭтоВТ Тогда
			Если Не (ТекДанные.ПолучитьРодителя() = Неопределено) Тогда
				Сообщить("Некорректная замена");
				Возврат; // Отказ
			КонецЕсли;
			Если ЭтотОбъект.РежимЗамены И Не ТекДанные.ЭтоВТ Тогда
				Сообщить("Некорректная замена");
				Возврат; // Отказ
			КонецЕсли;
			ТаблицаПриемник = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, Результат.Выражение, "Выражение");
			Если Не (ТаблицаПриемник = Неопределено) Тогда
				Сообщить("Добавление той же вложенной таблицы");
				Возврат; // Отказ
			Иначе
				ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(ТекДанные, Результат); // Выражение принимается
			КонецЕсли;
		Иначе
			Если ЭтотОбъект.РежимЗамены И ТекДанные.ЭтоВТ Тогда // false
				Сообщить("Некорректная замена");
				Возврат; // Отказ
			КонецЕсли;
			ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(ТекДанные, Результат); // Выражение принимается
		КонецЕсли;
	Иначе
		Если ПроверкаПриемника.Результат Тогда
			ТаблицаПриемник = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ПроверкаПриемника.ВыражениеПриемник, "Выражение");
			Если ТаблицаПриемник = Неопределено Тогда
				ТаблицаПриемник = ТекущаяКоллекцияВыбираемыеПоля_ДобавитьВТ(ПроверкаПриемника.ВыражениеПриемник);
			КонецЕсли;
			НовСтр = ТаблицаПриемник.ПолучитьЭлементы().Добавить(); 
			ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(НовСтр, Результат); // Выражение принимается
		ИначеЕсли Результат.ЭтоВТ Тогда
			ТаблицаПриемник = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, Результат.Выражение, "Выражение");
			Если Не (ТаблицаПриемник = Неопределено) Тогда
				Сообщить("Добавление той же вложенной таблицы");
				Возврат; // Отказ
			Иначе
				НовСтр = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
				ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(НовСтр, Результат); // Выражение принимается
			КонецЕсли;
		Иначе
			Дерево = ?(Не (ТекСтрока <> Неопределено И ТекСтрока.ПолучитьРодителя() <> Неопределено), ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТекСтрока.ПолучитьРодителя());
			НовСтр = Дерево.ПолучитьЭлементы().Добавить();
			ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(НовСтр, Результат); // Выражение принимается
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Функция ТекущаяКоллекцияВыбираемыеПоля_ПроверкаПриемника(Знач СписокВТ, Знач Выражение)
	
	Для Каждого Значение Из СписокВТ Цикл
		Если СтрНайти(Выражение, Значение + ".") > 0 Тогда
			Возврат Новый Структура("Результат, ВыражениеПриемник", Истина, Значение);
		КонецЕсли;
	КонецЦикла;   
	
	Возврат Новый Структура("Результат, ВыражениеПриемник", Ложь, "");	
	
КонецФункции

&НаКлиенте
Функция ТекущаяКоллекцияВыбираемыеПоля_ДобавитьВТ(Знач Выражение)
	
	ТаблицаПриемник = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
	ТаблицаПриемник.Выражение = Выражение;
	ТаблицаПриемник.ЭтоВТ = Истина;
	ТекущаяКоллекцияВыбираемыеПоля_УстановитьПсевдоним(ТаблицаПриемник, Выражение);
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТаблицаПриемник);
	Возврат ТаблицаПриемник;
					
КонецФункции

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПрисвоитьРезультатВыражения(Знач ТекДанные, Знач Результат)
	
	ЗаполнитьЗначенияСвойств(ТекДанные, Результат, , "Псевдоним");
	Если ПустаяСтрока(ТекДанные.Псевдоним) Тогда
		ТекДанные.Псевдоним = Результат.Псевдоним;
	КонецЕсли;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
		
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	
	ТекДанные = Неопределено;	
	Если Идентификатор <> Неопределено Тогда
		ТекДанные = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.НайтиПоИдентификатору(Идентификатор);
	КонецЕсли;
	
	Сведения = ИсточникиДоступныеПоля_СведенияОЗначенииИсточника(Значение);
	
	Если Сведения.ТипПоля = "Источник" Тогда
		ТекущаяКоллекцияВыбираемыеПоля_ПеренестиИсточник(ТекДанныеИсточника, Значение, ТекДанные);
	ИначеЕсли Сведения.ТипПоля = "ВТ" Тогда
		ТекущаяКоллекцияВыбираемыеПоля_ПеренестиВТ(ТекДанныеИсточника, Значение, ТекДанные);
	ИначеЕсли Сведения.ТипПоля = "ПолеВТ" Тогда
		ТекущаяКоллекцияВыбираемыеПоля_ПеренестиПолеВТ(ТекДанныеИсточника, Значение, ТекДанные);
	Иначе
		ТекущаяКоллекцияВыбираемыеПоля_ПеренестиПолеИсточника(ТекДанныеИсточника, Значение, ТекДанные);
	КонецЕсли;	
		
КонецПроцедуры 

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПеренестиИсточник(Знач ТекДанныеИсточника, Знач Значение, Знач ТекДанные)
	
	Если ЭтотОбъект.РежимЗамены Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		Для Каждого Строка Из ТекДанныеИсточника.ПолучитьЭлементы() Цикл
			// Исключаем вложенные таблицы
			Если Строка.ЭтоВТ Тогда
				Продолжить;
			КонецЕсли;
			НовСтр = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(НовСтр, Значение + "." + Строка.Значение, ТекДанныеИсточника);
		КонецЦикла;
	Иначе // false
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПеренестиВТ(Знач ТекДанныеИсточника, Знач Значение, Знач ТекДанные)
	
	Если ЭтотОбъект.РежимЗамены И ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		Если Не ЭтотОбъект.РежимЗамены Тогда
			ТаблицаПриемник = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, Значение, "Выражение");
			Если ТаблицаПриемник = Неопределено Тогда
				ТаблицаПриемник = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначениеВТ(ТаблицаПриемник, Значение);
			КонецЕсли;
			Для Каждого СтрокаВТ Из ТекДанныеИсточника.ПолучитьЭлементы() Цикл
				НовСтрВТ = ТаблицаПриемник.ПолучитьЭлементы().Добавить();
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(НовСтрВТ, Значение + "." + СтрокаВТ.Значение, СтрокаВТ);
			КонецЦикла;
		Иначе
			ТекДанные.ПолучитьЭлементы().Очистить();
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначениеВТ(ТекДанные, Значение);
			Для Каждого СтрокаВТ Из ТекДанныеИсточника.ПолучитьЭлементы() Цикл
				НовСтрВТ = ТекДанные.ПолучитьЭлементы().Добавить();
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(НовСтрВТ, Значение + "." + СтрокаВТ.Значение, СтрокаВТ);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Не ТекДанные.ЭтоВТ Тогда
			Возврат;
		КонецЕсли;                                                                        
		ТекущаяКоллекцияВыбираемыеПоля_ОбнулитьЗначение(ТекДанные);
		ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначениеВТ(ТекДанные, Значение);
		Для Каждого СтрокаВТ Из ТекДанныеИсточника.ПолучитьЭлементы() Цикл
			ТекДанныеВТ = Форма_НайтиСтроку(ТекДанные, "NULL", "Выражение");
			Если ТекДанныеВТ <> Неопределено Тогда
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(ТекДанныеВТ, Значение + "." + СтрокаВТ.Значение, СтрокаВТ);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПеренестиПолеВТ(Знач ТекДанныеИсточника, Знач Значение, Знач ТекДанные)
	
	Если ЭтотОбъект.РежимЗамены И ТекДанные = Неопределено Тогда                                
		Возврат;
	КонецЕсли;
	
	МассивСтрок = СтрРазделить(Значение, ".");
	ТаблицаВыражение = МассивСтрок[0] + "." + МассивСтрок[1];
	
	ТаблицаПриемник = Неопределено;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Выражение = ТаблицаВыражение Тогда
			ТаблицаПриемник = ТекДанные;
		ИначеЕсли ТекДанные.ПолучитьРодителя() <> Неопределено И ТекДанные.ПолучитьРодителя().Выражение = ТаблицаВыражение Тогда
			ТаблицаПриемник = ТекДанные.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;
	Если ТаблицаПриемник = Неопределено Тогда
		ТаблицаПриемник = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТаблицаВыражение, "Выражение");
	КонецЕсли;
			
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		Если Не ЭтотОбъект.РежимЗамены Тогда
			Если ТаблицаПриемник = Неопределено Тогда
				ТаблицаПриемник = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначениеВТ(ТаблицаПриемник, ТаблицаВыражение);
			КонецЕсли;
			НовСтрВТ = ТаблицаПриемник.ПолучитьЭлементы().Добавить();
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(НовСтрВТ, Значение, ТекДанныеИсточника);
		Иначе
			Если ТекДанные.ПолучитьРодителя() <> Неопределено И ТекДанные.ПолучитьРодителя().Выражение = ТаблицаВыражение Тогда
				ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(ТекДанные, Значение, ТекДанныеИсточника);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ТекДанные.ПолучитьРодителя() <> Неопределено И ТекДанные.ПолучитьРодителя().Выражение = ТаблицаВыражение Тогда
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(ТекДанные, Значение, ТекДанныеИсточника);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ПеренестиПолеИсточника(Знач ТекДанныеИсточника, Знач Значение, Знач ТекДанные)
	
	Если ЭтотОбъект.РежимЗамены И ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтотОбъект.РежимЗамены И ТекДанные.ПолучитьРодителя() <> Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		Если Не ЭтотОбъект.РежимЗамены Тогда
			НовСтр = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Добавить();
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(НовСтр, Значение, ТекДанныеИсточника);
		Иначе
			ТекДанные.ПолучитьЭлементы().Очистить();
			ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(ТекДанные, Значение, ТекДанныеИсточника);
		КонецЕсли;
	Иначе
		Если ТекДанные.ЭтоВТ Тогда
			Возврат;
		КонецЕсли;
		ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(ТекДанные, Значение, ТекДанныеИсточника);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначение(Знач ТекДанные, Знач Значение, Знач ТекДанныеИсточника)
	
	ТекДанные.Выражение 	= Значение;
	ТекДанные.ТипЗначения 	= ТекДанныеИсточника.ТипЗначения;
	ТекДанные.ЭтоВТ 		= ТекДанныеИсточника.ЭтоВТ;
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		ТекущаяКоллекцияВыбираемыеПоля_УстановитьПсевдоним(ТекДанные, Значение);
	КонецЕсли;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанные);
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_УстановитьЗначениеВТ(Знач ТекДанные, Знач Значение)
	
	ТекДанные.Выражение = Значение;
	ТекДанные.ТипЗначения = Новый ОписаниеТипов();
	ТекДанные.ЭтоВТ = Истина;
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора = 0 Тогда
		ТекущаяКоллекцияВыбираемыеПоля_УстановитьПсевдоним(ТекДанные, Значение);
	КонецЕсли;
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанные);
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_ОбнулитьЗначение(Знач ТекДанныеПриемника)
	
	ТекДанныеПриемника.Выражение = ?(Не ТекДанныеПриемника.ЭтоВТ, "NULL", "ПУСТАЯТАБЛИЦА");
	ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанныеПриемника);
	Для Каждого ТекДанныеПриемникаВТ Из ТекДанныеПриемника.ПолучитьЭлементы() Цикл
		ТекДанныеПриемникаВТ.Выражение = "NULL";
		ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, ТекДанныеПриемникаВТ);
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыбираемыеПоля_УстановитьПсевдоним(Знач ТекДанные, Знач Значение)
	
	Значение = ТекстПослеТочкиСНачала(Значение);
	Если ТекДанные.ПолучитьРодителя() <> Неопределено Тогда
		Значение = ТекстПослеТочкиСНачала(Значение);
	КонецЕсли;
	Значение = СтрЗаменить(Значение, ".", "");
	Дерево = ?(ТекДанные.ПолучитьРодителя() = Неопределено, ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТекДанные.ПолучитьРодителя());
	ТекДанные.Псевдоним = "";
	ТекДанные.Псевдоним = КорректныйПсевдоним(Дерево.ПолучитьЭлементы(), Значение);
			
КонецПроцедуры

#КонецОбласти

#Область Соединения

&НаКлиентеНаСервереБезКонтекста
Процедура ТекущаяКоллекцияСоединения_ОбновитьСписокВыбора(Знач Форма)
	
	Форма.Элементы.ТекущаяКоллекцияСоединенияИсточник.СписокВыбора.Очистить();
	Форма.Элементы.ТекущаяКоллекцияСоединенияПриемник.СписокВыбора.Очистить();
	Для Каждого Строка Из Форма.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Форма.Элементы.ТекущаяКоллекцияСоединенияИсточник.СписокВыбора.Добавить(Строка.Значение);
		Форма.Элементы.ТекущаяКоллекцияСоединенияПриемник.СписокВыбора.Добавить(Строка.Значение);
	КонецЦикла;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТекущаяКоллекцияСоединения_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	
	ПсевдонимИсточника = ТекстПередТочкойСНачала(Значение);
		
	Если Идентификатор = Неопределено Тогда
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияСоединения.ПолучитьЭлементы().Добавить();
		ИскомаяСтрока.Источник 			= ПсевдонимИсточника;
		ИскомаяСтрока.Выражение 		= Значение + " = ";
		ИскомаяСтрока.ТипСоединения 	= "Левое внешнее";
	Иначе
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияСоединения.НайтиПоИдентификатору(Идентификатор);
		МассивСтрок = СтрРазделить(ИскомаяСтрока.Выражение, " = ", Ложь);
		Если МассивСтрок.Количество() = 1 Тогда
			ИскомаяСтрока.Приемник 			= ПсевдонимИсточника;
			ИскомаяСтрока.Выражение 		= ИскомаяСтрока.Выражение + Значение;
		Иначе
			ИскомаяСтрока.Источник 			= ПсевдонимИсточника;
			ИскомаяСтрока.Выражение 		= Значение + " = ";
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Группировки

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировки_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Или ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы();
	
	Если Идентификатор <> Неопределено Тогда
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияГруппировки.НайтиПоИдентификатору(Идентификатор);
		Если ИскомаяСтрока.ПолучитьРодителя() <> Неопределено Тогда
			ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
		КонецЕсли;
	ИначеЕсли Коллекция.Количество() > 0 Тогда
		ИскомаяСтрока = Коллекция[Коллекция.Количество() - 1];
	Иначе
		ИскомаяСтрока = Коллекция.Добавить();
		ИскомаяСтрока.Выражение = "Группировка 0";
	КонецЕсли;
	
	НовСтр = ИскомаяСтрока.ПолучитьЭлементы().Добавить();
	НовСтр.Выражение = Значение;
	
	Элементы.ТекущаяКоллекцияГруппировки.Развернуть(ИскомаяСтрока.ПолучитьИдентификатор());
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияГруппировки_ЗаполнитьПоляСАФ()
	
	ЭтотОбъект.ТекущаяКоллекцияПоляСАФ.Очистить();
	Для Каждого Строка Из ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы() Цикл
		Если Строка.САФ Тогда
			НовСтр = ЭтотОбъект.ТекущаяКоллекцияПоляСАФ.Добавить();
			НовСтр.Выражение = Строка.Выражение; 
			НовСтр.Картинка  = ЭтотОбъект.ПеречислениеКартинки.Функция;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отбор

&НаКлиенте
Процедура ТекущаяКоллекцияОтбор_ИзменитьВыражение()  
	
	ТекДанные = Элементы.ТекущаяКоллекцияОтбор.ТекущиеДанные;
	
	ТаблицаФормы = "Отбор";
	ПараметрыОткрытия = НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, ТекДанные.Выражение);		
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
			
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияОтбор_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияОтбор.ПолучитьЭлементы();
	
	Если Идентификатор <> Неопределено Тогда
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияОтбор.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ИскомаяСтрока = Коллекция.Добавить();
	КонецЕсли;
	
	Если Не (ТекДанныеИсточника.ТипЗначения.Типы().Количество() = 1 И ТекДанныеИсточника.ТипЗначения.Типы()[0] = Тип("Булево")) Тогда
		Значение = Значение + " = &" + ТекстПослеТочкиСКонца(ТекДанныеИсточника.Значение);
	КонецЕсли;
	
	ИскомаяСтрока.Выражение = Значение;
		
КонецПроцедуры

#КонецОбласти

#Область ТаблицыДляИзменения

&НаКлиенте
Процедура ТекущаяКоллекцияТаблицыДляИзменения_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Значение = ТекДанныеИсточника.ИмяТаблицы;
	
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
		И ТекДанныеИсточника.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ТаблицаСхемыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанныеИсточника.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ВремТаблица Тогда
		Возврат;
	КонецЕсли;
    Если ТекДанныеИсточника.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть Тогда
		ИмяТабличнойЧасти = ТекстПослеТочкиСКонца(Значение);
		Значение = СтрЗаменить(Значение, "." + ИмяТабличнойЧасти, "");
	КонецЕсли;
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения, Значение, "ИмяТаблицы");
	Если ИскомаяСтрока = Неопределено Тогда
		НовСтр = ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения.ПолучитьЭлементы().Добавить();
		НовСтр.ИмяТаблицы = Значение;
		НовСтр.Картинка = ТекДанныеИсточника.Картинка;
	КонецЕсли;
		
КонецПроцедуры
	
&НаСервере
Функция ТекущаяКоллекцияТаблицыДляИзменения_НайтиТаблицуДляИзменения(Знач ИмяТаблицы)
	
	Для Каждого Строка Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если Не (Строка.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.Источник
			И Строка.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ТаблицаСхемыЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ВремТаблица Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть Тогда
			Если СтрНачинаетсяС(Строка.ИмяТаблицы, ИмяТаблицы + ".") Тогда
				Возврат Строка;
			КонецЕсли;
		Иначе
			Если Строка.ИмяТаблицы = ИмяТаблицы Тогда
				Возврат Строка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Параметры

&НаСервере
Процедура ТекущаяКоллекцияПараметры_ИзменитьПериодичность(Знач Псевдоним)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	
	ИсточникСхемыЗапроса  = Оператор.Источники.НайтиПоПсевдониму(Псевдоним);
	Источник = ИсточникСхемыЗапроса.Источник;
	
	СтрокаИсточник 	= Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияПараметры, Источник.Псевдоним, "Имя");
	СтрокаПараметр 	= Форма_НайтиСтроку(СтрокаИсточник, "Периодичность", "Имя");
	ИндексПараметра = СтрокаИсточник.ПолучитьЭлементы().Индекс(СтрокаПараметр);
	Источник.Параметры[ИндексПараметра].Выражение = Новый ВыражениеСхемыЗапроса(СтрокаПараметр.Выражение);
	
	СтрокаИсточник = Форма_НайтиСтроку(ЭтотОбъект.ИсточникиДоступныеПоля, Псевдоним, "Значение");	
	СтрокаИсточник.ПолучитьЭлементы().Очистить();
	
	ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(СтрокаИсточник, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область Порядок

&НаКлиенте
Процедура ТекущаяКоллекцияПорядок_ИзменитьВыражение(Знач ТекДанные = Неопределено)
	
	ТаблицаФормы 		= "Порядок";
	Выражение 			= ?(ТекДанные <> Неопределено, ТекДанные.КолонкаВыражение, Неопределено);
	Идентификатор		= ?(ТекДанные <> Неопределено, ТекДанные.ПолучитьИдентификатор(), Неопределено);
	ПараметрыОткрытия 	= НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, Выражение, Идентификатор);
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);
					
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядок_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры)
	
	ЭтоИзменение = (ДополнительныеПараметры.Идентификатор <> Неопределено);	
	ТекДанные = ?(ДополнительныеПараметры.Идентификатор <> Неопределено, ЭтотОбъект.ТекущаяКоллекцияПорядок.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор), Неопределено);
	ТекСтрока = Элементы.ТекущаяКоллекцияПорядок.ТекущиеДанные;
	
	Если ЭтоИзменение Тогда
		ТекДанные.КолонкаВыражение 	= Результат.Выражение;
	Иначе
		ТекДанные = ЭтотОбъект.ТекущаяКоллекцияПорядок.ПолучитьЭлементы().Добавить();
		ТекДанные.Направление 		= "По возрастанию";                                   
		ТекДанные.КолонкаВыражение 	= Результат.Выражение;
		ТаблицаФормы_ЗаполнитьКолонкуВыражение(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияПорядок_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Или ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Значение = ТекДанныеИсточника.Псевдоним;
	КонецЕсли;
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияПорядок.ПолучитьЭлементы();
	
	Если Идентификатор <> Неопределено Тогда
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияПорядок.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ИскомаяСтрока = Коллекция.Добавить();
	КонецЕсли; 
	
	ИскомаяСтрока.КолонкаВыражение = Значение;
	ИскомаяСтрока.Направление = "По возрастанию";
	
	ТаблицаФормы_ЗаполнитьКолонкуВыражение(ИскомаяСтрока);
		
КонецПроцедуры

#КонецОбласти

#Область ВыраженияИтогов

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтогов_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанныеИсточника.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов.ПолучитьЭлементы();
	
	Если Идентификатор <> Неопределено Тогда
		ТекДанные = ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекДанные = Коллекция.Добавить();
	КонецЕсли;
	
	ТекДанные.Псевдоним = ТекДанныеИсточника.Псевдоним;
	Если ТекДанныеИсточника.ТипЗначения.Типы().Количество() > 0
		И ТекДанныеИсточника.ТипЗначения.Типы()[0] = Тип("Число") Тогда
		ТекДанные.Функция = "СУММА";
	Иначе
		ТекДанные.Функция = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ)";		
	КонецЕсли;
	ТекущаяКоллекцияВыраженияИтоговПсевдонимФункцияПриИзменении(ТекДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияВыраженияИтоговПсевдонимФункцияПриИзменении(Знач ТекДанные)
	
	Если ТекДанные.Функция = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ)" Тогда
		ТекДанные.Выражение = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ТекДанные.Псевдоним + ")";
	Иначе
		ТекДанные.Выражение = ТекДанные.Функция + "(" + ТекДанные.Псевдоним + ")";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольныеТочкиИтогов

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтогов_ИзменитьВыражение(Знач ТекДанные = Неопределено)
	
	ТаблицаФормы 		= "КонтрольныеТочкиИтогов";
	Выражение 			= ?(ТекДанные <> Неопределено, ТекДанные.КолонкаВыражение, Неопределено);
	Идентификатор		= ?(ТекДанные <> Неопределено, ТекДанные.ПолучитьИдентификатор(), Неопределено);
	ПараметрыОткрытия 	= НастройкаВыражения_ПараметрыОткрытия(ТаблицаФормы, Выражение, Идентификатор);
	НастройкаВыражения_ОткрытьФорму(ПараметрыОткрытия);

КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтогов_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры)
	
	ЭтоИзменение = (ДополнительныеПараметры.Идентификатор <> Неопределено);	
	ТекДанные = ?(ДополнительныеПараметры.Идентификатор <> Неопределено, ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор), Неопределено);
	ТекСтрока = Элементы.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ТекущиеДанные;
	
	Если ЭтоИзменение Тогда
		ТекДанные.КолонкаВыражение 			= Результат.Выражение;
	Иначе
		ТекДанные = ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ПолучитьЭлементы().Добавить();                                  
		ТекДанные.КолонкаВыражение 			= Результат.Выражение; 
		ТекДанные.ТипКонтрольнойТочки 		= "Элементы";
		ТекДанные.ТипДополненияПериодами 	= "Без дополнения";
		ТаблицаФормы_ЗаполнитьКолонкуВыражение(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяКоллекцияКонтрольныеТочкиИтогов_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Или ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Значение = ТекДанныеИсточника.Псевдоним;
	КонецЕсли;
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ПолучитьЭлементы();
	
	Если Идентификатор <> Неопределено Тогда
		ТекДанные = ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.НайтиПоИдентификатору(Идентификатор);
	Иначе
		ТекДанные = Коллекция.Добавить();
	КонецЕсли;

	ТекДанные.КолонкаВыражение 			= Значение;
	ТекДанные.ТипКонтрольнойТочки 		= "Элементы";
	ТекДанные.ТипДополненияПериодами 	= "Без дополнения";
	
	ТаблицаФормы_ЗаполнитьКолонкуВыражение(ТекДанные);	
		
КонецПроцедуры

#КонецОбласти

#Область Индекс

&НаКлиенте
Процедура ТекущаяКоллекцияИндекс_ПеренестиЗначение(Знач Значение, Знач Идентификатор = Неопределено)
	
	ТекДанныеИсточника = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если Не (ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Или ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле) Тогда
		Возврат;
	КонецЕсли;
	Если ТекДанныеИсточника.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Значение = ТекДанныеИсточника.Псевдоним;
	КонецЕсли;
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияИндекс, Значение, "КолонкаВыражение");
	Если ИскомаяСтрока = Неопределено Тогда
		НовСтр = ЭтотОбъект.ТекущаяКоллекцияИндекс.ПолучитьЭлементы().Добавить();
		НовСтр.КолонкаВыражение = Значение;
		ТаблицаФормы_ЗаполнитьКолонкуВыражение(НовСтр);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ОписаниеВТ

&НаСервере
Функция ОписаниеВТ_ПараметрыОткрытия(Знач ИдентификаторИсточника = Неопределено)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("СхемаЗапросаВХ", 			ЭтотОбъект.СхемаЗапросаВХ); 
	ПараметрыОткрытия.Вставить("ПараметрСтруктураСтроки", 	ЭтотОбъект.ПараметрСтруктураСтроки);
	ПараметрыОткрытия.Вставить("Источники", 				ОписаниеВТ_ПоместитьИсточникиВХ());
	Если ИдентификаторИсточника <> Неопределено Тогда
		Строка = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ИдентификаторИсточника);	
		ПараметрыОткрытия.Вставить("ИмяТаблицы", 	Строка.ИмяТаблицы);
		ПараметрыОткрытия.Вставить("Псевдоним", 	Строка.Псевдоним);
		ПараметрыОткрытия.Вставить("ДоступныеПоля", ОписаниеВТ_ПоместитьДоступныеПоляВХ(ИдентификаторИсточника));
	КонецЕсли;
	
	Возврат ПараметрыОткрытия;

КонецФункции

&НаСервере
Функция ОписаниеВТ_ПоместитьИсточникиВХ()
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Псевдоним");
	
	Коллекция = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы();
	
	Для Каждого Строка Из Коллекция Цикл
		Если Строка.ТипСтроки = "ВыбираемыеПоля" Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ);
	
КонецФункции

&НаСервере
Функция ОписаниеВТ_ПоместитьДоступныеПоляВХ(Знач ИдентификаторИсточника)
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Имя");
	ТЗ.Колонки.Добавить("ТипЗначения");
	
	Коллекция = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ИдентификаторИсточника).ПолучитьЭлементы();
	
	Для Каждого Строка Из Коллекция Цикл
		НовСтр = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ);
	
КонецФункции

&НаСервере
Процедура ОписаниеВТ_ЗагрузитьДоступныеПоляВХ(Знач АдресВХ, Знач ИдентификаторИсточника)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресВХ);
	
	СтрокаИсточник = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(ИдентификаторИсточника);
	СтрокаИсточник.ПолучитьЭлементы().Очистить();
	
	Для Каждого Строка Из ТЗ Цикл
		НовСтр = СтрокаИсточник.ПолучитьЭлементы().Добавить();
		НовСтр.Имя 			= Строка.Имя;
		НовСтр.ТипЗначения 	= Строка.ТипЗначения;
		НовСтр.Картинка 	= БиблиотекаКартинок.Реквизит;
		НовСтр.Значение 	= Строка.Имя;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Оператор

&НаКлиенте
Процедура Оператор_ЗафиксироватьИзменение(Источник)
	
	ЭтотОбъект.ОператорИзменения.ЕстьИзменения = Истина;
	
КонецПроцедуры

&НаСервере
Функция Оператор_ВыполнитьОператор(Знач ТаблицаФормы = "")
	
	Попытка
		Результат = Оператор_ВыполнитьОператорВнутр(ТаблицаФормы);
	Исключение                    
		Результат = Новый Структура("Результат,ТекстЗапроса", Ложь, "");
		Результат.ТекстЗапроса = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат.Результат Тогда          
		ЭтотОбъект.ОператорТекстИсключения = "";
		Элементы.ДекорацияТекстИсключения.Заголовок = "";
	Иначе                                         
		ЭтотОбъект.ОператорТекстИсключения = Результат.ТекстЗапроса;
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока("Возникло исключение при обработке запроса", , ЦветаСтиля.ЦветОсобогоТекста));
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Результат.ТекстЗапроса);
		Элементы.ДекорацияТекстИсключения.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	Элементы.ДекорацияТекстИсключения.Видимость = Не Результат.Результат;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Оператор_ВыполнитьОператорВнутр(Знач ТаблицаФормы)
	
	ЭтоАктуализация = Не ПустаяСтрока(ТаблицаФормы);
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	СхемаЗапроса 	= КурсорСЗ.СхемаЗапроса;
	Запрос 			= КурсорСЗ.Запрос;
	Оператор 		= КурсорСЗ.Оператор;
	ИндексОператора = ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора;
	КоличествоОператоров = ЭтотОбъект.ПараметрСтруктураСтроки.КоличествоОператоров;
	ЭтоЗапросПакета = ЭтотОбъект.ПараметрСтруктураСтроки.ЭтоЗапросПакета;
	ЕстьВТ 			= Не (Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, Истина, "ЭтоВТ") = Неопределено);
	
	// Свойства оператора
	Оператор.ВыбиратьРазличные = ЭтотОбъект.СвойстваОператораВыбиратьРазличные;
	Если ЭтотОбъект.СвойстваОператораВыбиратьПервые Тогда
		Оператор.КоличествоПолучаемыхЗаписей = ЭтотОбъект.СвойстваОператораКоличествоПолучаемыхЗаписей;
	Иначе
		Оператор.КоличествоПолучаемыхЗаписей = Неопределено;
	КонецЕсли; 
	Оператор.ВыбиратьДляИзменения = ЭтотОбъект.СвойстваОператораВыбиратьДляИзменения;
	Если ЭтотОбъект.СвойстваОператораСворачивать Тогда
		Оператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить;
	КонецЕсли;
	
	Если Не ЭтоАктуализация Тогда
		
		// Соединения
		КонструкторСЗ_ЗаполнитьСоединения(Оператор);
		
		// Группировки
		Оператор.Группировки.Очистить(); // bookmark
		КонструкторСЗ_ЗаполнитьГруппировки(Оператор);
		
		// Отбор
		Оператор.Отбор.Очистить();
		КонструкторСЗ_ЗаполнитьОтбор(Оператор);
		
		// Параметры
		Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл 
			КонструкторСЗ_ЗаполнитьПараметрыИсточника(ИсточникСхемыЗапроса.Источник);
		КонецЦикла;
		
		// Таблицы для изменения
		Оператор.ТаблицыДляИзменения.Очистить();
		КонструкторСЗ_ЗаполнитьТаблицыДляИзменения(Оператор);
		
	КонецЕсли;
	
	// ВыбираемыеПоля
	Если КоличествоОператоров > 1 Тогда
		Для Каждого Строка Из ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы() Цикл
			Строка["Выражение" + ИндексОператора] = Строка.Выражение;
			Для Каждого СтрокаВТ Из Строка.ПолучитьЭлементы() Цикл
				СтрокаВТ["Выражение" + ИндексОператора] = СтрокаВТ.Выражение;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	Если КоличествоОператоров > 1 И (ИндексОператора = 0 Или ЕстьВТ) Тогда
		ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Оператор.ВыбираемыеПоля.Добавить("NULL");
			ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
		КонецЕсли;         
		Если Не (ЭтоАктуализация И ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Количество() = 0) Тогда
			ТекстЗапроса = КонструкторСЗ_ЗаменитьТекстВыборкиЗапроса(ТекстЗапроса, КоличествоОператоров); 
		КонецЕсли;
		Запрос.УстановитьТекстЗапроса(ТекстЗапроса);
		Оператор = Запрос.Операторы[ИндексОператора];
	ИначеЕсли ЕстьВТ Тогда
		ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Оператор.ВыбираемыеПоля.Добавить("NULL");
			ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
		КонецЕсли;
		Если Не (ЭтоАктуализация И ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Количество() = 0) Тогда
			ТекстЗапроса = КонструкторСЗ_ЗаменитьТекстВыборкиОператора(ТекстЗапроса, ИндексОператора);
		КонецЕсли;
		Запрос.УстановитьТекстЗапроса(ТекстЗапроса);
		Оператор = Запрос.Операторы[ИндексОператора];
	Иначе
		Оператор.ВыбираемыеПоля.Очистить();
		КонструкторСЗ_ЗаполнитьВыбираемыеПоля(Запрос, Оператор, ИндексОператора);
	КонецЕсли;
	
	Если ЭтоЗапросПакета Тогда
		
		// Свойства запроса
		Запрос.ВыбиратьРазрешенные 	= ЭтотОбъект.СвойстваЗапросаВыбиратьРазрешенные;
		Запрос.Автопорядок 			= ЭтотОбъект.СвойстваЗапросаАвтопорядок;
		Запрос.ОбщиеИтоги 			= ЭтотОбъект.СвойстваЗапросаОбщиеИтоги;
		Запрос.ТаблицаДляПомещения	= ЭтотОбъект.СвойстваЗапросаТаблицаДляПомещения;
		
	КонецЕсли;
	
	Если Не ЭтоАктуализация Или ТаблицаФормы = "Порядок" Тогда 
		// Порядок
		Запрос.Порядок.Очистить();
		КонструкторСЗ_ЗаполнитьПорядок(Запрос);
	КонецЕсли;
	
	Если ЭтоЗапросПакета Тогда
		
		Если Не ЭтоАктуализация Тогда
			// ВыраженияИтогов
			Запрос.ВыраженияИтогов.Очистить();
			КонструкторСЗ_ЗаполнитьВыраженияИтогов(Запрос);
		КонецЕсли;
		
		Если Не ЭтоАктуализация Или ТаблицаФормы = "КонтрольныеТочкиИтогов" Тогда
			// КонтрольныеТочкиИтогов
			Запрос.КонтрольныеТочкиИтогов.Очистить();
			КонструкторСЗ_ЗаполнитьКонтрольныеТочкиИтогов(Запрос);
		КонецЕсли;
		
		Если Не ЭтоАктуализация Тогда
			// Индекс
			Запрос.Индекс.Очистить();
			КонструкторСЗ_ЗаполнитьИндекс(Запрос);
		КонецЕсли;
		
	КонецЕсли;
	
	//Текст запроса может быть изменен+
	Если Не ЭтоАктуализация Тогда
		ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
		Запрос.УстановитьТекстЗапроса(ТекстЗапроса);
	КонецЕсли;
	//Текст запроса может быть изменен-
	
	Результат = Новый Структура("Результат,ТекстЗапроса", Истина, Запрос.ПолучитьТекстЗапроса());
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Процедура Оператор_ЗаполнитьИзСхемыЗапроса()
	
	СтруктураСтроки = ЭтотОбъект.ПараметрСтруктураСтроки;
	
	КурсорСЗ 	= СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	
	Если СтруктураСтроки.ЭтоЗапросПакета Тогда
		ЭтотОбъект.СвойстваЗапросаВыбиратьРазрешенные 	= Запрос.ВыбиратьРазрешенные;
		ЭтотОбъект.СвойстваЗапросаАвтопорядок 			= Запрос.Автопорядок;        
		ЭтотОбъект.СвойстваЗапросаОбщиеИтоги 			= Запрос.ОбщиеИтоги;
		ЭтотОбъект.СвойстваЗапросаТаблицаДляПомещения	= Запрос.ТаблицаДляПомещения;
	Иначе
		ЭтотОбъект.СвойстваЗапросаВыбиратьРазрешенные = Ложь;
		ЭтотОбъект.СвойстваЗапросаАвтопорядок = Ложь;
		ЭтотОбъект.СвойстваЗапросаОбщиеИтоги = Ложь;
		ЭтотОбъект.СвойстваЗапросаТаблицаДляПомещения = "";
	КонецЕсли;
	
	ЭтотОбъект.СвойстваОператораВыбиратьРазличные 				= Оператор.ВыбиратьРазличные;
	ЭтотОбъект.СвойстваОператораВыбиратьПервые 					= Не (Оператор.КоличествоПолучаемыхЗаписей = Неопределено);
	ЭтотОбъект.СвойстваОператораКоличествоПолучаемыхЗаписей 	= ?(Оператор.КоличествоПолучаемыхЗаписей = Неопределено, 0, Оператор.КоличествоПолучаемыхЗаписей);
	ЭтотОбъект.СвойстваОператораВыбиратьДляИзменения			= Оператор.ВыбиратьДляИзменения;
	ЭтотОбъект.СвойстваОператораСворачивать 					= ?(Оператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.Объединить, Истина, Ложь);
	
	ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияСоединения.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияОтбор.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияПараметры.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияПорядок.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияИндекс.ПолучитьЭлементы().Очистить();
	
	ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоля(Оператор);
	КоллекцияВыбираемыеПоля_ЗаполнитьИзСхемыЗапроса(Запрос, СтруктураСтроки.ИндексОператора);
	Если СтруктураСтроки.КоличествоОператоров > 1 Тогда
		КоллекцияВыбираемыеПоля_ЗаполнитьВыраженияОператоров(Запрос, СтруктураСтроки.КоличествоОператоров, СтруктураСтроки.ИндексОператора);
	КонецЕсли;
	КоллекцияСоединения_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияГруппировки_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияОтбор_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияПараметры_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияТаблицыДляИзменения_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияПорядок_ЗаполнитьИзСхемыЗапроса(Запрос);
	Если СтруктураСтроки.ЭтоЗапросПакета Тогда
		КоллекцияВыраженияИтогов_ЗаполнитьИзСхемыЗапроса(Запрос);
		КоллекцияКонтрольныеТочкиИтогов_ЗаполнитьИзСхемыЗапроса(Запрос);
		КоллекцияИндекс_ЗаполнитьИзСхемыЗапроса(Запрос);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Оператор_ОбновитьИзСхемыЗапроса()
	
	КурсорСЗ 	= СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
		
	ЭтотОбъект.ТекущаяКоллекцияСоединения.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияГруппировки.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияОтбор.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияПорядок.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов.ПолучитьЭлементы().Очистить();
	ЭтотОбъект.ТекущаяКоллекцияИндекс.ПолучитьЭлементы().Очистить();
	
	КоллекцияВыбираемыеПоля_ОбновитьИзСхемыЗапроса(Запрос, ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора);
	КоллекцияСоединения_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияГруппировки_ЗаполнитьИзСхемыЗапроса(Оператор, Истина);
	КоллекцияОтбор_ЗаполнитьИзСхемыЗапроса(Оператор);
	КоллекцияПорядок_ЗаполнитьИзСхемыЗапроса(Запрос);
	Если ЭтотОбъект.ПараметрСтруктураСтроки.ЭтоЗапросПакета Тогда
		КоллекцияВыраженияИтогов_ЗаполнитьИзСхемыЗапроса(Запрос);
		КоллекцияКонтрольныеТочкиИтогов_ЗаполнитьИзСхемыЗапроса(Запрос);
		КоллекцияИндекс_ЗаполнитьИзСхемыЗапроса(Запрос);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыражения

&НаКлиенте
Процедура НастройкаВыражения_ОткрытьФорму(Знач ПараметрыОткрытия)
	
	НужноОбновитьОператор = Ложь;
	Если ПараметрыОткрытия.ТаблицаФормы = "ВыбираемыеПоля"
		Или ПараметрыОткрытия.ТаблицаФормы = "Порядок"
		Или ПараметрыОткрытия.ТаблицаФормы = "КонтрольныеТочкиИтогов" Тогда
		НужноОбновитьОператор = Истина;
	КонецЕсли;
	
	Если НужноОбновитьОператор Тогда
		Результат = Оператор_ВыполнитьОператор(Истина);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТаблицаФормы,Идентификатор", ПараметрыОткрытия.ТаблицаФормы, ПараметрыОткрытия.Идентификатор);
	ОткрытьФорму(ИмяФормыОбработки("Выражение"), ПараметрыОткрытия,
		ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , ,
		Новый ОписаниеОповещения("НастройкаВыражения_ИзменитьВыражениеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
			
КонецПроцедуры

&НаКлиенте
Функция НастройкаВыражения_ПараметрыОткрытия(Знач ТаблицаФормы, Знач Выражение = "", Знач Идентификатор = Неопределено)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ТаблицаФормы",			ТаблицаФормы);
	ПараметрыОткрытия.Вставить("Выражение",				Выражение);
	ПараметрыОткрытия.Вставить("Идентификатор",			Идентификатор);
	ПараметрыОткрытия.Вставить("Источники",				НастройкаВыражения_ПоместитьИсточникиВХ());
	ПараметрыОткрытия.Вставить("СхемаЗапросаВХ", 		ЭтотОбъект.СхемаЗапросаВХ);
	ПараметрыОткрытия.Вставить("ПараметрСтруктураСтроки", ЭтотОбъект.ПараметрСтруктураСтроки);
		
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Функция НастройкаВыражения_ПоместитьИсточникиВХ()
	
	ТЗ = Новый Массив();
	
	Для Каждого Строка Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если Строка.ТипСтроки = "ВыбираемыеПоля" Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = Новый Структура("Картинка,ТипИсточника,ИмяТаблицы,Псевдоним,ТипТаблицы,Значение");
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
		ТЗ.Добавить(НовСтр);	
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

&НаКлиенте
Процедура НастройкаВыражения_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаФормы 	= ДополнительныеПараметры.ТаблицаФормы;
	Идентификатор 	= ДополнительныеПараметры.Идентификатор;
	ТекДанные 		= ?(ДополнительныеПараметры.Идентификатор <> Неопределено, ЭтотОбъект["ТекущаяКоллекция" + ТаблицаФормы].НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор), Неопределено);
	ТекСтрока 		= Элементы["ТекущаяКоллекция" + ТаблицаФормы].ТекущиеДанные;
	Дерево 			= ЭтотОбъект["ТекущаяКоллекция" + ТаблицаФормы];
	
	Оператор_ЗафиксироватьИзменение(ТаблицаФормы);
	
	Если ТаблицаФормы = "ВыбираемыеПоля" Тогда
		ТекущаяКоллекцияВыбираемыеПоля_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры);	
	ИначеЕсли ТаблицаФормы = "Соединения" Тогда		
		ТекДанные.Выражение = Результат.Выражение;
	ИначеЕсли ТаблицаФормы = "Отбор" Тогда
		ТекДанные.Выражение = Результат.Выражение;
	ИначеЕсли ТаблицаФормы = "Параметры" Тогда
		ТекДанные.Выражение = Результат.Выражение;
	ИначеЕсли ТаблицаФормы = "Порядок" Тогда
		ТекущаяКоллекцияПорядок_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры);
	ИначеЕсли ТаблицаФормы = "КонтрольныеТочкиИтогов" Тогда
		ТекущаяКоллекцияКонтрольныеТочкиИтогов_ИзменитьВыражениеЗавершение(Результат, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЭтотОбъект.ОператорТекстИсключения) Тогда
		Результат = Оператор_ВыполнитьОператор(ТаблицаФормы);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////
// Служебные функции

#Область Форма

&НаКлиентеНаСервереБезКонтекста
Функция Форма_НайтиСтроку(Знач Дерево, Знач Значение, Знач ИмяКолонки)
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка[ИмяКолонки] = Значение Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИмяФормыОбработки(Знач Имя)
	
	ТипМетаданных = ?(СтрНачинаетсяС(ЭтотОбъект.ИмяФормы, "ВнешняяОбработка"), "ВнешняяОбработка", "Обработка");
	Возврат ТипМетаданных + ".bm_КонсольЗапросов.Форма." + Имя;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьМассив(Знач Источник, Знач Приемник)
	
	Для Каждого Элемент Из Приемник Цикл
		Источник.Добавить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеКоллекций

&НаСервере
Процедура ОписаниеКоллекций_Заполнить()
	
	ОписаниеКоллекций_ДобавитьОписание("КритерииОтбора", 			"КритерийОтбора", 			БиблиотекаКартинок.КритерийОтбора);
	ОписаниеКоллекций_ДобавитьОписание("ПланыОбмена", 				"ПланОбмена", 				БиблиотекаКартинок.ПланОбмена, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Константы", 				"Константа", 				БиблиотекаКартинок.Константа);
	ОписаниеКоллекций_ДобавитьОписание("Справочники", 				"Справочник", 				БиблиотекаКартинок.Справочник, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Документы", 				"Документ", 				БиблиотекаКартинок.Документ, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Последовательности", 		"Последовательность", 		ЭтотОбъект.ПеречислениеКартинки.Последовательность);
	ОписаниеКоллекций_ДобавитьОписание("ЖурналыДокументов", 		"ЖурналДокументов", 		БиблиотекаКартинок.ЖурналДокументов);
	ОписаниеКоллекций_ДобавитьОписание("Перечисления", 				"Перечисление", 			БиблиотекаКартинок.Перечисление);
	ОписаниеКоллекций_ДобавитьОписание("ПланыВидовХарактеристик", 	"ПланВидовХарактеристик", 	БиблиотекаКартинок.ПланВидовХарактеристик, 	Истина);
	ОписаниеКоллекций_ДобавитьОписание("ПланыСчетов", 				"ПланСчетов", 				БиблиотекаКартинок.ПланСчетов, 				Истина, Истина);
	ОписаниеКоллекций_ДобавитьОписание("ПланыВидовРасчета", 		"ПланВидовРасчета", 		БиблиотекаКартинок.ПланВидовРасчета, 		Истина, Истина);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыСведений", 			"РегистрСведений", 			БиблиотекаКартинок.РегистрСведений);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыНакопления", 		"РегистрНакопления", 		БиблиотекаКартинок.РегистрНакопления);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыБухгалтерии", 		"РегистрБухгалтерии", 		БиблиотекаКартинок.РегистрБухгалтерии);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыРасчета", 			"РегистрРасчета", 			БиблиотекаКартинок.РегистрРасчета);
	ОписаниеКоллекций_ДобавитьОписание("Перерасчеты", 				"Перерасчет", 				БиблиотекаКартинок.Обновить);
	ОписаниеКоллекций_ДобавитьОписание("БизнесПроцессы", 			"БизнесПроцесс", 			БиблиотекаКартинок.БизнесПроцесс, 			Истина);
	ОписаниеКоллекций_ДобавитьОписание("Задачи", 					"Задача", 					БиблиотекаКартинок.Задача, 					Истина);
	ОписаниеКоллекций_ДобавитьОписание("ВнешниеИсточникиДанных", 	"ВнешнийИсточникДанных", 	БиблиотекаКартинок.ВнешнийИсточникДанных, 	Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеКоллекций_ДобавитьОписание(Знач ИмяМнч, Знач ИмяЕдч, Знач Картинка, Знач ЕстьТЧ = Ложь, Знач ЕстьСТЧ = Ложь)
	
	НовСтр = ЭтотОбъект.ОписаниеКоллекций.Добавить();
	НовСтр.ИмяМнч 	= ИмяМнч;
	НовСтр.ИмяЕдч 	= ИмяЕдч;
	НовСтр.Картинка = Картинка;
	НовСтр.ЕстьТЧ 	= ЕстьТЧ;
	НовСтр.ЕстьСТЧ 	= ЕстьСТЧ;
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоТаблиц

&НаСервере
Процедура ДеревоТаблиц_Заполнить()
	
	СхемаЗапроса = Новый СхемаЗапроса();
	
	ДоступныеТаблицы = СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы;
	Для Каждого СтрокаИсточник0 Из ДоступныеТаблицы Цикл
		Если ТипЗнч(СтрокаИсточник0) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура("ИмяМнч", СтрокаИсточник0.Представление);
		МассивСтрок = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			Если Метаданные.ВнешниеИсточникиДанных.Найти(СтрокаИсточник0.Представление) <> Неопределено Тогда
				ДеревоТаблиц_ЗаполнитьВнешнийИсточникДанных(СтрокаИсточник0);
			КонецЕсли;
			Продолжить;		
		КонецЕсли;
		СтрокаОписания  = МассивСтрок[0];
		СтрокаПриемник0 = ЭтотОбъект.ДеревоТаблиц.ПолучитьЭлементы().Добавить();
		СтрокаПриемник0.Значение 	= СтрокаИсточник0.Представление;
		СтрокаПриемник0.Картинка	= СтрокаОписания.Картинка;
		//ДеревоТаблиц_ЗаполнитьКоллекциюВариант0(СтрокаПриемник0, СтрокаИсточник0, СтрокаОписания)
		//ДеревоТаблиц_ЗаполнитьКоллекциюВариант1(СтрокаПриемник0, СтрокаИсточник0, СтрокаОписания);
		СтрокаПриемник1 = СтрокаПриемник0.ПолучитьЭлементы().Добавить();
		СтрокаПриемник1.Значение 	= "@";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьКоллекциюВариант0(Знач СтрокаПриемник0, Знач СтрокаИсточник0, Знач СтрокаОписания)
	
	Для Каждого СтрокаИсточник1 Из СтрокаИсточник0.Состав Цикл
		Поз = СтрНайти(СтрокаИсточник1.Имя, ".", , , 2);
		Если Поз > 0 Тогда
			Продолжить;
		КонецЕсли;
		Значение = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
		СтрокаПриемник1 = СтрокаПриемник0.Строки.Добавить();
		СтрокаПриемник1.ЭтоИсточник	= Истина;
		СтрокаПриемник1.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
		СтрокаПриемник1.Значение 	= Значение;	
		СтрокаПриемник1.Имя			= СтрокаИсточник1.Имя;
		СтрокаПриемник1.Псевдоним	= Значение;
		СтрокаПриемник1.Картинка	= СтрокаОписания.Картинка;			
		СтрокаПриемник2 = СтрокаПриемник1.Строки.Добавить();
		СтрокаПриемник2.Значение 	= "@";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьКоллекциюВариант1(Знач СтрокаПриемник0, Знач СтрокаИсточник0, Знач СтрокаОписания)
	
	Для Каждого СтрокаИсточник1 Из СтрокаИсточник0.Состав Цикл
		
		Поз = СтрНайти(СтрокаИсточник1.Имя, ".", , , 2);
		Если Поз = 0 Тогда
			Значение = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
			СтрокаПриемник1 = СтрокаПриемник0.Строки.Добавить();
			СтрокаПриемник1.ЭтоИсточник	= Истина;
			СтрокаПриемник1.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
			СтрокаПриемник1.Значение 	= Значение;	
			СтрокаПриемник1.Имя			= СтрокаИсточник1.Имя;
			СтрокаПриемник1.Псевдоним	= Значение;
			СтрокаПриемник1.Картинка	= СтрокаОписания.Картинка;
			
			Значение1 = СтрокаПриемник1.Значение;
			Значение0 = СтрокаПриемник0.Значение;
			
			Если СтрокаОписания.ЕстьТЧ Тогда
				Для Каждого ТабличнаяЧасть Из Метаданные[Значение0][Значение1].ТабличныеЧасти Цикл
					СтрокаПриемник2 = СтрокаПриемник1.Строки.Добавить();
					СтрокаПриемник2.ЭтоИсточник	= Истина;
					СтрокаПриемник2.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть;
					СтрокаПриемник2.Значение 	= ТабличнаяЧасть.Имя;			
					СтрокаПриемник2.Имя 		= СтрокаПриемник1.Имя + "." + ТабличнаяЧасть.Имя;					
					СтрокаПриемник2.Псевдоним 	= СтрокаПриемник1.Псевдоним + ТабличнаяЧасть.Имя;
					СтрокаПриемник2.Картинка	= БиблиотекаКартинок.ВложеннаяТаблица;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Если Не СтрНачинаетсяС(СтрокаИсточник1.Имя, СтрокаПриемник1.Имя + ".") Тогда
				Продолжить;
			КонецЕсли;
			
			Значение2 = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
			СтрокаПриемник2 = СтрокаПриемник1.Строки.Добавить();
			СтрокаПриемник2.ЭтоИсточник	= Истина;
			СтрокаПриемник2.Значение 	= Значение2;			
			СтрокаПриемник2.Имя 		= СтрокаИсточник1.Имя;			
			СтрокаПриемник2.Псевдоним 	= Значение1 + Значение2;
			Если СтрЗаканчиваетсяНа(СтрокаИсточник1.Имя, ".Изменения") Тогда
				СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.Изменения;
				СтрокаПриемник2.Картинка 		= БиблиотекаКартинок.КонструкторЗапросаОтображатьТаблицыИзменений;
			Иначе
				СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.ВиртТаблица;
				СтрокаПриемник2.Картинка		= СтрокаОписания.Картинка;
			КонецЕсли;
				
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьКоллекциюВариант2(Знач Идентификатор)
	
	СтрокаПриемник0 = ЭтотОбъект.ДеревоТаблиц.НайтиПоИдентификатору(Идентификатор);
	Значение0		= СтрокаПриемник0.Значение;
	
	СтруктураОтбора = Новый Структура("ИмяМнч", Значение0);
	СтрокаОписания = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(СтруктураОтбора)[0];
	
	СхемаЗапроса = Новый СхемаЗапроса();
	Для Каждого СтрокаИсточник0 Из СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы Цикл
		Если ТипЗнч(СтрокаИсточник0) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаИсточник0.Представление = Значение0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Возможно, зависит от версии платформы
	// Если первая таблица не константы, надо добавить в эту ветку 
	Если Значение0 = "Константы" Тогда
		Если Не (СтрокаИсточник0.Состав[0].Имя = "Константы") Тогда
			ИскомаяТаблица = СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы.Найти("Константы");
			Если ТипЗнч(ИскомаяТаблица) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
				СтрокаПриемник1 = СтрокаПриемник0.ПолучитьЭлементы().Добавить();
				СтрокаПриемник1.ЭтоИсточник	= Истина;
				СтрокаПриемник1.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
				СтрокаПриемник1.Значение 	= "Константы";	
				СтрокаПриемник1.Имя			= "Константы";
				СтрокаПриемник1.Псевдоним	= "Константы";
				СтрокаПриемник1.Картинка	= БиблиотекаКартинок.Константа;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаИсточник1 Из СтрокаИсточник0.Состав Цикл
		
		Поз = СтрНайти(СтрокаИсточник1.Имя, ".", , , 2);
		Если Поз = 0 Тогда
			Значение = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
			СтрокаПриемник1 = СтрокаПриемник0.ПолучитьЭлементы().Добавить();
			СтрокаПриемник1.ЭтоИсточник	= Истина;
			СтрокаПриемник1.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
			СтрокаПриемник1.Значение 	= Значение;	
			СтрокаПриемник1.Имя			= СтрокаИсточник1.Имя;
			СтрокаПриемник1.Псевдоним	= Значение;
			СтрокаПриемник1.Картинка	= СтрокаОписания.Картинка;
			
			Значение1 = СтрокаПриемник1.Значение;
			Значение0 = СтрокаПриемник0.Значение;
			
			Если СтрокаОписания.ЕстьТЧ Тогда
				Для Каждого ТабличнаяЧасть Из Метаданные[Значение0][Значение1].ТабличныеЧасти Цикл
					СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
					СтрокаПриемник2.ЭтоИсточник	= Истина;
					СтрокаПриемник2.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть;
					СтрокаПриемник2.Значение 	= ТабличнаяЧасть.Имя;			
					СтрокаПриемник2.Имя 		= СтрокаПриемник1.Имя + "." + ТабличнаяЧасть.Имя;					
					СтрокаПриемник2.Псевдоним 	= СтрокаПриемник1.Псевдоним + ТабличнаяЧасть.Имя;
					СтрокаПриемник2.Картинка	= БиблиотекаКартинок.ВложеннаяТаблица;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаОписания.ЕстьСТЧ Тогда
				Для Каждого ТабличнаяЧасть Из Метаданные[Значение0][Значение1].СтандартныеТабличныеЧасти Цикл
					СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
					СтрокаПриемник2.ЭтоИсточник	= Истина;
					СтрокаПриемник2.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть;
					СтрокаПриемник2.Значение 	= ТабличнаяЧасть.Имя;			
					СтрокаПриемник2.Имя 		= СтрокаПриемник1.Имя + "." + ТабличнаяЧасть.Имя;					
					СтрокаПриемник2.Псевдоним 	= СтрокаПриемник1.Псевдоним + ТабличнаяЧасть.Имя;
					СтрокаПриемник2.Картинка	= БиблиотекаКартинок.ВложеннаяТаблица;
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаИсточник0.Представление = "РегистрыРасчета" Тогда
				ДеревоТаблиц_ЗаполнитьПерерасчет(СтрокаПриемник1);
			КонецЕсли;
			
		Иначе
			
			Если СтрокаИсточник0.Представление = "Перерасчеты" Тогда
				Если СтрНачинаетсяС(СтрокаИсточник1.Имя, "РегистрРасчета.") Тогда
					СтрокаПриемник1 = СтрокаПриемник0.ПолучитьЭлементы().Добавить();
					СтрокаПриемник1.ЭтоИсточник	= Истина;
					СтрокаПриемник1.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
					СтрокаПриемник1.Значение 	= ТекстПослеТочкиСНачала(СтрокаИсточник1.Имя);	
					СтрокаПриемник1.Имя			= СтрокаИсточник1.Имя;
					СтрокаПриемник1.Псевдоним	= СтрЗаменить(СтрокаПриемник1.Значение, ".", "");
					СтрокаПриемник1.Картинка	= БиблиотекаКартинок.РегистрРасчета;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Не СтрНачинаетсяС(СтрокаИсточник1.Имя, СтрокаПриемник1.Имя + ".") Тогда
				Продолжить;
			КонецЕсли;
			
			Значение2 = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
			СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
			СтрокаПриемник2.ЭтоИсточник	= Истина;
			СтрокаПриемник2.Значение 	= Значение2;			
			СтрокаПриемник2.Имя 		= СтрокаИсточник1.Имя;			
			СтрокаПриемник2.Псевдоним 	= Значение1 + Значение2;
			Если СтрЗаканчиваетсяНа(СтрокаИсточник1.Имя, ".Изменения") Тогда
				СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.Изменения;
				СтрокаПриемник2.Картинка 		= БиблиотекаКартинок.КонструкторЗапросаОтображатьТаблицыИзменений;
			Иначе
				СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.ВиртТаблица;
				СтрокаПриемник2.Картинка		= СтрокаОписания.Картинка;
			КонецЕсли;
				
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьПерерасчет(Знач СтрокаПриемник1)
	
	Коллекция = Метаданные.РегистрыРасчета[СтрокаПриемник1.Значение].Перерасчеты;
	Если Коллекция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
	СтрокаПриемник2.Значение = "Перерасчеты";
	СтрокаПриемник2.Картинка = БиблиотекаКартинок.Обновить;
	
	Для Каждого ОМ Из Метаданные.РегистрыРасчета[СтрокаПриемник1.Значение].Перерасчеты Цикл
		СтрокаПриемник3 = СтрокаПриемник2.ПолучитьЭлементы().Добавить();
		СтрокаПриемник3.ЭтоИсточник	= Истина;
		СтрокаПриемник3.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
		СтрокаПриемник3.Значение 	= ОМ.Имя;	
		СтрокаПриемник3.Имя			= СтрокаПриемник1.Имя + "." + ОМ.Имя;
		СтрокаПриемник3.Псевдоним	= СтрокаПриемник1.Псевдоним + ОМ.Имя;
		СтрокаПриемник3.Картинка	= БиблиотекаКартинок.РегистрРасчета;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьСостав(Знач Идентификатор)
	
	СтрокаПриемник1 = ЭтотОбъект.ДеревоТаблиц.НайтиПоИдентификатору(Идентификатор);
	Значение1 = СтрокаПриемник1.Значение;
	Значение0 = СтрокаПриемник1.ПолучитьРодителя().Значение;
	
	СтруктураОтбора = Новый Структура("ИмяМнч", Значение0);
	СтрокаОписания = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(СтруктураОтбора)[0];
	
	Если СтрокаОписания.ЕстьТЧ Тогда
		Для Каждого ТабличнаяЧасть Из Метаданные[Значение0][Значение1].ТабличныеЧасти Цикл
			СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
			СтрокаПриемник2.ЭтоИсточник	= Истина;
			СтрокаПриемник2.ТипТаблицы	= ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть;
			СтрокаПриемник2.Значение 	= ТабличнаяЧасть.Имя;			
			СтрокаПриемник2.Имя 		= СтрокаПриемник1.Имя + "." + ТабличнаяЧасть.Имя;					
			СтрокаПриемник2.Псевдоним 	= СтрокаПриемник1.Псевдоним + ТабличнаяЧасть.Имя;
			СтрокаПриемник2.Картинка	= БиблиотекаКартинок.ВложеннаяТаблица;
		КонецЦикла;
	КонецЕсли;	
	
	СхемаЗапроса = Новый СхемаЗапроса();                                                  
	// ?
	// Состав = СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы.Найти(Представление).Состав
	Для Каждого ГруппаДоступныхТаблицСхемыЗапроса Из СхемаЗапроса.ПакетЗапросов[0].ДоступныеТаблицы Цикл
		Если ГруппаДоступныхТаблицСхемыЗапроса.Представление = Значение0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	Состав = ГруппаДоступныхТаблицСхемыЗапроса.Состав;
	
	// ?
	// Состав.Индекс(Состав.Найти(ТекДанные.Имя))
	Итер = 0;
	Для Каждого ДоступнаяТаблицаСхемыЗапроса Из Состав Цикл
		Если ДоступнаяТаблицаСхемыЗапроса.Имя = СтрокаПриемник1.Имя Тогда
			Прервать;
		КонецЕсли;
		Итер = Итер + 1;
	КонецЦикла;
	Итер = Итер + 1;
		
	Пока Итер < Состав.Количество() Цикл
		СтрокаИсточник1 = Состав[Итер];
		Если Не СтрНачинаетсяС(СтрокаИсточник1.Имя, СтрокаПриемник1.Имя + ".") Тогда
			Прервать;
		КонецЕсли;
		Значение2 = ТекстПослеТочкиСКонца(СтрокаИсточник1.Имя);
		СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
		СтрокаПриемник2.ЭтоИсточник	= Истина;
		СтрокаПриемник2.Значение 	= Значение2;			
		СтрокаПриемник2.Имя 		= СтрокаИсточник1.Имя;			
		СтрокаПриемник2.Псевдоним 	= Значение1 + Значение2;
		Если СтрЗаканчиваетсяНа(СтрокаИсточник1.Имя, ".Изменения") Тогда
			СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.Изменения;
			СтрокаПриемник2.Картинка 		= БиблиотекаКартинок.КонструкторЗапросаОтображатьТаблицыИзменений;
		Иначе
			СтрокаПриемник2.ТипТаблицы		= ЭтотОбъект.ПеречислениеТипТаблицы.ВиртТаблица;
			СтрокаПриемник2.Картинка		= СтрокаОписания.Картинка;
		КонецЕсли;
		Итер = Итер +1 ;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ДеревоТаблиц_ЗаполнитьВнешнийИсточникДанных(Знач СтрокаИсточник1) 
	
	СтрокаОписания = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(Новый Структура("ИмяМнч", "ВнешниеИсточникиДанных"))[0];
	
	СтрокаПриемник0 = Форма_НайтиСтроку(ЭтотОбъект.ДеревоТаблиц, "ВнешниеИсточникиДанных", "Значение");
	Если СтрокаПриемник0 = Неопределено Тогда
		СтрокаПриемник0 = ЭтотОбъект.ДеревоТаблиц.ПолучитьЭлементы().Добавить();
		СтрокаПриемник0.Значение 	= СтрокаОписания.ИмяМнч;
		СтрокаПриемник0.Картинка	= СтрокаОписания.Картинка;
	КонецЕсли;
	
	СтрокаПриемник1 = СтрокаПриемник0.ПолучитьЭлементы().Добавить();
	СтрокаПриемник1.Значение = СтрокаИсточник1.Представление;
	СтрокаПриемник1.Картинка = СтрокаОписания.Картинка;
		
	Для Каждого СтрокаИсточник2 Из СтрокаИсточник1.Состав Цикл
		Если ТипЗнч(СтрокаИсточник2) = Тип("ДоступнаяТаблицаСхемыЗапроса") Тогда
			Значение2 = ТекстПослеТочкиСКонца(СтрокаИсточник2.Имя);
			СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
			СтрокаПриемник2.ЭтоИсточник	= Истина;
			СтрокаПриемник2.Значение 	= Значение2;			
			СтрокаПриемник2.Имя 		= СтрокаИсточник2.Имя;			
			СтрокаПриемник2.Псевдоним 	= СтрокаПриемник1.Значение + Значение2;
			Если СтрНайти(СтрокаИсточник2.Имя, ".Куб.") > 0 Тогда
				СтрокаПриемник2.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
			ИначеЕсли СтрНайти(СтрокаИсточник2.Имя, ".Таблица.") > 0 Тогда
				СтрокаПриемник2.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтрокаИсточник2) = Тип("ГруппаДоступныхТаблицСхемыЗапроса") Тогда
			Представление2  = ТекстПередТочкойСНачала(СтрокаИсточник2.Представление) + "ТаблицаИзмерения";
			СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
			СтрокаПриемник2.Значение 	= СтрокаИсточник2.Представление;
			СтрокаПриемник2.Картинка 	= БиблиотекаКартинок.ВнешнийИсточникДанныхКубТаблицаИзмерения;
			Для Каждого СтрокаИсточникЗ Из СтрокаИсточник2.Состав Цикл
				Значение3 = ТекстПослеТочкиСКонца(СтрокаИсточникЗ.Имя);
				СтрокаПриемник3 = СтрокаПриемник2.ПолучитьЭлементы().Добавить();
				СтрокаПриемник3.ЭтоИсточник	= Истина;
				СтрокаПриемник3.Значение 	= Значение3;			
				СтрокаПриемник3.Имя 		= СтрокаИсточникЗ.Имя;			
				СтрокаПриемник3.Псевдоним 	= СтрокаПриемник1.Значение + Представление2 + Значение3;
				СтрокаПриемник3.Картинка 	= БиблиотекаКартинок.ВнешнийИсточникДанныхКубТаблицаИзмерения;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДеревоТаблиц_ЗаполнитьВременныеТаблицы(Знач Форма, Знач МассивЗначений)
	
	Значение 	= "Временные таблицы";	
	Коллекция 	= Форма.ДеревоТаблиц.ПолучитьЭлементы();
	Строка 		= Коллекция[Коллекция.Количество() - 1];
	
	Если Строка.Значение = Значение Тогда
		Коллекция.Удалить(Строка);
	КонецЕсли;
	
	НовСтр0 = Коллекция.Добавить();
	НовСтр0.Значение = Значение;
	НовСтр0.Картинка = БиблиотекаКартинок.КонструкторЗапросаГруппаВременныхТаблиц;
	Коллекция = НовСтр0.ПолучитьЭлементы();
	Для Каждого Значение Из МассивЗначений Цикл
		НовСтр1 = Коллекция.Добавить();
		НовСтр1.Значение 	= Значение;
		НовСтр1.Имя 		= Значение;
		НовСтр1.Псевдоним 	= Значение;
		НовСтр1.ЭтоИсточник = Истина;
		НовСтр1.ТипТаблицы	= Форма.ПеречислениеТипТаблицы.ВремТаблица;
		НовСтр1.Картинка 	= БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДоступныеПоля

&НаКлиенте
Процедура ИсточникиДоступныеПоля_РазвернутьДоступныеПоля()
	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция = ТекДанные.ПолучитьЭлементы();
	
	Если Коллекция.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	МассивЗначений = Новый Массив();
	
	ИскомаяСтрока = ТекДанные;
	Пока ИскомаяСтрока <> Неопределено Цикл
		МассивЗначений.Добавить(ИскомаяСтрока.Значение);
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Если МассивЗначений.Количество() > 1 Тогда
		МассивДоступныхПолей = ИсточникиДоступныеПоля_МассивДоступныхПолей(МассивЗначений);
		Для Каждого Структура Из МассивДоступныхПолей Цикл
			НовСтр = Коллекция.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Структура);
			Если Не НовСтр.ЭтоВТ Тогда
				НовСтр.Картинка = БиблиотекаКартинок.Реквизит; 
			Иначе     
				НовСтр.Картинка = БиблиотекаКартинок.ВложеннаяТаблица;
			КонецЕсли;
		КонецЦикла;
		Элементы.ИсточникиДоступныеПоля.Развернуть(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоля(Знач Оператор)
	
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
		Источник = ИсточникСхемыЗапроса.Источник;
		
		НовСтр = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Добавить();
		НовСтр.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.Источник;	
		НовСтр.Псевдоним 		= Источник.Псевдоним;
		НовСтр.Значение 		= Источник.Псевдоним;
		
		Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") Тогда
			НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ТаблицаСхемыЗапроса;
			НовСтр.ИмяТаблицы 	= Источник.ИмяТаблицы;                      
			ТаблицаФормы_УстановитьТипКартинкуТаблицы(НовСтр);				
		ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
			НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ВложенныйЗапросСхемыЗапроса;		
			НовСтр.ИмяТаблицы 	= "ВложенныйЗапрос";
			НовСтр.Картинка 	= БиблиотекаКартинок.КонструкторЗапросаВложенныйЗапрос;
		ИначеЕсли ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
			НовСтр.ТипИсточника = ЭтотОбъект.ПеречислениеТипИсточника.ОписаниеВременнойТаблицыСхемыЗапроса;
			НовСтр.ИмяТаблицы 	= Источник.ИмяТаблицы;
			НовСтр.Картинка 	= БиблиотекаКартинок.КонструкторЗапросаОписаниеВременнойТаблицы;
		КонецЕсли;		
		
		ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(НовСтр, Источник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(Знач Строка, Знач Источник)
	
	Для Каждого ДоступноеПоле Из Источник.ДоступныеПоля Цикл
		НовСтр = Строка.ПолучитьЭлементы().Добавить();
		НовСтр.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
		НовСтр.Имя 			= ДоступноеПоле.Имя;
		НовСтр.Значение 	= ДоступноеПоле.Имя;
		Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
			НовСтр.ЭтоВТ = Истина;
			Для Каждого ДоступноеПолеВТ Из ДоступноеПоле.Поля Цикл
				НовСтрВТ = НовСтр.ПолучитьЭлементы().Добавить();
				НовСтрВТ.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
				НовСтрВТ.Имя 			= ДоступноеПолеВТ.Имя;
				НовСтрВТ.Значение 		= ДоступноеПолеВТ.Имя;
				НовСтрВТ.ТипЗначения 	= ДоступноеПолеВТ.ТипЗначения;
				ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтрВТ, ДоступноеПолеВТ);
			КонецЦикла;
		Иначе
			НовСтр.ТипЗначения = ДоступноеПоле.ТипЗначения;
		КонецЕсли;
		ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтр, ДоступноеПоле);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляУсловия(Знач ТекДанные, Знач ДоступныеПоля)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();	
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.НайтиПоПсевдониму(ТекДанные.Псевдоним);
	
	Для Каждого ДоступноеПоле Из ИсточникСхемыЗапроса.Источник.ДоступныеПоля Цикл
		Если ДоступныеПоля.НайтиПоЗначению(ДоступноеПоле.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = ТекДанные.ПолучитьЭлементы().Добавить();
		НовСтр.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
		НовСтр.Имя			= ДоступноеПоле.Имя;
		НовСтр.Значение 	= ДоступноеПоле.Имя;
		// Не обязательно?
		Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
			НовСтр.ЭтоВТ = Истина;
		Иначе
			НовСтр.ТипЗначения = ДоступноеПоле.ТипЗначения;
		КонецЕсли;
		ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтр, ДоступноеПоле);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИсточникиДоступныеПоля_МассивДоступныхПолей(Знач МассивЗначений)
	
	Результат = Новый Массив();
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	
	Псевдоним = МассивЗначений[МассивЗначений.Количество() - 1];
	ИсточникСхемыЗапроса = Оператор.Источники.НайтиПоПсевдониму(Псевдоним);
	ДоступныеПоля = ИсточникСхемыЗапроса.Источник.ДоступныеПоля;
	
	Если ДоступныеПоля.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Итер = МассивЗначений.Количество() - 2;
	
	Пока Итер >= 0 Цикл
		ДоступноеПоле = ДоступныеПоля.Найти(МассивЗначений[Итер]);
		ДоступныеПоля = ДоступноеПоле.Поля;
		Если Итер = 0 Тогда
			Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
				Структура = Новый Структура("ТипСтроки, Значение, ЭтоВТ, ТипЗначения", ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле, ДоступноеПоле.Имя);
				// Не обязательно?
				Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
					Структура.ЭтоВТ = Истина;
				Иначе
					Структура.ТипЗначения = ДоступноеПоле.ТипЗначения;
				КонецЕсли;
				Результат.Добавить(Структура);			
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
		Итер = Итер - 1;		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИсточникиДоступныеПоля_ВыражениеДоступногоПоля(Знач ТекДанные)
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Возврат ТекДанные.Значение;
	КонецЕсли;	
	
	МассивЗначений = Новый Массив();	
	СодержитВТ     = Ложь;
	
	ИскомаяСтрока = ТекДанные;
	Пока ИскомаяСтрока <> Неопределено Цикл
		МассивЗначений.Добавить(ИскомаяСтрока.Значение);
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Значение = "";
	Итер = МассивЗначений.Количество() - 1;
	ПерваяСтрока = Истина;
	Пока Итер >= 0 Цикл
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			Значение = Значение + ".";
		КонецЕсли;
		Значение = Значение + МассивЗначений[Итер];
		Итер = Итер - 1;
	КонецЦикла;
	
	Если Найти(ЭтотОбъект.ИмяФормы, "Выражение") > 0 И ЭтотОбъект.ТаблицаФормы = "Параметры" Тогда
		Значение = ТекстПослеТочкиСНачала(Значение);
		Значение = Значение + " = &" + ТекстПослеТочкиСКонца(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ИсточникиДоступныеПоля_СведенияОЗначенииИсточника(Знач Значение)
	
	Результат = Новый Структура("Источник,ВТ,ТипПоля", "", "", "");
	
	МассивСтрок = СтрРазделить(Значение, ".");
	
	Для Каждого СтрокаИсточник Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если СтрокаИсточник.Значение = МассивСтрок[0] Тогда
			Результат.Источник = МассивСтрок[0];
			Если МассивСтрок.Количество() = 1 Тогда
				Результат.ТипПоля = "Источник";
				Возврат Результат;
			КонецЕсли;
			Для Каждого Строка Из СтрокаИсточник.ПолучитьЭлементы() Цикл
				Если Строка.Значение = МассивСтрок[1] Тогда
					Если Не Строка.ЭтоВТ Тогда
						Результат.ТипПоля = "ПолеИсточника";
					Иначе
						Результат.ВТ = МассивСтрок[1];
						Если МассивСтрок.Количество() = 2 Тогда
							Результат.ТипПоля = "ВТ";	         							
						Иначе
							Результат.ТипПоля = "ПолеВТ"; 
						КонецЕсли;
					КонецЕсли;
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИсточникиДоступныеПоля_ОтобразитьВыбираемыеПоля(Знач Отображать)
	
	Коллекция = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы();
	
	Если Отображать Тогда
		Если Элементы.ГруппаСвойства.ТекущаяСтраница = Элементы.ГруппаГруппировки Тогда
			ИмяКолонки = "Выражение";
		Иначе
			ИмяКолонки = "Псевдоним";
		КонецЕсли;
		Если Коллекция.Количество() > 0 И Коллекция[0].ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемыеПоля Тогда
			Для Каждого Строка Из Коллекция[0].ПолучитьЭлементы() Цикл
				Строка.Значение = Строка[ИмяКолонки];
			КонецЦикла;
			Возврат;
		КонецЕсли;
		СтрокаИсточник = Коллекция.Вставить(0);         
		СтрокаИсточник.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемыеПоля;
		СтрокаИсточник.Значение 	= "Выбираемые поля";
		СтрокаИсточник.Картинка 	= БиблиотекаКартинок.РежимПросмотраСпискаСписок;
		Для Каждого Строка Из ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы() Цикл
			Если Строка.ЭтоВТ Тогда
				Продолжить;
			КонецЕсли;
			НовСтр = СтрокаИсточник.ПолучитьЭлементы().Добавить();
			НовСтр.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле;
			НовСтр.Выражение 	= Строка.Выражение;
			НовСтр.Псевдоним 	= Строка.Псевдоним;
			НовСтр.Значение 	= Строка[ИмяКолонки];
			НовСтр.Картинка 	= Строка.Картинка;
			НовСтр.ТипЗначения 	= Строка.ТипЗначения;
			НовСтр.САФ 			= Строка.САФ;
		КонецЦикла;
		Элементы.ИсточникиДоступныеПоля.Развернуть(СтрокаИсточник.ПолучитьИдентификатор());
		Элементы.ИсточникиДоступныеПоля.ТекущаяСтрока = СтрокаИсточник.ПолучитьИдентификатор();
	Иначе
		Если Коллекция.Количество() > 0 И Коллекция[0].ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемыеПоля Тогда
			Коллекция.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИсточникиДоступныеПоля_СписокВТ()
	
	Резт = Новый Массив();
	Для Каждого СтрокаИсточник Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаПоле Из СтрокаИсточник.ПолучитьЭлементы() Цикл
			Если СтрокаПоле.ЭтоВТ Тогда
				Резт.Добавить(СтрокаИсточник.Значение + "." + СтрокаПоле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Резт;
	
КонецФункции

#КонецОбласти

#Область СхемаЗапроса

&НаСервере
Функция СхемаЗапроса_ПолучитьКурсорСЗ()
	
	Возврат СхемаЗапроса_КурсорСЗ(ЭтотОбъект.СхемаЗапросаВХ, ЭтотОбъект.ПараметрСтруктураСтроки);
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_КурсорСЗ(Знач АдресВХ, Знач СтруктураСтроки)
	
	Результат = Новый Структура();
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	ЗапросПакета 	= СхемаЗапроса.ПакетЗапросов[СтруктураСтроки.ИндексЗапроса]; 
	КурсорОператора = СхемаЗапроса_КурсорОператора(ЗапросПакета, СтруктураСтроки.ПозицияОператора);
	Результат.Вставить("СхемаЗапроса", 	СхемаЗапроса);
	Результат.Вставить("ЗапросПакета", 	ЗапросПакета);
	Результат.Вставить("Запрос", 		КурсорОператора.Запрос);
	Результат.Вставить("Оператор", 		КурсорОператора.Оператор);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_КурсорОператора(Знач Запрос, Знач ПозицияОператора, ТекПозицияОператора = 0)
	
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Если ТекПозицияОператора = ПозицияОператора Тогда
			Возврат Новый Структура("Запрос, Оператор", Запрос, Оператор);
		КонецЕсли;
		ТекПозицияОператора = ТекПозицияОператора + 1;
		Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
			Если ТипЗнч(ИсточникСхемыЗапроса.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				Оператор = СхемаЗапроса_КурсорОператора(ИсточникСхемыЗапроса.Источник.Запрос, ПозицияОператора, ТекПозицияОператора);
				Если Оператор <> Неопределено Тогда
					Возврат Оператор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ДобавитьЗапросВыбора(Знач АдресВХ)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	СхемаЗапроса.ПакетЗапросов.Добавить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ДобавитьВложенныйЗапрос(Знач АдресВХ, Знач СтруктураСтроки, Псевдоним)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.Добавить(Тип("ВложенныйЗапросСхемыЗапроса"));
	Псевдоним = ИсточникСхемыЗапроса.Источник.Псевдоним;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ДобавитьЗапросУничтожения(Знач АдресВХ, Знач ИмяТаблицы)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	Запрос = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	Запрос.ИмяТаблицы = ИмяТаблицы;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_УдалитьЗапрос(Знач АдресВХ, Знач СтруктураСтроки)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.СхемаЗапроса.ПакетЗапросов.Удалить(СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ДобавитьОператор(Знач АдресВХ, Знач СтруктураСтроки)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.Запрос.Операторы.Добавить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_УдалитьОператор(Знач АдресВХ, Знач СтруктураСтроки)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.Запрос.Операторы.Удалить(СтруктураСтроки.ИндексОператора);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_СкопироватьЗапрос(Знач АдресВХ, Знач СтруктураСтроки)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.СхемаЗапроса.ПакетЗапросов.ДобавитьКопию(СтруктураСтроки.ИндексЗапроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_СкопироватьОператор(Знач АдресВХ, Знач СтруктураСтроки)
	
	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.Запрос.Операторы.Добавить(КурсорСЗ.Оператор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ПереместитьЗапрос(Знач АдресВХ, Знач СтруктураСтроки, Знач Смещение)

	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	СхемаЗапроса.ПакетЗапросов.Сдвинуть(СтруктураСтроки.ИндексЗапроса, Смещение); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СхемаЗапроса_ПереместитьОператор(Знач АдресВХ, Знач СтруктураСтроки, Знач Смещение)

	КурсорСЗ = СхемаЗапроса_КурсорСЗ(АдресВХ, СтруктураСтроки);
	КурсорСЗ.Запрос.Операторы.Сдвинуть(СтруктураСтроки.ИндексОператора, Смещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СхемаЗапроса_ТекстЗапроса(Знач СхемаЗапроса, Знач ИндексЗапроса)
	
	Элемент = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса];
	
	Если ТипЗнч(Элемент) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
		Текст = СхемаЗапроса.ПакетЗапросов[ИндексЗапроса].ПолучитьТекстЗапроса(); 
	ИначеЕсли ТипЗнч(Элемент) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
		Текст = "УНИЧТОЖИТЬ " + Элемент.ИмяТаблицы;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_ТекстСхемыЗапроса(Знач АдресВХ)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Возврат Текст;
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_УстановитьТекстЗапроса(Знач АдресВХ, Знач ИндексЗапроса, Знач Текст)
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	СхемаЗапроса.ПакетЗапросов[ИндексЗапроса].УстановитьТекстЗапроса(Текст);
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_ТекстПоТекущийЗапрос(Знач АдресВХ, Знач ИндексЗапроса)
	
	Разделитель = 
	"
	|;
    |
	|////////////////////////////////////////////////////////////////////////////////";
	
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	Результат = "";
	Для Индекс = 0 По ИндексЗапроса Цикл
		Элемент = СхемаЗапроса.ПакетЗапросов[Индекс];
		Если ТипЗнч(Элемент) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Текст = Элемент.ПолучитьТекстЗапроса(); 
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Текст = "УНИЧТОЖИТЬ " + Элемент.ИмяТаблицы;
		КонецЕсли;
		Если Не ПустаяСтрока(Результат) Тогда
			Результат = Результат + Разделитель + Символы.ПС;
		КонецЕсли;
		Результат = Результат + Текст;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Коллекция

&НаСервере
Процедура КоллекцияВыбираемыеПоля_ЗаполнитьИзСхемыЗапроса(Знач Запрос, Знач ИндексОператора)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля;
	
	Для Каждого Колонка Из Запрос.Колонки Цикл
		Если ТипЗнч(Колонка) <> Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда
			САФ = Ложь;
			Выражение = Колонка.Поля[ИндексОператора];
			Если Выражение <> Неопределено Тогда
				САФ = Выражение.СодержитАгрегатнуюФункцию();
			Иначе
				Выражение = "NULL";
			КонецЕсли;
			НовСтр = Дерево.ПолучитьЭлементы().Добавить();
			НовСтр.Выражение 	= Выражение;
			НовСтр.Псевдоним 	= Колонка.Псевдоним;
			НовСтр.ТипЗначения 	= Колонка.ТипЗначения;
			НовСтр.САФ 			= САФ;
			ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, НовСтр);
		Иначе                   
			Выражение = Колонка.Поля[ИндексОператора];
			Если Выражение <> Неопределено Тогда
				Выражение = Выражение.Имя;
			Иначе
				Выражение = "ПУСТАЯТАБЛИЦА";
			КонецЕсли;
			НовСтр = Дерево.ПолучитьЭлементы().Добавить();
			НовСтр.ЭтоВТ 		= Истина;		
			НовСтр.Выражение 	= Выражение;
			НовСтр.Псевдоним 	= Колонка.Псевдоним;
			ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, НовСтр);
			Для Каждого КолонкаВТ Из Колонка.Колонки Цикл
				Выражение = КолонкаВТ.Поля[ИндексОператора];
				Если Выражение = Неопределено Тогда
					Выражение = "NULL";
				КонецЕсли;
				НовСтрВТ = НовСтр.ПолучитьЭлементы().Добавить();
				НовСтрВТ.Выражение 		= Выражение;
				НовСтрВТ.Псевдоним 		= КолонкаВТ.Псевдоним;
				НовСтрВТ.ТипЗначения 	= КолонкаВТ.ТипЗначения;
				ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(ЭтотОбъект, НовСтрВТ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияВыбираемыеПоля_ОбновитьИзСхемыЗапроса(Знач Запрос, Знач ИндексОператора)
	
	Итер = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Количество() - 1;
	Пока Итер >= 0 Цикл
		Строка = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы()[Итер];
		ИскомаяКолонка = Запрос.Колонки.Найти(Строка.Псевдоним);
		Если ИскомаяКолонка = Неопределено Тогда
			ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы().Удалить(Итер);
		Иначе
			Если ТипЗнч(ИскомаяКолонка) <> Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда
				Выражение = ИскомаяКолонка.Поля[ИндексОператора];
				Если Выражение = Неопределено Тогда
					Строка.Выражение = "NULL";
				Иначе
					Строка.Выражение = Выражение;
				КонецЕсли;			
			Иначе
				Выражение = ИскомаяКолонка.Поля[ИндексОператора];
				Если Выражение = Неопределено Тогда
					Строка.Выражение = "ПУСТАЯТАБЛИЦА";
					Для Каждого СтрокаВТ Из Строка.ПолучитьЭлементы() Цикл
						СтрокаВТ.Выражение = "NULL";
					КонецЦикла;
				Иначе
					Строка.Выражение = Выражение.Имя;
				КонецЕсли;
				ИтерВТ = Строка.ПолучитьЭлементы().Количество() - 1;
				Пока ИтерВТ >= 0 Цикл
					СтрокаВТ = Строка.ПолучитьЭлементы()[ИтерВТ];
					ИскомаяКолонкаВТ = ИскомаяКолонка.Колонки.Найти(СтрокаВТ.Псевдоним);
					ВыражениеВТ = ИскомаяКолонкаВТ.Поля[ИндексОператора];
					Если ВыражениеВТ = Неопределено Тогда
						СтрокаВТ.Выражение = "NULL";
					Иначе
						СтрокаВТ.Выражение = ВыражениеВТ;
					КонецЕсли;
					ИтерВТ = ИтерВТ - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Итер = Итер - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияВыбираемыеПоля_ЗаполнитьВыраженияОператоров(Знач Запрос, Знач КоличествоОператоров, Знач ИндексТекущегоОператора)
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для ИндексОператора = 0 По КоличествоОператоров - 1 Цикл
		Реквизит = Новый РеквизитФормы("Выражение" + ИндексОператора, Новый ОписаниеТипов("Строка"), "ТекущаяКоллекцияВыбираемыеПоля", "Выражение " + ИндексОператора);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЦикла;                                 
	
	ЭтотОбъект.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	ИндексКолонки = 0;
	Для Каждого Колонка Из Запрос.Колонки Цикл
		ИскомаяСтрока = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы()[ИндексКолонки];
		Для ИндексОператора = 0 По КоличествоОператоров - 1 Цикл
			Выражение = Колонка.Поля[ИндексОператора];
			Если ТипЗнч(Колонка) <> Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда				
				Если Выражение = Неопределено Тогда
					Выражение = "NULL";
				КонецЕсли;
			Иначе
				Если Выражение <> Неопределено Тогда
					Выражение = Выражение.Имя;
				Иначе
					Выражение = "ПУСТАЯТАБЛИЦА";
				КонецЕсли;
			КонецЕсли;
			ИскомаяСтрока["Выражение" + ИндексОператора] = Выражение;
		КонецЦикла;
		Если ТипЗнч(Колонка) = Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда
			ИндексКолонкиВТ = 0;
			Для Каждого КолонкаВТ Из Колонка.Колонки Цикл
				ИскомаяСтрокаВТ = ИскомаяСтрока.ПолучитьЭлементы()[ИндексКолонкиВТ];
				Для ИндексОператора = 0 По КоличествоОператоров - 1 Цикл
					Выражение = КолонкаВТ.Поля[ИндексОператора];
					Если Выражение = Неопределено Тогда
						Выражение = "NULL";
					КонецЕсли;
					ИскомаяСтрокаВТ["Выражение" + ИндексОператора] = Выражение;
				КонецЦикла;
				ИндексКолонкиВТ = ИндексКолонкиВТ + 1;
			КонецЦикла;
		КонецЕсли;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
		
	Для ИндексОператора = 0 По КоличествоОператоров - 1 Цикл
		Элемент = Элементы.Добавить("ТекущаяКоллекцияВыбираемыеПоляВыражение" + ИндексОператора, Тип("ПолеФормы"), Элементы.ТекущаяКоллекцияВыбираемыеПоля);
		Элемент.ПутьКДанным 	= "ТекущаяКоллекцияВыбираемыеПоля.Выражение" + ИндексОператора;
		Элемент.ТолькоПросмотр 	= Истина;
		Элемент.Видимость 		= (ИндексТекущегоОператора = 0 И ИндексОператора > 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияСоединения_ЗаполнитьИзСхемыЗапроса(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияСоединения;
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("Источник");
	ТЗ.Колонки.Добавить("Приемник");
	ТЗ.Колонки.Добавить("ТипСоединения");
	ТЗ.Колонки.Добавить("Условия");
	
	Отбор = Новый Структура("Источник,Приемник,ТипСоединения");
	
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
		Для Каждого Соединение Из ИсточникСхемыЗапроса.Соединения Цикл
			Отбор.Источник 			= ИсточникСхемыЗапроса.Источник.Псевдоним;
			Отбор.Приемник 			= Соединение.Источник.Источник.Псевдоним;
			Отбор.ТипСоединения 	= Соединение.ТипСоединения;
			МассивСтрок = ТЗ.НайтиСтроки(Отбор);
			Если МассивСтрок.Количество() = 0 Тогда
				ИскомаяСтрока = ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(ИскомаяСтрока, Отбор);
				ИскомаяСтрока.Условия = Новый Массив();
			Иначе
				ИскомаяСтрока = МассивСтрок[0];
			КонецЕсли;                                      
			// Может быть нечитабельно, если неоднозначное поле
			Попытка              
				Условие = Строка(Соединение.Условие);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Поз = СтрНайти(ТекстОшибки, "<<?>>");
				Если Поз > 0 Тогда
					Условие = Прав(ТекстОшибки, СтрДлина(ТекстОшибки) - Поз - 4);
				КонецЕсли;
			КонецПопытки;
			ИскомаяСтрока.Условия.Добавить(Условие);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого Строка Из ТЗ Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		НовСтр.Источник 			= Строка.Источник;
		НовСтр.Приемник 			= Строка.Приемник;
		НовСтр.ТипСоединения 		= Строка.ТипСоединения;
		НовСтр.Выражение			= Выражения_ОбъединитьУсловия(Строка.Условия);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияСоединения_ОбновитьСоединенияПриемника(Знач Оператор, Знач ПсевдонимПриемника)
		
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл 
		Для Каждого Соединение Из ИсточникСхемыЗапроса.Соединения Цикл
			Если Соединение.Источник.Источник.Псевдоним = ПсевдонимПриемника Тогда
				НовСтр = ЭтотОбъект.ТекущаяКоллекцияСоединения.ПолучитьЭлементы().Добавить();
				НовСтр.Источник = ИсточникСхемыЗапроса.Источник.Псевдоним;
				НовСтр.Приемник = ПсевдонимПриемника;
				НовСтр.ТипСоединения = Соединение.ТипСоединения;
				НовСтр.Выражение = Соединение.Условие;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияГруппировки_ЗаполнитьИзСхемыЗапроса(Знач Оператор, Знач Обновить = Ложь)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияГруппировки;
	
	Если Обновить Тогда
		Итер = Оператор.Группировки.Количество() - 1;
		Пока Итер >= 0 Цикл
			Элемент = Оператор.Группировки[Итер];
			Если Элемент.Количество() = 0 И Итер > 0 Тогда
				Оператор.Группировки.Удалить(Итер);
			КонецЕсли;
			Итер = Итер - 1;
		КонецЦикла;
	КонецЕсли;
	
	Итер = 0;
	Для Каждого Элемент Из Оператор.Группировки Цикл
		//Если Элемент.Количество() = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		НовСтрГруппировка = Дерево.ПолучитьЭлементы().Добавить();
		НовСтрГруппировка.Выражение = "Группировка " + Итер + ?(Итер = 0, " Авто", ""); 
		Для Каждого Выражение Из Элемент Цикл
			НовСтрВыражение = НовСтрГруппировка.ПолучитьЭлементы().Добавить();
			НовСтрВыражение.Выражение = Выражение;
		КонецЦикла;
		Итер = Итер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияОтбор_ЗаполнитьИзСхемыЗапроса(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияОтбор;
	
	Для Каждого Выражение Из Оператор.Отбор Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		НовСтр.Выражение = Выражение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияПараметры_ЗаполнитьИзСхемыЗапроса(Знач Оператор)
	
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
		Источник = ИсточникСхемыЗапроса.Источник;
		Если ТипЗнч(Источник) = Тип("ТаблицаСхемыЗапроса") И Источник.Параметры.Количество() > 0 Тогда
			ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ИсточникиДоступныеПоля, Источник.Псевдоним, "Псевдоним");
			КоллекцияПараметры_Заполнить(Источник, ИскомаяСтрока.Картинка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияПараметры_Заполнить(Знач Источник, Знач Картинка)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияПараметры;
	
	СхемаЗапроса 			= Новый СхемаЗапроса();
	Запрос 					= СхемаЗапроса.ПакетЗапросов[0];
	ДоступнаяТаблица 		= Запрос.ДоступныеТаблицы.Найти(Источник.ИмяТаблицы);
		
	НовСтрИсточник = Дерево.ПолучитьЭлементы().Добавить();
	НовСтрИсточник.ИдентификаторСвязи	= Источник.Псевдоним;
	НовСтрИсточник.Имя 					= Источник.Псевдоним;
	НовСтрИсточник.Картинка 			= Картинка;
	
	Для Каждого Параметр Из ДоступнаяТаблица.Параметры Цикл
		
		НовСтрПараметр = НовСтрИсточник.ПолучитьЭлементы().Добавить();
		НовСтрПараметр.Имя 			= Параметр.Имя;
		НовСтрПараметр.ТипПараметра = Параметр.ТипПараметра;
		
		Если Параметр.ТипПараметра = ТипПараметраДоступнойТаблицыСхемыЗапроса.Вариант Тогда
			НовСтрПараметр.Варианты.ЗагрузитьЗначения(Новый Массив(Параметр.Варианты));	
		ИначеЕсли Параметр.ТипПараметра = ТипПараметраДоступнойТаблицыСхемыЗапроса.Значение Тогда
			НовСтрПараметр.Варианты.Добавить("&" + Параметр.Имя);	
		КонецЕсли;
		
		Для Каждого ДоступноеПоле Из Параметр.ДоступныеПоля Цикл
			НовСтрПараметр.ДоступныеПоля.Добавить(ДоступноеПоле.Имя);
		КонецЦикла;
	
	КонецЦикла;
	
	Для Итер = 0 По НовСтрИсточник.ПолучитьЭлементы().Количество() - 1 Цикл		
		НовСтрИсточник.ПолучитьЭлементы()[Итер].Выражение = Источник.Параметры[Итер].Выражение;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура КоллекцияТаблицыДляИзменения_ЗаполнитьИзСхемыЗапроса(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения;
	
	Для Каждого Элемент Из Оператор.ТаблицыДляИзменения Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		НовСтр.ИмяТаблицы = Элемент.ИмяТаблицы;
	КонецЦикла;
	
	Для Каждого Строка Из ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения.ПолучитьЭлементы() Цикл
		ИскомаяСтрока = ТекущаяКоллекцияТаблицыДляИзменения_НайтиТаблицуДляИзменения(Строка.ИмяТаблицы);
		Если ИскомаяСтрока <> Неопределено Тогда
			Строка.Картинка = ИскомаяСтрока.Картинка;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияПорядок_ЗаполнитьИзСхемыЗапроса(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияПорядок;
	
	Для Каждого Выражение Из Запрос.Порядок Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		Если ТипЗнч(Выражение.Элемент) = Тип("ВыражениеСхемыЗапроса") Тогда
			НовСтр.Выражение = Выражение.Элемент;
		ИначеЕсли ТипЗнч(Выражение.Элемент) = Тип("КолонкаСхемыЗапроса") Тогда
			НовСтр.Псевдоним = Выражение.Элемент.Псевдоним;
		КонецЕсли;
		НовСтр.КолонкаВыражение = ?(Не ПустаяСтрока(НовСтр.Выражение), НовСтр.Выражение, НовСтр.Псевдоним);
		НовСтр.Направление = Выражение.Направление;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияВыраженияИтогов_ЗаполнитьИзСхемыЗапроса(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов;
	
	Для Каждого ВыражениеИтога Из Запрос.ВыраженияИтогов Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		НовСтр.Выражение 	= ВыражениеИтога.Выражение;
		НовСтр.Псевдоним 	= ВыражениеИтога.Поле.Псевдоним;		
		НовСтр.Функция	 	= Лев(ВыражениеИтога.Выражение, СтрНайти(ВыражениеИтога.Выражение, "(") - 1);
		Если СтрНачинаетсяС(ВыражениеИтога.Выражение, "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ") Тогда
			НовСтр.Функция = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ)";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияКонтрольныеТочкиИтогов_ЗаполнитьИзСхемыЗапроса(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов;
	
	Для Каждого КонтрольнаяТочка Из Запрос.КонтрольныеТочкиИтогов Цикл
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		Если ТипЗнч(КонтрольнаяТочка.Выражение) = Тип("ВыражениеСхемыЗапроса") Тогда
			НовСтр.Выражение = КонтрольнаяТочка.Выражение;
		ИначеЕсли ТипЗнч(КонтрольнаяТочка.Выражение) = Тип("КолонкаСхемыЗапроса") Тогда
			НовСтр.Псевдоним = КонтрольнаяТочка.Выражение.Псевдоним;
		КонецЕсли;
		НовСтр.КолонкаВыражение = ?(Не ПустаяСтрока(НовСтр.Выражение), НовСтр.Выражение, НовСтр.Псевдоним);
		НовСтр.ИмяКолонки = КонтрольнаяТочка.ИмяКолонки;
		НовСтр.ТипКонтрольнойТочки 		= КонтрольнаяТочка.ТипКонтрольнойТочки;
		НовСтр.ТипДополненияПериодами 	= КонтрольнаяТочка.ТипДополненияПериодами;
		НовСтр.НачалоПериодаДополнения 	= КонтрольнаяТочка.НачалоПериодаДополнения;
		НовСтр.КонецПериодаДополнения 	= КонтрольнаяТочка.КонецПериодаДополнения;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияИндекс_ЗаполнитьИзСхемыЗапроса(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияИндекс;
	
	Для Каждого Элемент Из Запрос.Индекс Цикл	
		НовСтр = Дерево.ПолучитьЭлементы().Добавить();
		Если ТипЗнч(Элемент.Выражение) = Тип("ВыражениеСхемыЗапроса") Тогда
			НовСтр.Выражение = Элемент.Выражение;
		ИначеЕсли ТипЗнч(Элемент.Выражение) = Тип("КолонкаСхемыЗапроса") Тогда
			НовСтр.Псевдоним = Элемент.Выражение.Псевдоним;
		КонецЕсли;
		НовСтр.КолонкаВыражение = ?(Не ПустаяСтрока(НовСтр.Выражение), НовСтр.Выражение, НовСтр.Псевдоним);		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонструкторСЗ

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьВыбираемыеПоля(Знач Запрос, Знач Оператор, Знач ИндексОператора)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля;
	ИндексКолонки = 0;
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если ИндексОператора = 0 Тогда
			ВыражениеСхемыЗапроса = Оператор.ВыбираемыеПоля.Добавить(Строка.Выражение);
		Иначе
			ВыражениеСхемыЗапроса = Оператор.ВыбираемыеПоля.Добавить(Строка.Выражение, ИндексКолонки);
		КонецЕсли;
		Если ИндексОператора = 0 Тогда
			Запрос.Колонки[ИндексКолонки].Псевдоним = Строка.Псевдоним;
		КонецЕсли;
		ИндексКолонки = ИндексКолонки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьСоединения(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияСоединения;
	
	Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
		ИсточникСхемыЗапроса.Соединения.Очистить();
	КонецЦикла;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		ИсточникСхемыЗапроса_Источник = Оператор.Источники.НайтиПоПсевдониму(Строка.Источник);
		ИсточникСхемыЗапроса_Приемник = Оператор.Источники.НайтиПоПсевдониму(Строка.Приемник);
		Если ИсточникСхемыЗапроса_Источник = Неопределено Или ИсточникСхемыЗапроса_Приемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИсточникСхемыЗапроса_Источник.Соединения.Добавить(ИсточникСхемыЗапроса_Приемник, Строка.Выражение);
		Индекс = ИсточникСхемыЗапроса_Источник.Соединения.Количество() - 1;
		Соединение = ИсточникСхемыЗапроса_Источник.Соединения[Индекс];
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса[ЗначениеПеречисления(Строка.ТипСоединения)];		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьГруппировки(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияГруппировки;
	
	Итер = 0;
	Для Каждого СтрокаГруппировка Из Дерево.ПолучитьЭлементы() Цикл
		Если Итер > 0 Тогда				
			Оператор.Группировки.Добавить();
		КонецЕсли;
		ВыраженияСхемыЗапроса = Оператор.Группировки[Итер];
		Для Каждого Строка Из СтрокаГруппировка.ПолучитьЭлементы() Цикл
			ВыраженияСхемыЗапроса.Добавить(Строка.Выражение);
		КонецЦикла;
		Итер = Итер + 1;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьОтбор(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияОтбор;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Оператор.Отбор.Добавить(Строка.Выражение);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьПараметрыИсточника(Знач Источник)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияПараметры;
	
	СтрокаИсточник = Форма_НайтиСтроку(Дерево, Источник.Псевдоним, "Имя");
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Итер = 0;
	Для Каждого Строка Из СтрокаИсточник.ПолучитьЭлементы() Цикл
		Источник.Параметры[Итер].Выражение = Новый ВыражениеСхемыЗапроса(Строка.Выражение);
		Итер = Итер + 1;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьТаблицыДляИзменения(Знач Оператор)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияТаблицыДляИзменения;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Оператор.ТаблицыДляИзменения.Добавить(Строка.ИмяТаблицы);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьПорядок(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияПорядок;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Не ПустаяСтрока(Строка.Выражение) Тогда
			Выражение 	= Запрос.Порядок.Добавить(Строка.Выражение);
		Иначе
			Колонка 	= Запрос.Колонки.Найти(Строка.Псевдоним);
			Выражение 	= Запрос.Порядок.Добавить(Колонка);
		КонецЕсли;
		Выражение.Направление = НаправлениеПорядкаСхемыЗапроса[ЗначениеПеречисления(Строка.Направление)];
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьВыраженияИтогов(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияВыраженияИтогов;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Запрос.ВыраженияИтогов.Добавить(Строка.Выражение);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьКонтрольныеТочкиИтогов(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияКонтрольныеТочкиИтогов;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Не ПустаяСтрока(Строка.Выражение) Тогда
			КонтрольнаяТочка 	= Запрос.КонтрольныеТочкиИтогов.Добавить(Строка.Выражение);
		Иначе
			Колонка 			= Запрос.Колонки.Найти(Строка.Псевдоним);
			КонтрольнаяТочка 	= Запрос.КонтрольныеТочкиИтогов.Добавить(Колонка);
		КонецЕсли;
		КонтрольнаяТочка.ТипКонтрольнойТочки 		= ТипКонтрольнойТочкиСхемыЗапроса[ЗначениеПеречисления(Строка.ТипКонтрольнойТочки)];
		КонтрольнаяТочка.ТипДополненияПериодами 	= ТипДополненияПериодамиСхемыЗапроса[ЗначениеПеречисления(Строка.ТипДополненияПериодами)];
		КонтрольнаяТочка.НачалоПериодаДополнения 	= Строка.НачалоПериодаДополнения;
		КонтрольнаяТочка.КонецПериодаДополнения  	= Строка.КонецПериодаДополнения;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура КонструкторСЗ_ЗаполнитьИндекс(Знач Запрос)
	
	Дерево = ЭтотОбъект.ТекущаяКоллекцияИндекс;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Не ПустаяСтрока(Строка.Выражение) Тогда
			Элемент = Запрос.Индекс.Добавить(Строка.Выражение);
		Иначе
			Колонка = Запрос.Колонки.Найти(Строка.Псевдоним);
			Элемент = Запрос.Индекс.Добавить(Колонка);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция КонструкторСЗ_ЗаменитьТекстВыборкиЗапроса(Знач ТекстЗапроса, Знач КоличествоОператоров)
		
	ТекстИсточник = Новый ТекстовыйДокумент();
	ТекстИсточник.УстановитьТекст(ТекстЗапроса);
	ТекстПриемник = Новый ТекстовыйДокумент();
	
	СтрокаНач = 1;
	СтрокаКон = КонструкторСЗ_НайтиНачалоВыборки(ТекстИсточник, 0);
	Для Итер = СтрокаНач По СтрокаКон Цикл
		ТекстПриемник.ДобавитьСтроку(ТекстИсточник.ПолучитьСтроку(Итер));
	КонецЦикла;
	
	Для ИндексОператора = 0 По КоличествоОператоров - 1 Цикл
		ИндексВыражения = Строка(ИндексОператора);
		
		ТекстВыборки = КонструкторСЗ_ТекстВыборкиОператора(ИндексВыражения);
		Для Итер = 1 По ТекстВыборки.КоличествоСтрок() Цикл
			ТекстПриемник.ДобавитьСтроку(ТекстВыборки.ПолучитьСтроку(Итер));
		КонецЦикла;
		
		СтрокаНач = КонструкторСЗ_НайтиОкончаниеВыборки(ТекстИсточник, СтрокаКон);
		СтрокаКон = КонструкторСЗ_НайтиНачалоВыборки(ТекстИсточник, СтрокаНач);                                                                       
		Для Итер = СтрокаНач По СтрокаКон Цикл
			ТекстПриемник.ДобавитьСтроку(ТекстИсточник.ПолучитьСтроку(Итер));
		КонецЦикла; 
		
	КонецЦикла;
	
	Результат = ТекстПриемник.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_ЗаменитьТекстВыборкиОператора(Знач ТекстЗапроса, Знач ИндексОператора)
	
	ТекстВыборки = КонструкторСЗ_ТекстВыборкиОператора();
	
	ТекстИсточник = Новый ТекстовыйДокумент();
	ТекстИсточник.УстановитьТекст(ТекстЗапроса);
	
	ИнтервалВыборки = КонструкторСЗ_ИнтервалВыборкиОператора(ТекстИсточник, ИндексОператора);
	
	ТекстПриемник = Новый ТекстовыйДокумент();
	Для Итер = 1 По ИнтервалВыборки.СтрокаНач Цикл
		ТекстПриемник.ДобавитьСтроку(ТекстИсточник.ПолучитьСтроку(Итер));
	КонецЦикла;                                                                        
	Для Итер = 1 По ТекстВыборки.КоличествоСтрок() Цикл
		ТекстПриемник.ДобавитьСтроку(ТекстВыборки.ПолучитьСтроку(Итер));
	КонецЦикла;
	Для Итер = ИнтервалВыборки.СтрокаКон По ТекстИсточник.КоличествоСтрок() Цикл
		ТекстПриемник.ДобавитьСтроку(ТекстИсточник.ПолучитьСтроку(Итер));
	КонецЦикла;
	
	Результат = ТекстПриемник.ПолучитьТекст();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_ТекстВыборкиОператора(Знач ИндексВыражения = "")
	
	Текст = Новый ТекстовыйДокумент();
	
	Коллекция = ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля.ПолучитьЭлементы();
	Итер = 1;                  
	Для Каждого Строка Из Коллекция Цикл
		Выражение = Строка["Выражение" + ИндексВыражения];
		Если Не Строка.ЭтоВТ Тогда                        
			Если ПустаяСтрока(Выражение) Тогда
				Выражение = "NULL";
			КонецЕсли;
			ПостФикс = ?(Итер < Коллекция.Количество(), ",", "");
			Текст.ДобавитьСтроку(Выражение + " КАК " + Строка.Псевдоним + ПостФикс);
		Иначе
			Если ПустаяСтрока(Выражение) Тогда
				Выражение = "ПУСТАЯТАБЛИЦА";
			КонецЕсли;
			Текст.ДобавитьСтроку(Выражение + ".(");
			ИтерВТ = 1;                                
			КоллекцияВТ = Строка.ПолучитьЭлементы();
			Для Каждого СтрокаВТ Из КоллекцияВТ Цикл
				ВыражениеВТ = СтрокаВТ["Выражение" + ИндексВыражения];
				Если ПустаяСтрока(ВыражениеВТ) Тогда
					ВыражениеВТ = "NULL";
				КонецЕсли;
				Если Выражение = "ПУСТАЯТАБЛИЦА" Тогда
					ВыражениеВТ = "";
				КонецЕсли;
				ПостФикс = ?(ИтерВТ < КоллекцияВТ.Количество(), ",", "");
				Текст.ДобавитьСтроку(ВыражениеВТ + " КАК " + СтрокаВТ.Псевдоним + ПостФикс);
				ИтерВТ = ИтерВТ + 1;
			КонецЦикла;
			ПостФикс = ?(Итер < Коллекция.Количество(), ",", "");
			Текст.ДобавитьСтроку(")" + " КАК " + Строка.Псевдоним + ПостФикс);
		КонецЕсли;
		Итер = Итер + 1;		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_ИнтервалВыборкиОператора(Знач Текст, Знач ИндексОператора) 
	
	СтрокаНач = 0;
	СтрокаКон = Текст.КоличествоСтрок() + 1;
	
	ТекИндексОператора = 0;
	Для Итер = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Итер);
		Если СтрНачинаетсяС(ТекСтрока, "ВЫБРАТЬ") Тогда
			Если СтрокаНач = 0 И ТекИндексОператора = ИндексОператора Тогда
				СтрокаНач = Итер;
			КонецЕсли;           
			ТекИндексОператора = ТекИндексОператора + 1;
		КонецЕсли;
		Если СтрНачинаетсяС(ТекСтрока, "ИЗ") Или СтрНачинаетсяС(ТекСтрока, "ПОМЕСТИТЬ") Или СтрНачинаетсяС(ТекСтрока, "ОБЪЕДИНИТЬ") Тогда
			Если СтрокаНач > 0 Тогда
				СтрокаКон = Итер;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СтрокаНач, СтрокаКон", СтрокаНач, СтрокаКон);
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_НайтиНачалоВыборки(Знач Текст, Знач Курсор) 
	
	Результат = Текст.КоличествоСтрок();
	
	Для Итер = Курсор + 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Итер);
		Если СтрНачинаетсяС(ТекСтрока, "ВЫБРАТЬ") Тогда
			Возврат Итер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_НайтиОкончаниеВыборки(Знач Текст, Знач Курсор) 
	
	Результат = Текст.КоличествоСтрок() + 1;
	
	Для Итер = Курсор + 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Итер);
		Если СтрНачинаетсяС(ТекСтрока, "ИЗ") Или СтрНачинаетсяС(ТекСтрока, "ПОМЕСТИТЬ") Или СтрНачинаетсяС(ТекСтрока, "ОБЪЕДИНИТЬ") Тогда
			Возврат Итер;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КонструкторСЗ_ИнтервалЗапросаОператора(Знач Текст, Знач ИндексОператора) 
	
	СтрокаНач = 0;
	СтрокаКон = Текст.КоличествоСтрок() + 1;
	
	ТекИндексОператора = 0;
	Для Итер = 1 По Текст.КоличествоСтрок() Цикл
		ТекСтрока = Текст.ПолучитьСтроку(Итер);
		Если СтрНачинаетсяС(ТекСтрока, "ВЫБРАТЬ") Тогда
			Если СтрокаНач = 0 И ТекИндексОператора = ИндексОператора Тогда
				СтрокаНач = Итер;
			КонецЕсли;           
			ТекИндексОператора = ТекИндексОператора + 1;
		КонецЕсли;
		Если СтрНачинаетсяС(ТекСтрока, "ОБЪЕДИНИТЬ") Тогда
			Если СтрокаНач > 0 Тогда
				СтрокаКон = Итер;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("СтрокаНач, СтрокаКон", СтрокаНач, СтрокаКон);
	
КонецФункции

#КонецОбласти

#Область ТаблицаФормы

&НаСервере
Процедура ТаблицаФормы_УстановитьТипКартинкуТаблицы(Знач Строка)
	
	МассивСтрок = СтрРазделить(Строка.ИмяТаблицы, ".");
	
	Если МассивСтрок.Количество() = 1 Тогда
		Если Строка.ИмяТаблицы = "Константы" Тогда
			Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
			Строка.Картинка = БиблиотекаКартинок.Константа;
			Возврат;
		КонецЕсли;
		Результат = ЭтотОбъект.ПеречислениеТипТаблицы.ВремТаблица;
	ИначеЕсли МассивСтрок.Количество() = 2 Тогда
		Результат = ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
	ИначеЕсли СтрЗаканчиваетсяНа(Строка.ИмяТаблицы, ".Изменения") Тогда
		Результат = ЭтотОбъект.ПеречислениеТипТаблицы.Изменения;
	ИначеЕсли СтрНачинаетсяС(Строка.ИмяТаблицы, "ВнешнийИсточникДанных.") Тогда
		Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ОбычнаяТаблица;
		Если СтрНайти(Строка.ИмяТаблицы, ".ТаблицаИзмерения.") > 0 Тогда		
			Строка.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхКубТаблицаИзмерения;
		ИначеЕсли СтрНайти(Строка.ИмяТаблицы, ".Куб.") > 0 Тогда		
			Строка.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
		ИначеЕсли СтрНайти(Строка.ИмяТаблицы, ".Таблица.") > 0 Тогда		
			Строка.Картинка = БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
		КонецЕсли;
		Возврат;
	Иначе                                                       
		
		Значение2 = МассивСтрок[2];
		Значение1 = МассивСтрок[1];
		Значение0 = МассивСтрок[0];
		
		ИскомаяСтрока = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(Новый Структура("ИмяЕдч", Значение0))[0];
		Если ИскомаяСтрока.ЕстьТЧ И Метаданные[ИскомаяСтрока.ИмяМнч][Значение1].ТабличныеЧасти.Найти(Значение2) <> Неопределено Тогда
			Результат = ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть; 
		ИначеЕсли ИскомаяСтрока.ЕстьСТЧ И ОписаниеКоллекций_ЕстьСТЧ(Метаданные[ИскомаяСтрока.ИмяМнч][Значение1], Значение2) Тогда
			Результат = ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть;
		Иначе
			Результат = ЭтотОбъект.ПеречислениеТипТаблицы.ВиртТаблица;
		КонецЕсли;
	
	КонецЕсли;
	
	Строка.ТипТаблицы = Результат;
	
	Если Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ВремТаблица Тогда
		Строка.Картинка = БиблиотекаКартинок.КонструкторЗапросаВременнаяТаблица;
	ИначеЕсли Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.Изменения Тогда
		Строка.Картинка = БиблиотекаКартинок.КонструкторЗапросаОтображатьТаблицыИзменений;
	ИначеЕсли Строка.ТипТаблицы = ЭтотОбъект.ПеречислениеТипТаблицы.ТабличнаяЧасть Тогда
		Строка.Картинка = БиблиотекаКартинок.ВложеннаяТаблица;		
	Иначе                    
		Строка.Картинка = ЭтотОбъект.ОписаниеКоллекций.НайтиСтроки(Новый Структура("ИмяЕдч", МассивСтрок[0]))[0].Картинка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКоллекций_ЕстьСТЧ(Знач ОМ, Знач Имя)
	
	Для Каждого СТЧ Из ОМ.СтандартныеТабличныеЧасти Цикл
		Если СТЧ.Имя = Имя Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ТаблицаФормы_УстановитьКартинкуДоступногоПоля(Знач Строка, Знач ДоступноеПоле)
	
	Если Не Строка.ЭтоВТ Тогда
		Если ДоступноеПоле.Роль.Измерение Тогда
			Картинка = БиблиотекаКартинок.Измерение;
		ИначеЕсли ДоступноеПоле.Роль.Ресурс Тогда
			Картинка = БиблиотекаКартинок.Ресурс;						
		Иначе
			Картинка = БиблиотекаКартинок.Реквизит;
		КонецЕсли;
	Иначе
		Картинка = БиблиотекаКартинок.ВложеннаяТаблица;
	КонецЕсли;
	
	Строка.Картинка = Картинка;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ТаблицаФормы_УстановитьКартинкуВыбираемогоПоля(Знач Форма, Знач Строка)
	
	Если Строка.ЭтоВТ Тогда
		Строка.Картинка = БиблиотекаКартинок.ВложеннаяТаблица;
	ИначеЕсли Строка.САФ Тогда
		Строка.Картинка = Форма.ПеречислениеКартинки.Функция;
	Иначе
		Строка.Картинка = БиблиотекаКартинок.Реквизит;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФормы_ЗаполнитьКолонкуВыражение(Знач ТекДанные)
	
	ИскомаяСтрока = Форма_НайтиСтроку(ЭтотОбъект.ТекущаяКоллекцияВыбираемыеПоля, ТекДанные.КолонкаВыражение, "Псевдоним");
	Если ИскомаяСтрока <> Неопределено Тогда
		ТекДанные.Выражение = "";
		ТекДанные.Псевдоним = ТекДанные.КолонкаВыражение;
	Иначе
		ТекДанные.Выражение = ТекДанные.КолонкаВыражение;
		ТекДанные.Псевдоним = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Выражения

&НаСервере
Процедура ВыраженияНастроитьФорму(Знач Подменю)
	
	Форма = ЭтотОбъект;
	
	СтрокаФункций = "СУММА,МИНИМУМ,МАКСИМУМ,СРЕДНЕЕ,КОЛИЧЕСТВО";
	МассивФункций = СтрРазделить(СтрокаФункций, ",");
	
	Для Каждого Элемент Из МассивФункций Цикл
		Команда = Форма.Команды.Добавить("ВыраженияПрименитьФункцию" + Элемент);
		Команда.Заголовок 	= Элемент;
		Команда.Действие 	= "ВыраженияПрименитьФункцию";
		НовыйЭлемент = Форма.Элементы.Добавить("ВыраженияПрименитьФункцию" + Элемент, Тип("КнопкаФормы"), Подменю);
		НовыйЭлемент.ИмяКоманды = "ВыраженияПрименитьФункцию" + Элемент;
	КонецЦикла;
	
	Элемент = "КОЛИЧЕСТВО_РАЗЛИЧНЫЕ";
	Команда = Форма.Команды.Добавить("ВыраженияПрименитьФункцию" + Элемент);
	Команда.Заголовок 	= "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ)";
	Команда.Действие 	= "ВыраженияПрименитьФункцию";
	НовыйЭлемент = Форма.Элементы.Добавить("ВыраженияПрименитьФункцию" + Элемент, Тип("КнопкаФормы"), Подменю);
	НовыйЭлемент.ИмяКоманды = "ВыраженияПрименитьФункцию" + Элемент;                                                                          
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ПрименитьФункцию(Знач Выражение, Знач ИмяФункции) Экспорт
	
	Выражение 	= Выражения_ОчиститьФункцию(Выражение);
	ИмяФункции 	= СтрЗаменить(ИмяФункции, "ВыраженияПрименитьФункцию", "");
	
	Если ИмяФункции = "КОЛИЧЕСТВО_РАЗЛИЧНЫЕ" Тогда
		Выражение = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + Выражение + ")";
	Иначе
		Выражение = ИмяФункции + "(" + Выражение + ")"; 
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ОчиститьФункцию(Знач Выражение) Экспорт
	
	Поз1 = 0;
	Поз2 = 0;
	
	Если СтрНачинаетсяС(Выражение, "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ") Тогда
		Поз1 = СтрДлина("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ");			
	Иначе
		СтрокаФункций = "СУММА,МИНИМУМ,МАКСИМУМ,СРЕДНЕЕ,КОЛИЧЕСТВО";
		МассивФункций = СтрРазделить(СтрокаФункций, ",");
		Для Каждого Элемент Из МассивФункций Цикл
			Если СтрНачинаетсяС(Выражение, Элемент + "(") Тогда
				Поз1 = СтрДлина(Элемент + "(");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Поз2 = СтрНайти(Выражение, ")", НаправлениеПоиска.СКонца);
	
	Если Поз1 > 0 И Поз2 > 0 Тогда
		Выражение = Сред(Выражение, Поз1 + 1, Поз2 - Поз1 - 1);
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ПрименитьEСТЬNULL(Знач Выражение, Знач ТипЗначения) Экспорт
	
	ПустоеЗначение = ПустоеЗначениеЕСТЬNULL(ТипЗначения);	
	Выражение = "ЕСТЬNULL(" + Выражение + ", " + ПустоеЗначение + ")";
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ОчиститьЕСТЬNULL(Знач Выражение) Экспорт
	
	Если Не СтрНачинаетсяС(Выражение, "ЕСТЬNULL(") Тогда
		Возврат Выражение;
	КонецЕсли;
	
	Поз1 = СтрДлина("ЕСТЬNULL(");
	Поз2 = СтрНайти(Выражение, ",", НаправлениеПоиска.СНачала);
	
	Если Поз1 > 0 И Поз2 > 0 Тогда
		Выражение = Сред(Выражение, Поз1 + 1, Поз2 - Поз1 - 1);
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ОбъединитьУсловия(Знач Условия)
	
	Если Условия.Количество() = 1 Тогда
		Возврат Условия[0];
	КонецЕсли;
	
	Резт = "";
	Итер = 1;
	Для Каждого Условие Из Условия Цикл
		Постфикс = ?(Итер < Условия.Количество(), Символы.ПС + "И ", ""); 
		Резт = Резт + Условие + Постфикс;
		Итер = Итер + 1;
	КонецЦикла;
	
	Возврат Резт;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустоеЗначениеЕСТЬNULL(Знач ТипЗначения)
	
	Если ТипЗначения = Неопределено
		Или ТипЗначения.Типы().Количество() = 0
		Или ТипЗначения.Типы().Количество() > 1 Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Тип = ТипЗначения.Типы()[0];
	
	ОМ = Метаданные.НайтиПоТипу(Тип);
	
	Если ОМ <> Неопределено Тогда 
		ПолноеИмя = ОМ.ПолноеИмя();
		Значение = "ЗНАЧЕНИЕ(" + ПолноеИмя + ".ПустаяСсылка)";
		Возврат Значение;
	КонецЕсли;
	
	Если Тип = Тип("Число") Тогда
		Возврат "0";
	ИначеЕсли Тип = Тип("Строка") Тогда
		Возврат """""";
	ИначеЕсли Тип = Тип("Дата") Тогда
		Возврат "ДАТАВРЕМЯ(1,1,1)";
	КонецЕсли;
	
	Возврат "НЕОПРЕДЕЛЕНО";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПослеТочкиСКонца(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".", НаправлениеПоиска.СКонца);
	Значение = Прав(Текст, СтрДлина(Текст) - Поз);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПослеТочкиСНачала(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".", НаправлениеПоиска.СНачала);
	Значение = Прав(Текст, СтрДлина(Текст) - Поз);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПередТочкойСНачала(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".");
	Значение = Лев(Текст, Поз - 1);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КорректныйПсевдоним(Коллекция, Знач Псевдоним) Экспорт
	
	Найдено = Ложь;
	Для Каждого Строка Из Коллекция Цикл
		Если Псевдоним = Строка.Псевдоним Тогда
			Найдено = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Если Найдено Тогда
		Псевдоним = ИнкрементПсевдонима(Псевдоним);
		Псевдоним = КорректныйПсевдоним(Коллекция, Псевдоним);
	КонецЕсли;
	
	Возврат Псевдоним;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнкрементПсевдонима(Знач Псевдоним)
	
	Окончание = Прав(Псевдоним, 1);
	Если СтрНайти("0123456789", Окончание) > 0 Тогда
		Значение 	= Число(Окончание);
		Псевдоним 	= Лев(Псевдоним, СтрДлина(Псевдоним) - 1);
	Иначе
		Значение 	= 0;
	КонецЕсли;
	
	Возврат Псевдоним + Строка(Значение + 1);
	 	 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПеречисления(Знач Текст) Экспорт
	
	МассивСтрок = СтрРазделить(Текст, " ");
	Для Каждого Строка Из МассивСтрок Цикл
		Строка = ВРег(Строка);
	КонецЦикла;
	
	Результат = СтрСоединить(МассивСтрок);
	Возврат Результат;
	
КонецФункции

#КонецОбласти









































