#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ПолноеИмяФайла.АвтоМаксимальнаяШирина        		= Ложь;
	Элементы.ДеревоЗапросов.АвтоВводНовойСтроки 				= Ложь;
	Элементы.ДеревоЗапросовИсключение.ТолькоПросмотр 			= Истина;
	Элементы.ПараметрыЗапроса.АвтоВводНовойСтроки 				= Ложь;
	Элементы.ПараметрыЗапросаТипЗначения.РедактированиеТекста 	= Ложь; 
	Элементы.ПараметрыЗапросаЗначение.КнопкаВыбора	 			= Истина;
	Элементы.ПараметрыЗапросаЗначение.ВыборГруппИЭлементов 	= ГруппыИЭлементы.ГруппыИЭлементы;
	Элементы.ПараметрыЗапросаФлагСЗ.ТолькоПросмотр				= Истина;
	Элементы.ПараметрыЗапросаФлагГраница.ТолькоПросмотр			= Истина;
	Элементы.ПараметрыЗапросаФлагКод.ТолькоПросмотр				= Истина;
	Элементы.ВремТаблицыЗначение.РедактированиеТекста 			= Ложь;
	Элементы.ВремТаблицыЗначение.КнопкаВыбора	 				= Истина;
	Элементы.ВремТаблицыИспользуемаяВТ.КнопкаВыбора	 			= Истина;

	ЭтотОбъект.ОписаниеТиповДокумент 		= Документы.ТипВсеСсылки();
	ЭтотОбъект.ОписаниеТиповСписокЗначений 	= Новый ОписаниеТипов("СписокЗначений");
	ЭтотОбъект.ОписаниеТиповСтрока 			= Новый ОписаниеТипов("Строка");
	
	ЭтотОбъект.НастройкаМаксКоличествоСтрок 	= 100;
	ЭтотОбъект.НастройкаМаксШиринаКолонок		= 60;
	ЭтотОбъект.НастройкаПереноситьТекст     	= Истина;
	ЭтотОбъект.НастройкаВыделятьОтрицательные 	= Истина;
	
	Элементы.ДеревоЗапросовЗагрузитьИзРегистра.Видимость = (Метаданные.РегистрыСведений.Найти("bm_Запросы") <> Неопределено);
	
	Если Параметры.Свойство("ТекстЗапроса") Тогда
		
		НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
		НовСтр.Наименование 	= "Новый запрос";
	
		ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;
		
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Параметры.ТекстЗапроса);
		
		Если Параметры.Свойство("ПараметрыЗапроса") Тогда
			ЭтотОбъект.ПараметрыЗапроса.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ПараметрыЗапроса));
		КонецЕсли;
		Если Параметры.Свойство("ВремТаблицы") Тогда
			ЭтотОбъект.ВремТаблицы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.ВремТаблицы));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтотОбъект.ВладелецФормы = Неопределено Тогда
	
		Если Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
			КонсольЗапросов_ИнициализацияСуществующийФайл();
		ИначеЕсли ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда // new
			КонсольЗапросов_ИнициализацияНовыйФайл();
		КонецЕсли;
		
	Иначе
		
		ЭтотОбъект.ПолноеИмяФайла = "";
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Модифицированность Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			Форма_ВыполнитьКомандуСПроверкойНаСохранение("ЗакрытьФорму");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпискаФайлов" Тогда
		АдресВоВременномХранилище = Параметр.АдресСписокФайлов;
		Форма_ВременноеХранилищеВТаблицуЗначений("СписокФайлов", АдресВоВременномХранилище);
	ИначеЕсли ИмяСобытия = "ФормаСхемаЗапросаПриОткрытии" Тогда
		Форма_УстановитьДоступность(Ложь);
	ИначеЕсли ИмяСобытия = "ФормаСхемаЗапросаВыполнитьТекущийЗапрос" Тогда
		ЭтотОбъект.СтруктураОткрытияЗапроса.ПереданЗапрос = Истина;
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Параметр);
		ВыполнитьЗапросПакетНаСервере(Истина);
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

#Область ДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДеревоЗапросов_ВыбратьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоЗапросовПриАктивизацииСтроки_ОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// prevent F9
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПослеУдаления(Элемент)
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		НоваяСтрокаТекущегоУровня(Команды.НоваяСтрокаТекущегоУровня);
	ИначеЕсли ТекДанные.Идентификатор <> ЭтотОбъект.ТекущийИдентификатор Тогда
		ЭтотОбъект.ТекущийИдентификатор = ТекДанные.Идентификатор;	
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыЗапроса

&НаКлиенте
Процедура ПараметрыЗапросаПриАктивизацииЯчейки(Элемент)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПараметрыЗапросаЗначение" Тогда
		Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
			Элемент.ТекущийЭлемент.РедактированиеТекста = Ложь;
		Иначе
			Элемент.ТекущийЭлемент.РедактированиеТекста = Истина;
		КонецЕсли;
		ТипыЗначений_УстановитьОграничениеТипа(Элемент.ТекущийЭлемент, ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекДанные.ТипЗначения 	= Новый ОписаниеТипов();
		ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаПослеУдаления(Элемент)
	
	ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура("ПодборТипа, БыстрыйВыбор, ТипЗначения", Истина, Ложь, ТекДанные.ТипЗначения);
	ОткрытьФорму(ИмяФормыОбработки("ВыборТипаЗначения"), ПараметрыОткрытия, Элемент, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаТипЗначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ТипЗначения = ВыбранноеЗначение;
	ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные);
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Адрес", ТекДанные.Значение);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторТЗ"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);
	ИначеЕсли ТекДанные.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("УИД", ТекДанные.Значение);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторУИД"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = Форма_ПоместитьДанныеВоВременноеХранилищеФормы(ВыбранноеЗначение);
	ИначеЕсли ТекДанные.ТипЗначения.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = ВыбранноеЗначение;		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаСЗ(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = Не ТекДанные.ФлагСЗ;
	
	Если Флаг Тогда
		Если ТекДанные.ФлагГраница Тогда
			Сообщить("Установлен флаг Граница");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекДанные.ФлагСЗ = Флаг;
	
	ТекЗначение = ТекДанные.Значение;
	Если Флаг Тогда
		ОписаниеТипов = Новый ОписаниеТипов("СписокЗначений");		
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповСписокЗначений.ПривестиЗначение(ТекДанные.Значение);
		Если (ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент")) > 0
			Или ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ТекДанные.Значение.ТипЗначения = ЭтотОбъект.ОписаниеТиповДокумент;
		Иначе
			ТекДанные.Значение.ТипЗначения = ТекДанные.ТипЗначения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.Значение) И ЗначениеЗаполнено(ТекЗначение) И ТекДанные.Значение.НайтиПоЗначению(ТекЗначение) = Неопределено Тогда
			ТекДанные.Значение.Добавить(ТекЗначение);
		КонецЕсли;
	Иначе
		ТекДанные.Значение = ТекДанные.ТипЗначения.ПривестиЗначение(ТекДанные.Значение);
		Если ТипЗнч(ТекЗначение) = Тип("СписокЗначений") И ТекЗначение.Количество() > 0 Тогда
			ТекДанные.Значение = ТекЗначение.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ПараметрыЗапроса.ТекущийЭлемент.Имя = "ПараметрыЗапросаЗначение" Тогда
		ТипыЗначений_УстановитьОграничениеТипа(Элементы.ПараметрыЗапроса.ТекущийЭлемент, ТекДанные);
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаГраница(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекДанные.ТипЗначения.СодержитТип(Тип("Дата")) Или ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени"))) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ФлагСЗ Тогда
		Сообщить("Установлен флаг СЗ");
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФлагГраница, ВидГраницы", ТекДанные.ФлагГраница, ТекДанные.ВидГраницы);
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗапросаГраница_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("Граница"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаГраница_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ФлагГраница = Не ПустаяСтрока(Результат);
	ТекДанные.ВидГраницы = Результат;
	
	ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные);
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКод(Команда)

	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ФлагКод, ВидКода, Код", ТекДанные.ФлагКод, ТекДанные.ВидКода, ТекДанные.Код);
	Оповещение = Новый ОписаниеОповещения("ПараметрыЗапросаКод_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("ПрограммныйКод"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗапросаКод_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ПараметрыЗапроса.ТекущиеДанные;
	ТекДанные.ФлагКод = Не ПустаяСтрока(Результат.Код);
	ТекДанные.ВидКода = Результат.ВидКода;
	ТекДанные.Код = Результат.Код;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВремТаблицы

&НаКлиенте
Процедура ВремТаблицыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекДанные.ТипЗначения 	= "Таблица значений";
		ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура("Адрес", ТекДанные.Значение);
		ОткрытьФорму(ИмяФормыОбработки("КонструкторТЗ"), ПараметрыОткрытия, Элемент, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ТекДанные.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		ТекДанные.Значение = Форма_ПоместитьДанныеВоВременноеХранилищеФормы(ВыбранноеЗначение);		
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыИспользуемаяВТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму(ИмяФормыОбработки("ВыборВТ"), , Элемент, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремТаблицыИспользуемаяВТОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ВремТаблицы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекДанные.Имя) Тогда
		ТекДанные.Имя = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура НовыйФайл(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайлов(Команда)
	
	Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда.Имя);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	КонсольЗапросов_СохранитьФайлНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлКак(Команда)
	
	КонсольЗапросов_СохранитьФайлНаКлиенте(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	
	Если ЭтотОбъект.ТекущийИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ЭтотОбъект.ТекущийИдентификатор;
	ВыполнитьЗапросПакетНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакет(Команда)
	
	Если ЭтотОбъект.ТекущийИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = ЭтотОбъект.ТекущийИдентификатор;
	ВыполнитьЗапросПакетНаСервере(Истина);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыОткрытия = Новый Структура(КонсольЗапросов_СтрокаНастроек());
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект);
	Оповещение = Новый ОписаниеОповещения("Настройки_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("Настройки"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяСтрокаТекущегоУровня(Команда)
	
	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ТекРодитель = ТекДанные.ПолучитьРодителя();
		Если ТекРодитель = Неопределено Тогда
			ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
		Иначе
			ДФКЭД = ТекРодитель.ПолучитьЭлементы();
		КонецЕсли;
	КонецЕсли;
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = "Новый запрос";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяСтрокаПодчиненногоУровня(Команда)
	
 	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДФКЭД = ТекДанные.ПолучитьЭлементы();
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = "Новый запрос";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор);
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроку(Команда)
	
	ТекДанные 	= Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекРодитель = ТекДанные.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ДФКЭД = ТекРодитель.ПолучитьЭлементы();
	КонецЕсли;
 
	НовСтр = ДФКЭД.Добавить();
	НовСтр.Наименование = ТекДанные.Наименование + " (копия)";
	Идентификатор = НовСтр.ПолучитьИдентификатор();
	ДеревоЗапросов_НоваяСтрока(Идентификатор, ТекДанные.Идентификатор);	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = Идентификатор;
	Элементы.ДеревоЗапросов.ИзменитьСтроку();
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗапрос(Команда)
	
	ДеревоЗапросов_ВыбратьЗапрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзРегистра(Команда)
	
	ПараметрыОткрытия = Новый Структура("РежимВыбора", Истина);
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзРегистра_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму("РегистрСведений.bm_Запросы.Форма.ФормаСписка", ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзРегистра_Завершение(КлючЗаписи, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.bm_Запросы") Тогда
		КонсольЗапросов_ЗагрузитьИзРегистра(КлючЗаписи);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапрос(Команда)

	Диалог = Форма_НовыйДиалогОткрытия();
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗапрос_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗапрос_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда		
			ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);		
			Файл = Новый Файл(ВыбранныеФайлы[0]);
			Если Файл.Расширение = ".bmqval" Тогда
				КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Файл.ПолноеИмя);
			ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
				КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Файл.ПолноеИмя);
			КонецЕсли;			
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗапрос(Команда)
		
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ЭтотОбъект.ТекущийИдентификатор);
	Диалог = Форма_НовыйДиалогСохранения(Строка.Наименование);
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьЗапрос_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗапрос_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда			
			Файл = Новый Файл(ВыбранныеФайлы[0]);
			Если Файл.Расширение = ".bmqval" Тогда
				КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Файл.ПолноеИмя, ЭтотОбъект.ТекущийИдентификатор);
			ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
				КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Файл.ПолноеИмя, ЭтотОбъект.ТекущийИдентификатор);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	
	Текст = СокрЛП(ТекстЗапроса.ПолучитьТекст());
	Если Не ПустаяСтрока(Текст) Тогда
		РезультатПроверки = КонсольЗапросов_ПроверитьТекстЗапроса(Текст);
		Если Не РезультатПроверки.Результат Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	Форма_УстановитьДоступность(Ложь);
	
	КонструкторЗапроса = Новый КонструкторЗапроса(Текст);
	Оповещение = Новый ОписаниеОповещения("ОткрытьКонструкторЗапроса_Завершение", ЭтотОбъект, Новый Структура());
	КонструкторЗапроса.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса_Завершение(Текст, ДополнительныеПараметры) Экспорт
	
	Форма_УстановитьДоступность(Истина);
	
	Если Текст <> Неопределено Тогда
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Текст);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуЗапроса(Команда)

	Текст = СокрЛП(ТекстЗапроса.ПолучитьТекст());
	Если Не ПустаяСтрока(Текст) Тогда
		РезультатПроверки = КонсольЗапросов_ПроверитьТекстЗапроса(Текст);
		Если Не РезультатПроверки.Результат Тогда
			ПоказатьПредупреждение(, РезультатПроверки.ТекстСообщения);
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	ЭтотОбъект.СтруктураОткрытияЗапроса = Новый Структура("ТекстЗапроса, ПереданЗапрос", Текст, Ложь);
	
	ПараметрыОткрытия = Новый Структура("ТекстЗапроса", Текст);
	Оповещение = Новый ОписаниеОповещения("ОткрытьСхемуЗапроса_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("СхемаЗапроса"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор, , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуЗапроса_Завершение(Текст, ДополнительныеПараметры) Экспорт
	
	Форма_УстановитьДоступность(Истина);
	
	Если Текст = Неопределено Тогда
		Если ЭтотОбъект.СтруктураОткрытияЗапроса.ПереданЗапрос Тогда
			ЭтотОбъект.ТекстЗапроса.УстановитьТекст(ЭтотОбъект.СтруктураОткрытияЗапроса.ТекстЗапроса);
		КонецЕсли;
	Иначе
		ЭтотОбъект.ТекстЗапроса.УстановитьТекст(Текст);
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛистинг(Команда)
	
	Попытка
		ПараметрыОткрытия = ОткрытьЛистинг_ПараметрыОткрытия();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецПопытки;
		
	ОткрытьФорму(ИмяФормыОбработки("Листинг"), ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыВТ(Команда)
	
	Попытка
		ЗаполнитьПараметрыВТНаСервере();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНеиспользуемыеПараметрыВТ(Команда)
	
	Попытка
		ОчиститьНеиспользуемыеПараметрыВТНаСервере();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    	ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныИнструкций(Команда)

	ОткрытьФорму(ИмяФормыОбработки("ШаблоныИнструкций"), , ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИнструкцию(Команда)
	
	Текст = ЭтотОбъект.ПрограммныйКод.ПолучитьТекст();
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьИнструкциюНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область КомандыНаСервере

&НаСервере
Функция ОткрытьЛистинг_ПараметрыОткрытия()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	ПараметрыОткрытия = Новый Структура();
	
	Попытка
		ПроверитьСхемуЗапроса(СхемаЗапроса, Текст, Истина);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ОписаниеПараметровЗапроса = СхемаЗапроса.НайтиПараметры();
	
	СписокПараметров = Новый Массив();
	
	Для Каждого Описание Из ОписаниеПараметровЗапроса Цикл
		СписокПараметров.Добавить(Описание.Имя);
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("Текст", Текст);
	ПараметрыОткрытия.Вставить("СписокПараметров", СписокПараметров);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура ВыполнитьЗапросПакетНаСервере(Знач Пакет = Ложь)
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	
	ПроверитьСхемуЗапроса(СхемаЗапроса, Текст);
		
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонсольЗапросов_ЗаполнитьВремТаблицы(Запрос.МенеджерВременныхТаблиц);
	КонсольЗапросов_ЗаполнитьПараметрыЗапроса(Запрос);
	
	ДатаНачала 		= ТекущаяУниверсальнаяДатаВМиллисекундах();
	Если Не Пакет Тогда
		Результат = Запрос.Выполнить();
	Иначе
		Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	КонецЕсли;
	ДатаОкончания 	= ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВыполнения = ДатаОкончания - ДатаНачала;
	
	СтруктураРезультата = Новый Структура();                       
	СтруктураРезультата.Вставить("ПараметрыМакета", 			КонсольЗапросов_ПараметрыМакета());
	СтруктураРезультата.Вставить("Результат", 					Результат);
	СтруктураРезультата.Вставить("ТабДок", 						Новый ТабличныйДокумент());
	СтруктураРезультата.Вставить("КоличествоТаблиц", 			0);
	
	Заголовки = Новый Массив();
	Заголовки.Добавить(Формат(ВремяВыполнения, "ЧЦ=10; ЧН=") + " ms");
	
	Если Пакет И СхемаЗапроса <> Неопределено Тогда
		СтруктураРезультата.Вставить("СхемаЗапроса", СхемаЗапроса);
	КонецЕсли;
	
	Если Пакет И СхемаЗапроса = Неопределено Тогда
		Заголовки.Добавить("Сформировано без схемы запроса");
	КонецЕсли;
	
	Результат_ВывестиЗаголовки(СтруктураРезультата, Заголовки);
		
	Если Не Пакет Тогда
		Результат_ВывестиЗапрос(СтруктураРезультата);
	ИначеЕсли СхемаЗапроса <> Неопределено Тогда
		Результат_ВывестиПакетСоСхемойЗапроса(СтруктураРезультата);
	Иначе
		Результат_ВывестиПакетБезСхемыЗапроса(СтруктураРезультата);
	КонецЕсли;
	
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.РезультатТабличныйДокумент.Вывести(СтруктураРезультата.ТабДок);
	ЭтотОбъект.РезультатТабличныйДокумент.ФиксацияСверху = Заголовки.Количество() + 1;
	
	ЭтотОбъект.КоличествоТаблиц = СтруктураРезультата.КоличествоТаблиц;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВТНаСервере()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	
	Попытка
		ПроверитьСхемуЗапроса(СхемаЗапроса, Текст, Истина);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	ОписаниеПараметровЗапроса 	= Запрос.НайтиПараметры();	
	ПрежняяК_ПараметрыЗапроса 	= ЭтотОбъект.ПараметрыЗапроса.Выгрузить();	
	НоваяК_ПараметрыЗапроса 	= ПрежняяК_ПараметрыЗапроса.СкопироватьКолонки();
	
	Для Каждого Стр Из ОписаниеПараметровЗапроса Цикл
		ИскомаяСтрока = ПрежняяК_ПараметрыЗапроса.Найти(Стр.Имя, "Имя");
		Если ИскомаяСтрока <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = НоваяК_ПараметрыЗапроса.Добавить();
		НовСтр.Имя = Стр.Имя;	
		Если Стр.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			НовСтр.ТипЗначения	= "Таблица значений";
		ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
			МассивТипов = Новый Массив();
			МассивТипов.Добавить(Тип("ОписаниеТипов"));
			НовСтр.ТипЗначения	= Новый ОписаниеТипов(МассивТипов);
			НовСтр.Значение 	= НовСтр.ТипЗначения.ПривестиЗначение();
		ИначеЕсли Стр.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			НовСтр.ТипЗначения	= Стр.ТипЗначения;
			НовСтр.Значение 	= ЭтотОбъект.ОписаниеТиповДокумент.ПривестиЗначение();			
		Иначе
			НовСтр.ТипЗначения	= Стр.ТипЗначения;
			НовСтр.Значение 	= Стр.ТипЗначения.ПривестиЗначение();
		КонецЕсли;
	КонецЦикла;
	
	ПрежняяК_ВремТаблицы		= ЭтотОбъект.ВремТаблицы.Выгрузить();	
	НоваяК_ВремТаблицы 			= ПрежняяК_ВремТаблицы.СкопироватьКолонки();
	
	СписокОписанийВТ = Запросы_СписокОписанийВТИзТекстаЗапроса(Запрос.Текст);
	
	Для Каждого ЭлементКоллекции Из СписокОписанийВТ Цикл
		Если Лев(ЭлементКоллекции.Ключ, 1) <> "&" Тогда
			ИскомаяСтрока = ПрежняяК_ВремТаблицы.Найти(ЭлементКоллекции.Ключ, "Имя");
			Если ИскомаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			НовСтр = НоваяК_ВремТаблицы.Добавить();
			НовСтр.Имя			= ЭлементКоллекции.Ключ;
			НовСтр.ТипЗначения 	= "Таблица значений";
			НовСтр.Значение  	= ПоместитьВоВременноеХранилище(ЭлементКоллекции.Значение, ЭтотОбъект.УникальныйИдентификатор);
		Иначе
			Имя = Прав(ЭлементКоллекции.Ключ, СтрДлина(ЭлементКоллекции.Ключ)-1);
			ИскомаяСтрока = ПрежняяК_ПараметрыЗапроса.Найти(Имя, "Имя");
			Если ИскомаяСтрока <> Неопределено Тогда
				Продолжить;
			КонецЕсли;			
			ИскомаяСтрока = НоваяК_ПараметрыЗапроса.Найти(Имя, "Имя");
			ИскомаяСтрока.Значение = ПоместитьВоВременноеХранилище(ЭлементКоллекции.Значение, ЭтотОбъект.УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из НоваяК_ПараметрыЗапроса Цикл
		НовСтр = ЭтотОбъект.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	Для Каждого Стр Из НоваяК_ВремТаблицы Цикл
		НовСтр = ЭтотОбъект.ВремТаблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;	
	
	Если НоваяК_ПараметрыЗапроса.Количество() > 0 Или НоваяК_ВремТаблицы.Количество() > 0 Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;	
	
	КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеПараметрыВТНаСервере()
	
	Перем СхемаЗапроса;
	Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
	
	Попытка
		ПроверитьСхемуЗапроса(СхемаЗапроса, Текст, Истина);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.Текст = Текст;
	ОписаниеПараметровЗапроса 	= Запрос.НайтиПараметры();	
	СписокОписанийВТ 			= Запросы_СписокОписанийВТИзТекстаЗапроса(Запрос.Текст);
	
	Итер = ЭтотОбъект.ПараметрыЗапроса.Количество()-1;
	
	ИндексыПараметрыЗапроса = Новый Массив();
	
	Пока Итер >= 0 Цикл
		Строка 	= ЭтотОбъект.ПараметрыЗапроса[Итер];
		ЭлементКоллекции = ОписаниеПараметровЗапроса.Найти(Строка.Имя);
		Если ЭлементКоллекции = Неопределено Тогда
			ИндексыПараметрыЗапроса.Добавить(Итер);
		КонецЕсли;
		Итер = Итер-1;
	КонецЦикла;
	
	Для Каждого Индекс Из ИндексыПараметрыЗапроса Цикл
		ЭтотОбъект.ПараметрыЗапроса.Удалить(Индекс);
	КонецЦикла;
	
	Итер = ЭтотОбъект.ВремТаблицы.Количество()-1;
	
	ИндексыВремТаблицы = Новый Массив();
	
	Пока Итер >= 0 Цикл
		Строка 	= ЭтотОбъект.ВремТаблицы[Итер];
		ЭлементКоллекции = СписокОписанийВТ.Получить(Строка.Имя);			
		Если ЭлементКоллекции = Неопределено Тогда
			ИндексыВремТаблицы.Добавить(Итер);
		КонецЕсли; 
		Итер = Итер-1;
	КонецЦикла;
	
	Для Каждого Индекс Из ИндексыВремТаблицы Цикл
		ЭтотОбъект.ВремТаблицы.Удалить(Индекс);
	КонецЦикла;
	
	Если ИндексыПараметрыЗапроса.Количество() > 0 Или ИндексыВремТаблицы.Количество() > 0 Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
	КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСхемуЗапроса(СхемаЗапроса, Знач Текст, Знач ВызовИсключения = Ложь)
	
	ТекДанные = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ЭтотОбъект.ТекущийИдентификатор);	
	ТекИсключение = ТекДанные.Исключение;
	
	Попытка     
		СхемаЗапроса = Новый СхемаЗапроса();			
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		ТекДанные.Исключение = Ложь;
		Если ТекИсключение <> ТекДанные.Исключение Тогда
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;		
	Исключение   
		СхемаЗапроса 		 = Неопределено;
		ТекДанные.Исключение = Истина;
		Если ТекИсключение <> ТекДанные.Исключение Тогда
			ЭтотОбъект.Модифицированность = Истина;
		КонецЕсли;
		Если ВызовИсключения Тогда
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнструкциюНаСервере()
	
	Код = ЭтотОбъект.ПрограммныйКод.ПолучитьТекст();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");;
	МодульОбщегоНазначения = Неопределено;
	ЕстьФункцииРаботыВБезопасномРежиме = Ложь;
	
	Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
		МодульОбщегоНазначения = Вычислить("ОбщегоНазначения");
		Попытка			
			МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме("Аргумент = Истина");
			ЕстьФункцииРаботыВБезопасномРежиме = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Контекст = Новый Структура();
	Контекст.Вставить("ТекстДокумент", Новый ТекстовыйДокумент());
	Если ЭтотОбъект.ФлагПеременнаяЗапрос Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = ЭтотОбъект.ТекстЗапроса.ПолучитьТекст();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
		КонсольЗапросов_ЗаполнитьВремТаблицы(Запрос.МенеджерВременныхТаблиц);
		КонсольЗапросов_ЗаполнитьПараметрыЗапроса(Запрос);
		Контекст.Вставить("Запрос", Запрос);
	КонецЕсли;
	
	Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
		МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме(Код, Контекст);
	Иначе
		ОбъектОбработки.ВыполнитьВБезопасномРежиме(Код, Контекст);
	КонецЕсли;
	
	ЭтотОбъект.ИнструкцияТекстовыйДокумент.УстановитьТекст(Контекст.ТекстДокумент.ПолучитьТекст());
	
КонецПроцедуры

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура Форма_ВыполнитьКомандуСПроверкойНаСохранение(Команда)
	
	ЭтотОбъект.Команда = Команда;
	
	Если ЭтотОбъект.Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Форма_ВыполнитьКомандуСПроверкойНаСохранение_Завершение", ЭтотОбъект, Новый Структура()), "Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	Иначе
		Форма_ВыполнитьКоманду();		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма_ВыполнитьКомандуСПроверкойНаСохранение_Завершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КонсольЗапросов_СохранитьФайлНаКлиенте();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		Форма_ВыполнитьКоманду();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Форма_ВыполнитьКоманду()
	
	ТекКоманда = ЭтотОбъект.Команда;
	ЭтотОбъект.Команда = "";
	
	Если ТекКоманда = "НовыйФайл" Тогда
		
		КонсольЗапросов_НовыйФайл();
		
	ИначеЕсли ТекКоманда = "ОткрытьФайл" Тогда
				
		КонсольЗапросов_ОткрытьФайл();
		
	ИначеЕсли ТекКоманда = "СписокФайлов" Тогда
				
		КонсольЗапросов_СписокФайлов();		
				
	ИначеЕсли ТекКоманда = "ЗакрытьФорму" Тогда
		
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция Форма_НовыйДиалогОткрытия()
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = НСтр("ru = 'Файл запросов|*.bmqval;*.bmqxml'");
	Диалог.ПроверятьСуществованиеФайла = Истина;
	
	Возврат Диалог;
	
КонецФункции

&НаКлиенте
Функция Форма_НовыйДиалогСохранения(Знач Наименование = "")
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Фильтр = НСтр("ru = 'Файл запросов *.bmqval|*.bmqval|Файл запросов *.bmqxml|*.bmqxml'");
	
	Если ПустаяСтрока(Наименование) И Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
		Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);
		Диалог.ПолноеИмяФайла = Файл.ИмяБезРасширения;
		Диалог.ИндексФильтра  = ?(Файл.Расширение = ".bmqval", 0, 1);
	ИначеЕсли Не ПустаяСтрока(Наименование) Тогда
		Диалог.ПолноеИмяФайла = Наименование;
		Если Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
			Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);		
			Диалог.ИндексФильтра  = ?(Файл.Расширение = ".bmqval", 0, 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Диалог;
	
КонецФункции

&НаСервере
Функция Форма_ТаблицаЗначенийВоВременноеХранилище(Знач ИмяРеквизита)
	
	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[ИмяРеквизита].Выгрузить());
	
КонецФункции

&НаСервере
Функция Форма_ВременноеХранилищеВТаблицуЗначений(Знач ИмяРеквизита, Знач Адрес)
	
	ЭтотОбъект[ИмяРеквизита].Загрузить(ПолучитьИзВременногоХранилища(Адрес));
	
КонецФункции

&НаСервере
Функция Форма_ПоместитьДанныеВоВременноеХранилищеФормы(Знач Адрес)
	
	Значение 	= ПолучитьИзВременногоХранилища(Адрес);
	Адрес		= ПоместитьВоВременноеХранилище(Значение, УникальныйИдентификатор);
	Возврат Адрес;
	
КонецФункции

&НаКлиенте
Процедура Форма_УстановитьДоступность(Доступность)
	
	СтруктураЭлементов = Новый Структура("ДеревоЗапросов,ГруппаТекстЗапросаКоманднаяПанель,ТекстЗапроса,ФормаНовыйФайл,ФормаГруппаОткрыть");
	Для Каждого КИЗ Из СтруктураЭлементов Цикл
		Элементы[КИЗ.Ключ].Доступность = Доступность;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФормыОбработки(Имя)
	
	ТипМетаданных = ?(СтрНачинаетсяС(ЭтотОбъект.ИмяФормы, "ВнешняяОбработка"), "ВнешняяОбработка", "Обработка");
	Возврат ТипМетаданных + ".bm_КонсольЗапросов.Форма." + Имя;
	
КонецФункции

#КонецОбласти

#Область КонсольЗапросов

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияСуществующийФайл()
	
	Файл = Новый Файл(ЭтотОбъект.ПолноеИмяФайла);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КонсольЗапросов_ИнициализацияСуществующийФайл_Завершение", ЭтотОбъект, Новый Структура()));
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияСуществующийФайл_Завершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов(ЭтотОбъект.ПолноеИмяФайла)
	Иначе
		ЭтотОбъект.ПолноеИмяФайла = "";
		КонсольЗапросов_ИнициализацияНовыйФайл();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ИнициализацияНовыйФайл()
	
	НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
	НовСтр.Наименование 	= "Новый запрос";
	
	ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_НовыйФайл()
	
	ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	
	ЭтотОбъект.ПолноеИмяФайла 	= "";
	ЭтотОбъект.ИмяФайла 		= "";
	
	НовСтр = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Добавить();
	НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
	НовСтр.Наименование 	= "Новый запрос";
	
	ЭтотОбъект.ТекущийИдентификатор = НовСтр.Идентификатор;	
	ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса();	
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ОткрытьФайл()
	
	Диалог = Форма_НовыйДиалогОткрытия();	
	Оповещение = Новый ОписаниеОповещения("КонсольЗапросов_ОткрытьФайл_Завершение", ЭтотОбъект, Новый Структура());
	Диалог.Показать(Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ОткрытьФайл_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда					
			ПутьКФайлу = ВыбранныеФайлы[0];
			КонсольЗапросов_ПрочитатьФайлЗапросов(ПутьКФайлу);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлНаКлиенте(СохранитьКак = Ложь)
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	
	Если Не СохранитьКак И Не ПустаяСтрока(ЭтотОбъект.ПолноеИмяФайла) Тогда
		
		КонсольЗапросов_СохранитьФайлЗапросов(ЭтотОбъект.ПолноеИмяФайла);
		
		ЭтотОбъект.Модифицированность = Ложь;
		
		Форма_ВыполнитьКоманду();
		
	Иначе
		
		Диалог = Форма_НовыйДиалогСохранения();
		Оповещение = Новый ОписаниеОповещения("КонсольЗапросов_СохранитьФайлНаКлиенте_Завершение", ЭтотОбъект, Новый Структура());
		Диалог.Показать(Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлНаКлиенте_Завершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Если ВыбранныеФайлы.Количество() > 0 Тогда
			ПутьКФайлу = ВыбранныеФайлы[0];
			КонсольЗапросов_СохранитьФайлЗапросов(ПутьКФайлу);			
		КонецЕсли;
	КонецЕсли;
	
	ЭтотОбъект.Модифицированность = Ложь;	
	
	Форма_ВыполнитьКоманду();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СписокФайлов()
	
	АдресВоВременномХранилище 	= Форма_ТаблицаЗначенийВоВременноеХранилище("СписокФайлов");
	ПараметрыОткрытия 			= Новый Структура("АдресСписокФайлов", АдресВоВременномХранилище);
	Оповещение 					= Новый ОписаниеОповещения("КонсольЗапросов_СписокФайлов_Завершение", ЭтотОбъект, Новый Структура());
	ОткрытьФорму(ИмяФормыОбработки("СписокФайлов"), ПараметрыОткрытия, ЭтотОбъект, ЭтотОбъект.УникальныйИдентификатор, , , Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СписокФайлов_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ПутьКФайлу") Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов(Результат.ПутьКФайлу);
	ИначеЕсли Результат.Свойство("Очистить") Тогда
		ЭтотОбъект.СписокФайлов.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов(Знач ПутьКФайлу)
	
	ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	
	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Расширение = ".bmqval" Тогда		
		КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Файл.ПолноеИмя);
	ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
		КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Файл.ПолноеИмя);
	КонецЕсли;
	ЭтотОбъект.ПолноеИмяФайла = Файл.ПолноеИмя;
	ЭтотОбъект.ИмяФайла = Файл.Имя;
	КонсольЗапросов_ОбновитьСписокФайлов();
	
	ДФКЭД = ДеревоЗапросов.ПолучитьЭлементы();
	Если ДФКЭД.Количество() > 0 Тогда
		ЭтотОбъект.ТекущийИдентификатор = ДФКЭД[0].Идентификатор;
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов_bmqval(Знач ПутьКФайлу)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонсольЗапросов_ЗагрузитьЗначение_bmqval(АдресВоВременномХранилище);
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_ПрочитатьФайлЗапросов_bmqxml(Знач ПутьКФайлу)
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонсольЗапросов_ЗагрузитьЗначение_bmqxml(СтрокаXML);
			
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов(Знач ПутьКФайлу)

	Файл = Новый Файл(ПутьКФайлу);
	Если Файл.Расширение = ".bmqval" Тогда
		КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Файл.ПолноеИмя);
	ИначеЕсли Файл.Расширение = ".bmqxml" Тогда
		КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Файл.ПолноеИмя);
	КонецЕсли;
	ЭтотОбъект.ПолноеИмяФайла = Файл.ПолноеИмя;
	ЭтотОбъект.ИмяФайла = Файл.Имя;
	КонсольЗапросов_ОбновитьСписокФайлов();	
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов_bmqval(Знач ПутьКФайлу, Знач Идентификатор = Неопределено)
	
	АдресВоВременномХранилище = КонсольЗапросов_ВыгрузитьЗначение_bmqval(Идентификатор);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура КонсольЗапросов_СохранитьФайлЗапросов_bmqxml(Знач ПутьКФайлу, Знач Идентификатор = Неопределено)
	
	Значение = КонсольЗапросов_ВыгрузитьЗначение_bmqxml(Идентификатор);
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу);
	ЗаписьXML.ЗаписатьБезОбработки(Значение);
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ЗагрузитьЗначение_bmqval(Знач АдресВоВременномХранилище)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	ЗначениеСохранения = ЗначениеИзФайла(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ЗагрузитьЗначение_bmqxml(Знач СтрокаXML)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);	
	ЗначениеСохранения = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);
	
КонецПроцедуры

&НаСервере
Функция КонсольЗапросов_ВыгрузитьЗначение_bmqval(Знач Идентификатор = Неопределено)
	
	СохраняемыеДанные 	= ДеревоЗапросов_ДеревоЗначений(Идентификатор);
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
	ЗначениеВФайл(ИмяВременногоФайла, СохраняемыеДанные);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	УдалитьФайлы(ИмяВременногоФайла);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные); 
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ВыгрузитьЗначение_bmqxml(Знач Идентификатор = Неопределено)
	
	СохраняемыеДанные = ДеревоЗапросов_ДеревоЗначений(Идентификатор);
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, СохраняемыеДанные);
	Возврат ЗаписьXML.Закрыть();	
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ЗагрузитьИзРегистра(Знач КлючЗаписи)
	
	ЗначениеСохранения = РегистрыСведений.bm_Запросы.ЗначениеХранилища(КлючЗаписи);
	ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, ЗначениеСохранения);	
	
КонецФункции

&НаКлиенте
Процедура КонсольЗапросов_ОбновитьСписокФайлов()
	
	МассивСтрок = ЭтотОбъект.СписокФайлов.НайтиСтроки(Новый Структура("ПутьКФайлу", ЭтотОбъект.ПолноеИмяФайла));
	Если МассивСтрок.Количество() > 0 Тогда
		ИскомаяСтрока = МассивСтрок[0];
		ЭтотОбъект.СписокФайлов.Удалить(ИскомаяСтрока);
	КонецЕсли;
	НовСтр = ЭтотОбъект.СписокФайлов.Вставить(0);
	НовСтр.ПутьКФайлу = ЭтотОбъект.ПолноеИмяФайла;
	
	Если ЭтотОбъект.СписокФайлов.Количество() > 10 Тогда
		ЭтотОбъект.СписокФайлов.Удалить(ЭтотОбъект.СписокФайлов.Количество()-1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КонсольЗапросов_СтрокаНастроек()
	
	Возврат "НастройкаМаксКоличествоСтрок,НастройкаВыводитьСвойстваВыборки,НастройкаВыделятьОтрицательные,НастройкаМаксШиринаКолонок,НастройкаПереноситьТекст,НастройкаФорматЧисла";
	
КонецФункции

&НаСервере
Функция КонсольЗапросов_ПараметрыМакета()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	
	ПараметрыМакета = Новый Структура();                
	ПараметрыМакета.Вставить("ОбластьЗаголовокВТ", 				Макет.ПолучитьОбласть("ЗаголовокВТ"));
	ПараметрыМакета.Вставить("ОбластьШапкаПерваяКолонка", 		Макет.ПолучитьОбласть("ШапкаПерваяКолонка"));
	ПараметрыМакета.Вставить("ОбластьПерваяКолонка", 			Макет.ПолучитьОбласть("ПерваяКолонка"));
	ПараметрыМакета.Вставить("ОбластьШапкаТипЗаписи", 			Макет.ПолучитьОбласть("ШапкаТипЗаписи"));
	ПараметрыМакета.Вставить("ОбластьШапкаУровень", 			Макет.ПолучитьОбласть("ШапкаУровень"));
	ПараметрыМакета.Вставить("ОбластьШапкаГруппировка", 		Макет.ПолучитьОбласть("ШапкаГруппировка"));
	ПараметрыМакета.Вставить("ОбластьШапкаЗначение", 			Макет.ПолучитьОбласть("ШапкаЗначение"));
	ПараметрыМакета.Вставить("ОбластьТипЗаписи", 				Макет.ПолучитьОбласть("ТипЗаписи"));
	ПараметрыМакета.Вставить("ОбластьУровень", 					Макет.ПолучитьОбласть("Уровень"));
	ПараметрыМакета.Вставить("ОбластьГруппировка", 				Макет.ПолучитьОбласть("Группировка"));
	ПараметрыМакета.Вставить("ОбластьЗначение", 				Макет.ПолучитьОбласть("Значение"));
	ПараметрыМакета.Вставить("ЦветФонаОбычный", 				ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона);
	ПараметрыМакета.Вставить("ЦветФонаРезультатЗапроса",		Новый Цвет(250, 235, 215));
	ПараметрыМакета.Вставить("ЦветФонаNull", 					Новый Цвет(255, 210, 170));
	ПараметрыМакета.Вставить("ЦветФонаНеопределено", 			Новый Цвет(250, 235, 215));
	ПараметрыМакета.Вставить("ЦветТекстОбычный", 				Новый Цвет(0, 0, 0));
	ПараметрыМакета.Вставить("ЦветТекстОтр", 					Новый Цвет(255, 0, 0));
	
	Если ЭтотОбъект.НастройкаПереноситьТекст Тогда                                                               
		ПараметрыМакета.ОбластьТипЗаписи.Области.ТипЗаписи.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьУровень.Области.Уровень.РазмещениеТекста 		= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьГруппировка.Области.Группировка.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПараметрыМакета.ОбластьЗначение.Области.Значение.РазмещениеТекста 		= ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	КонецЕсли;
	
	Возврат ПараметрыМакета;
	
КонецФункции

&НаСервере
Процедура КонсольЗапросов_ЗаполнитьВремТаблицы(МенеджерВременныхТаблиц)
	
	Для Каждого Строка Из ЭтотОбъект.ВремТаблицы Цикл
		Если Строка.ТипЗначения = "Таблица значений" И ПустаяСтрока(Строка.ИспользуемаяВТ) Тогда
			Запросы_ЗагрузитьВТ(МенеджерВременныхТаблиц, Строка.Имя, ПолучитьИзВременногоХранилища(Строка.Значение));
		ИначеЕсли Не ПустаяСтрока(Строка.ИспользуемаяВТ) Тогда
			ОбъектОбработки = РеквизитФормыВЗначение("Объект"); 
			ОбъектОбработки.СформироватьВремТаблицу(МенеджерВременныхТаблиц, Строка.ИспользуемаяВТ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КонсольЗапросов_ЗаполнитьПараметрыЗапроса(Запрос)
	
	ОбъектОбработки = Неопределено;
	МодульОбщегоНазначения = Неопределено;
	ЕстьФункцииРаботыВБезопасномРежиме = Ложь;
	
	ЕстьКод = (ЭтотОбъект.ПараметрыЗапроса.НайтиСтроки(Новый Структура("ФлагКод", Истина)).Количество() > 0);
	Если ЕстьКод Тогда
		ОбъектОбработки = РеквизитФормыВЗначение("Объект");
		Если Метаданные.ОбщиеМодули.Найти("ОбщегоНазначения") <> Неопределено Тогда
			МодульОбщегоНазначения = Вычислить("ОбщегоНазначения");
			Попытка			
				Результат = МодульОбщегоНазначения.ВычислитьВБезопасномРежиме("Истина");
				ЕстьФункцииРаботыВБезопасномРежиме = Истина;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.ПараметрыЗапроса Цикл
		Если СтрокаТаблицы.ФлагГраница Тогда
			Если Найти(СтрокаТаблицы.ВидГраницы, "Дата") > 0 Тогда
				ВидГраницыЗначения = ?(Найти(СтрокаТаблицы.ВидГраницы, "включая") > 0, ВидГраницы.Включая, ВидГраницы.Исключая);
				Значение = Новый Граница(СтрокаТаблицы.Значение, ВидГраницыЗначения);
			ИначеЕсли Найти(СтрокаТаблицы.ВидГраницы, "Момент") > 0 Тогда
				ВидГраницыЗначения = ?(Найти(СтрокаТаблицы.ВидГраницы, "включая") > 0, ВидГраницы.Включая, ВидГраницы.Исключая);
				Значение = Новый Граница(СтрокаТаблицы.Значение.МоментВремени(), ВидГраницыЗначения);				
			КонецЕсли;	
		ИначеЕсли СтрокаТаблицы.ТипЗначения = "Таблица значений" Тогда
			Значение = ПолучитьИзВременногоХранилища(СтрокаТаблицы.Значение); 
		ИначеЕсли СтрокаТаблицы.ТипЗначения.СодержитТип(Тип("ОписаниеТипов")) Тогда
			Значение = Запросы_ТипИзОписанияТипов(СтрокаТаблицы.Значение);
		ИначеЕсли СтрокаТаблицы.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			Значение = Запросы_МоментВремениИзСсылки(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		Если СтрокаТаблицы.ФлагКод Тогда
			Контекст = Новый Структура("Значение", Значение);
			Если СтрокаТаблицы.ВидКода = "Выражение" Тогда
				Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
					Значение = МодульОбщегоНазначения.ВычислитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				Иначе
					Значение = ОбъектОбработки.ВычислитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				КонецЕсли;
			Иначе
				Если ЕстьФункцииРаботыВБезопасномРежиме = Истина Тогда
					МодульОбщегоНазначения.ВыполнитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				Иначе
					ОбъектОбработки.ВыполнитьВБезопасномРежиме(СтрокаТаблицы.Код, Контекст);
				КонецЕсли;
				Значение = Контекст.Значение;
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр(СтрокаТаблицы.Имя, Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КонсольЗапросов_ПроверитьТекстЗапроса(Знач Текст)
	
	Резт = Новый Структура("Результат, ТекстСообщения", Ложь, "");
	
	Попытка
		СхемаЗапроса = Новый СхемаЗапроса();
		СхемаЗапроса.УстановитьТекстЗапроса(Текст);
		Резт.Результат = Истина;
	Исключение
		Резт.Результат = Ложь;
		Резт.ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Резт;
	
КонецФункции

#КонецОбласти

#Область ДеревоЗапросов

&НаКлиенте
Процедура ДеревоЗапросовПриАктивизацииСтроки_ОбработчикОжидания()
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Элементы.ТекстЗапроса.Доступность = (ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор);
	Элементы.ГруппаТекстЗапросаКоманднаяПанель.Доступность = (ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДеревоЗапросов_НайтиПоИдентификатору(Знач Форма, Знач Идентификатор, Знач Дерево = Неопределено)
	
	Если Дерево = Неопределено Тогда
		Дерево = Форма.ДеревоЗапросов;
	КонецЕсли;
	
	Для Каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
		Если Строка.Идентификатор = Идентификатор Тогда
			Возврат Строка;
		КонецЕсли;
		ПодчДерево = Строка.ПолучитьЭлементы();
		Если ПодчДерево.Количество() > 0 Тогда
			ПодчСтрока = ДеревоЗапросов_НайтиПоИдентификатору(Форма, Идентификатор, Строка);
			Если ПодчСтрока <> Неопределено Тогда
				Возврат ПодчСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_НоваяСтрока(Знач Идентификатор, Знач ИдентификаторИсточника = Неопределено)
	
	ТекДанные = ЭтотОбъект.ДеревоЗапросов.НайтиПоИдентификатору(Идентификатор);
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	
	ТекДанные.Идентификатор 		= Идентификатор;		
	ЭтотОбъект.ТекущийИдентификатор = Идентификатор;
	
	Если ИдентификаторИсточника = Неопределено Тогда
		ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса();
	Иначе
		СтрокаИсточника = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, ИдентификаторИсточника);
		ТекДанные.Адрес = ДанныеЗапроса_СкопироватьДанныеЗапроса(СтрокаИсточника.Адрес);
		ДеревоЗапросов_ЗагрузитьДанныеСтроки(ТекДанные.Идентификатор);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросов_ВыбратьЗапрос()
	
	ТекДанные = Элементы.ДеревоЗапросов.ТекущиеДанные;
	Если ТекДанные.Идентификатор = ЭтотОбъект.ТекущийИдентификатор Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТекстЗапроса.Доступность = Истина;
	Элементы.ГруппаТекстЗапросаКоманднаяПанель.Доступность = Истина;
	
	ДеревоЗапросов_ВыбратьЗапросНаСервере(ТекДанные.Идентификатор);	
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ВыбратьЗапросНаСервере(Знач Идентификатор)
	
	ДеревоЗапросов_ВыгрузитьДанныеСтроки(ЭтотОбъект.ТекущийИдентификатор);
	ЭтотОбъект.ТекущийИдентификатор = Идентификатор;	
	ДеревоЗапросов_ЗагрузитьДанныеСтроки(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ВыгрузитьДанныеСтроки(Знач Идентификатор)
	
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗапроса = ДеревоЗапросов_ВыгрузитьДанныеЗапроса();
	
	Строка.Адрес = ПоместитьВоВременноеХранилище(СтруктураЗапроса, ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДанныеСтроки(Знач Идентификатор)
	
	Строка = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
	
	СтруктураЗапроса = ПолучитьИзВременногоХранилища(Строка.Адрес);
	
	ДеревоЗапросов_ЗагрузитьДанныеЗапроса(СтруктураЗапроса);
	
КонецПроцедуры

&НаСервере
Функция ДеревоЗапросов_ВыгрузитьДанныеЗапроса()
	
	СтруктураЗапроса = Новый Структура();
	СтруктураЗапроса.Вставить("ТекстЗапроса", 		ЭтотОбъект.ТекстЗапроса.ПолучитьТекст());
	СтруктураЗапроса.Вставить("ПараметрыЗапроса", 	ЭтотОбъект.ПараметрыЗапроса.Выгрузить());
	СтруктураЗапроса.Вставить("ВремТаблицы", 		ЭтотОбъект.ВремТаблицы.Выгрузить());
	СтруктураЗапроса.Вставить("Инструкция", 		Новый Структура("ПрограммныйКод, ФлагПеременнаяЗапрос", ЭтотОбъект.ПрограммныйКод.ПолучитьТекст(), ЭтотОбъект.ФлагПеременнаяЗапрос));
	Возврат СтруктураЗапроса;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДанныеЗапроса(Знач СтруктураЗапроса)
	
	ЭтотОбъект.ТекстЗапроса.УстановитьТекст(СтруктураЗапроса.ТекстЗапроса);
	ЭтотОбъект.ПараметрыЗапроса.Загрузить(СтруктураЗапроса.ПараметрыЗапроса);
	ЭтотОбъект.ВремТаблицы.Загрузить(СтруктураЗапроса.ВремТаблицы);
	Если СтруктураЗапроса.Свойство("Инструкция") Тогда //После обновления
		ЭтотОбъект.ПрограммныйКод.УстановитьТекст(СтруктураЗапроса.Инструкция.ПрограммныйКод);
		ЭтотОбъект.ФлагПеременнаяЗапрос = СтруктураЗапроса.Инструкция.ФлагПеременнаяЗапрос;
	Иначе
		ЭтотОбъект.ПрограммныйКод.УстановитьТекст("");
		ЭтотОбъект.ФлагПеременнаяЗапрос = Ложь;
	КонецЕсли;
	ЭтотОбъект.КоличествоПараметровВТ = ЭтотОбъект.ПараметрыЗапроса.Количество() + ЭтотОбъект.ВремТаблицы.Количество();
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.КоличествоТаблиц = 0;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьНовыеДанныеЗапроса()
	
	ЭтотОбъект.ТекстЗапроса.Очистить();
	ЭтотОбъект.ПараметрыЗапроса.Очистить();
	ЭтотОбъект.ВремТаблицы.Очистить();
	ЭтотОбъект.КоличествоПараметровВТ = 0;
	ЭтотОбъект.РезультатТабличныйДокумент.Очистить();
	ЭтотОбъект.КоличествоТаблиц = 0;
	
КонецПроцедуры

&НаСервере
Функция ДеревоЗапросов_ДеревоЗначений(Знач Идентификатор = Неопределено)
	
	ДЗ = Новый ДеревоЗначений();
	ДЗ.Колонки.Добавить("Наименование");
	ДЗ.Колонки.Добавить("Исключение");
	ДЗ.Колонки.Добавить("СтруктураЗапроса");
	
	Если Идентификатор = Неопределено Тогда
		ДФКЭД = ЭтотОбъект.ДеревоЗапросов.ПолучитьЭлементы();
	Иначе
		ИскомаяСтрока = ДеревоЗапросов_НайтиПоИдентификатору(ЭтотОбъект, Идентификатор);
		ДФКЭД = Новый Массив(); 
		ДФКЭД.Добавить(ИскомаяСтрока);
	КонецЕсли;
	
	ДеревоЗапросов_ВыгрузитьДеревоЗапросов(ДЗ, ДФКЭД);
	
	Возврат ДЗ;
	
КонецФункции

&НаСервере
Процедура ДеревоЗапросов_ВыгрузитьДеревоЗапросов(ДЗ, Знач ДФКЭД)
	
	Для Каждого Строка Из ДФКЭД Цикл
		НовСтр = ДЗ.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка, "Наименование, Исключение");
		НовСтр.Наименование = Строка.Наименование;
		НовСтр.СтруктураЗапроса = ДанныеЗапроса_КопияДанныхЗапроса(Строка.Адрес);
		ДанныеЗапроса_ВыгрузитьТаблицыЗначений(НовСтр.СтруктураЗапроса.ПараметрыЗапроса);
		ДанныеЗапроса_ВыгрузитьТаблицыЗначений(НовСтр.СтруктураЗапроса.ВремТаблицы);
		ПодчДФКЭД = Строка.ПолучитьЭлементы();
		Если ПодчДФКЭД.Количество() > 0 Тогда
			ДеревоЗапросов_ВыгрузитьДеревоЗапросов(НовСтр, ПодчДФКЭД);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ДФКЭД, Знач ДЗ)
	
	Для Каждого Строка Из ДЗ.Строки Цикл
		НовСтр = ДФКЭД.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка, "Наименование, Исключение");
		НовСтр.Идентификатор 	= НовСтр.ПолучитьИдентификатор();
		ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Строка.СтруктураЗапроса.ПараметрыЗапроса);
		ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Строка.СтруктураЗапроса.ВремТаблицы);
		НовСтр.Адрес = ПоместитьВоВременноеХранилище(Строка.СтруктураЗапроса, ЭтотОбъект.УникальныйИдентификатор);
		//После обновления+
		ТЗ = Строка.СтруктураЗапроса.ПараметрыЗапроса;
		Если ТЗ.Колонки.Найти("ФлагСЗ") = Неопределено И ТЗ.Колонки.Найти("Расширение") <> Неопределено Тогда
			ТЗ.Колонки.Добавить("ФлагСЗ");
			ТЗ.Колонки.Добавить("ФлагГраница");
			ТЗ.Колонки.Добавить("ВидГраницы");
			Для Каждого СтрокаТЗ Из ТЗ Цикл
				Если СтрокаТЗ.Расширение = "Список значений" Тогда
					СтрокаТЗ.ФлагСЗ = Истина;
				ИначеЕсли Найти(СтрокаТЗ.Расширение, "Дата") > 0 Или Найти(СтрокаТЗ.Расширение, "Момент") > 0 Тогда
					СтрокаТЗ.ФлагГраница = Истина;
					СтрокаТЗ.ВидГраницы = СтрокаТЗ.Расширение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//После обновления-
		Если Строка.Строки.Количество() > 0 Тогда
			ПодчДФКЭД = НовСтр.ПолучитьЭлементы();
			ДеревоЗапросов_ЗагрузитьДеревоЗапросов(ПодчДФКЭД, Строка);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеЗапроса

&НаСервере
Процедура ДанныеЗапроса_ВыгрузитьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(Строка.Значение) Тогда
			Строка.Значение = ПолучитьИзВременногоХранилища(Строка.Значение);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ДанныеЗапроса_ЗагрузитьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И ТипЗнч(Строка.Значение) = Тип("ТаблицаЗначений") Тогда
			Строка.Значение = ПоместитьВоВременноеХранилище(Строка.Значение, УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура ДанныеЗапроса_СкопироватьТаблицыЗначений(Таблица)
	
	Для Каждого Строка Из Таблица Цикл
		Если Строка.ТипЗначения = "Таблица значений" И Не ПустаяСтрока(Строка.Значение) Тогда
			ТЗ = ПолучитьИзВременногоХранилища(Строка.Значение);
			Строка.Значение = ПоместитьВоВременноеХранилище(ТЗ.Скопировать(), УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Функция ДанныеЗапроса_СкопироватьДанныеЗапроса(Знач АдресИсточник)
	
	Источник = ПолучитьИзВременногоХранилища(АдресИсточник);
	Приемник = Новый Структура();
	Приемник.Вставить("ТекстЗапроса", 		Источник.ТекстЗапроса);
	Приемник.Вставить("ПараметрыЗапроса", 	Источник.ПараметрыЗапроса.Скопировать());
	Приемник.Вставить("ВремТаблицы", 		Источник.ВремТаблицы.Скопировать());
	ДанныеЗапроса_СкопироватьТаблицыЗначений(Источник.ПараметрыЗапроса);
	ДанныеЗапроса_СкопироватьТаблицыЗначений(Источник.ВремТаблицы);
	АдресПриемник  = ПоместитьВоВременноеХранилище(Приемник, ЭтотОбъект.УникальныйИдентификатор);
	Возврат АдресПриемник; 
	
КонецФункции

&НаСервере
Функция ДанныеЗапроса_КопияДанныхЗапроса(Знач АдресИсточник)
	
	Источник = ПолучитьИзВременногоХранилища(АдресИсточник);
	Приемник = Новый Структура();
	Приемник.Вставить("ТекстЗапроса", 		Источник.ТекстЗапроса);
	Приемник.Вставить("ПараметрыЗапроса", 	Источник.ПараметрыЗапроса.Скопировать());
	Приемник.Вставить("ВремТаблицы", 		Источник.ВремТаблицы.Скопировать());
	Если Источник.Свойство("Инструкция") Тогда //После обновления
		Приемник.Вставить("Инструкция", Источник.Инструкция);
	КонецЕсли;
	
	Возврат Приемник; 
	
КонецФункции

#КонецОбласти

#Область Результат

&НаСервере
Процедура Результат_ВывестиЗапрос(СтруктураРезультата)
	
	Результат_ВывестиВыборку(СтруктураРезультата, СтруктураРезультата.Результат, 0, Истина);
	
	СтруктураРезультата.КоличествоТаблиц = 1;
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиПакетСоСхемойЗапроса(СтруктураРезультата)
	
	ПакетЗапросов = СтруктураРезультата.СхемаЗапроса.ПакетЗапросов;
	
	ИндексЗапроса = 0;
	
	Для Каждого ЭлементКоллекции Из ПакетЗапросов Цикл
		
		РезультатЗапроса 	= СтруктураРезультата.Результат[ИндексЗапроса];	
		Открыта				= ((ИндексЗапроса + 1) = ПакетЗапросов.Количество());
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") И ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта);
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") И Не ПустаяСтрока(ЭлементКоллекции.ТаблицаДляПомещения) Тогда
			Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта, ЭлементКоллекции.ТаблицаДляПомещения);
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Результат_ВывестиУничтожениеВТ(СтруктураРезультата, ИндексЗапроса, ЭлементКоллекции.ИмяТаблицы);
		КонецЕсли;
		
		ИндексЗапроса = ИндексЗапроса + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.КоличествоТаблиц = ПакетЗапросов.Количество();
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиПакетБезСхемыЗапроса(СтруктураРезультата)
	
	ПакетЗапросов = СтруктураРезультата.Результат;
	
	ИндексЗапроса = 0;
	
	Для Каждого РезультатЗапроса Из ПакетЗапросов Цикл
		
		Если РезультатЗапроса = Неопределено Тогда
			Результат_ВывестиУничтожениеВТ(СтруктураРезультата, ИндексЗапроса, "");
			Продолжить;
		КонецЕсли;
		
		Открыта	= ((ИндексЗапроса + 1) = ПакетЗапросов.Количество());
		
		Результат_ВывестиВыборку(СтруктураРезультата, РезультатЗапроса, ИндексЗапроса, Открыта);
		
		ИндексЗапроса = ИндексЗапроса + 1;
		
	КонецЦикла;
	
	СтруктураРезультата.КоличествоТаблиц = ПакетЗапросов.Количество();
		
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиЗаголовки(СтруктураРезультата, Знач Заголовки)
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	
	Для Каждого Строка Из Заголовки Цикл
		ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Строка;	
		СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	КонецЦикла;
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиВыборку(СтруктураРезультата, Знач РезультатЗапроса, Знач ИндексЗапроса, Знач Открыта = Истина, Знач ИмяВТ = "")
	
	ТабДок = Новый ТабличныйДокумент();
	
	ТабДок.НачатьАвтогруппировкуСтрок();
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	Выборка 		= РезультатЗапроса.Выбрать();
	СтрокВыборки	= Выборка.Количество();
	КоличествоСтрок = СтрокВыборки;
	Если ЭтотОбъект.НастройкаМаксКоличествоСтрок > 0 Тогда
		Если КоличествоСтрок > 0 Тогда
			КоличествоСтрок = ?(КоличествоСтрок < ЭтотОбъект.НастройкаМаксКоличествоСтрок, КоличествоСтрок, ЭтотОбъект.НастройкаМаксКоличествоСтрок);
		КонецЕсли;
	КонецЕсли;
	
	Наименование = "Запрос " + ИндексЗапроса;	
	Если Не ПустаяСтрока(ИмяВТ) Тогда
		Наименование = Наименование + " (" + ИмяВТ + ")";
	КонецЕсли;	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Наименование + ": " + КоличествоСтрок + " из " + СтрокВыборки;	
	ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	ТекущийУровень = ?(Открыта, 0, 1);
	ТабДок.Вывести(ПараметрыМакета.ОбластьШапкаПерваяКолонка, ТекущийУровень, , Открыта);
	
	Если ЭтотОбъект.НастройкаВыводитьСвойстваВыборки Тогда
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаТипЗаписи, ТекущийУровень, , Открыта);
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаУровень, ТекущийУровень, , Открыта);
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаГруппировка, ТекущийУровень, , Открыта);
	КонецЕсли;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ПараметрыМакета.ОбластьШапкаЗначение.Параметры.Значение = Колонка.Имя;
		ТабДок.Присоединить(ПараметрыМакета.ОбластьШапкаЗначение, ТекущийУровень, , Открыта);
	КонецЦикла;	
	
	НомерСтроки = 1;
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийУровень = Выборка.Уровень() + ?(Открыта, 0, Истина);
		
		ТабДок.Вывести(ПараметрыМакета.ОбластьПерваяКолонка, ТекущийУровень);
		
		Если ЭтотОбъект.НастройкаВыводитьСвойстваВыборки Тогда
			
			ПараметрыМакета.ОбластьТипЗаписи.Параметры.ТипЗаписи = Выборка.ТипЗаписи();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьТипЗаписи, ТекущийУровень);
			
			ПараметрыМакета.ОбластьУровень.Параметры.Уровень = Выборка.Уровень();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьУровень, ТекущийУровень);
			
			ПараметрыМакета.ОбластьГруппировка.Параметры.Группировка = Выборка.Группировка();
			ТабДок.Присоединить(ПараметрыМакета.ОбластьГруппировка, ТекущийУровень);
		
		КонецЕсли;
		
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Результат_ПрименитьОформление(ПараметрыМакета, Выборка[Колонка.Имя]);
			ТабДок.Присоединить(ПараметрыМакета.ОбластьЗначение, ТекущийУровень);			
		КонецЦикла;
		
		Если ЭтотОбъект.НастройкаМаксКоличествоСтрок > 0 И НомерСтроки >= ЭтотОбъект.НастройкаМаксКоличествоСтрок Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;		
		
	КонецЦикла;
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);	
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	Результат_УстановитьШиринуКолонок(ТабДок);
	
	СтруктураРезультата.ТабДок.Вывести(ТабДок);
	
КонецПроцедуры

&НаСервере
Процедура Результат_ВывестиУничтожениеВТ(СтруктураРезультата, Знач ИндексЗапроса, Знач ИмяВТ)
	
	ПараметрыМакета = СтруктураРезультата.ПараметрыМакета;
	
	СтруктураРезультата.ТабДок.НачатьАвтогруппировкуСтрок();
	
	Наименование = "Запрос " + ИндексЗапроса + " (уничтожение " + ИмяВТ + ") ";
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = Наименование;	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	ПараметрыМакета.ОбластьЗаголовокВТ.Параметры.ЗаголовокВТ = "";	
	СтруктураРезультата.ТабДок.Вывести(ПараметрыМакета.ОбластьЗаголовокВТ, 0);
	
	СтруктураРезультата.ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
КонецПроцедуры

&НаСервере
Процедура Результат_ПрименитьОформление(ПараметрыМакета, Значение)
	
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "РезультатЗапроса";
	ИначеЕсли Значение = Null Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "NULL";
	ИначеЕсли Значение = Неопределено Тогда
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = "НЕОПРЕДЕЛЕНО";
	Иначе
		ПараметрыМакета.ОбластьЗначение.Параметры.Значение = Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("РезультатЗапроса") Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаРезультатЗапроса;			
	ИначеЕсли Значение = Null Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаNull;
	ИначеЕсли Значение = Неопределено Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаНеопределено;				
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветФона 	= ПараметрыМакета.ЦветФонаОбычный;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("Число") И Значение < 0 И ЭтотОбъект.НастройкаВыделятьОтрицательные Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветТекста = ПараметрыМакета.ЦветТекстОтр;
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.ЦветТекста = ПараметрыМакета.ЦветТекстОбычный;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("Число") И Не ПустаяСтрока(ЭтотОбъект.НастройкаФорматЧисла) Тогда
		ПараметрыМакета.ОбластьЗначение.Области.Значение.Формат = ЭтотОбъект.НастройкаФорматЧисла;
	Иначе
		ПараметрыМакета.ОбластьЗначение.Области.Значение.Формат = "";
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура Результат_УстановитьШиринуКолонок(ТабДок)
	
	МинШирина = 17;
	НачСтрока = 2;
	
	КоличествоСтрок = ТабДок.ВысотаТаблицы;
	ТабДок.Область(НачСтрока, , КоличествоСтрок-1, ).СоздатьФорматСтрок();
	Для НомерКолонки = НачСтрока По ТабДок.ШиринаТаблицы Цикл
		ОбластьЯчеекШапки = ТабДок.Область(НачСтрока, НомерКолонки, НачСтрока, НомерКолонки);
		ШиринаКолонки 	= МинШирина;
		Для НомерСтроки = НачСтрока По КоличествоСтрок Цикл
			ОбластьЯчеек = ТабДок.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
			Ширина = ОбластьЯчеек.Отступ + СтрДлина(ОбластьЯчеек.Текст);
			Если Ширина > ШиринаКолонки Тогда
				ШиринаКолонки = Ширина;
			КонецЕсли;
		КонецЦикла;
		Если ЭтотОбъект.НастройкаМаксШиринаКолонок > 0 И ШиринаКолонки > ЭтотОбъект.НастройкаМаксШиринаКолонок Тогда
			ШиринаКолонки = ЭтотОбъект.НастройкаМаксШиринаКолонок;
		КонецЕсли;
		ОбластьЯчеекШапки.ШиринаКолонки = ШиринаКолонки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Запросы

&НаСервереБезКонтекста
Функция Запросы_СписокОписанийВТИзТекстаЗапроса(Знач ТекстЗапроса)
	
	Результат = Новый Соответствие();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ЭлементКоллекции Из СхемаЗапроса.ПакетЗапросов Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(ЭлементКоллекции, Результат);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(Запрос, Результат)
	
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
			Источник = ИсточникСхемыЗапроса.Источник;
			Если ТипЗнч(Источник) = Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
				ТЗ = Результат.Получить(Источник.ИмяТаблицы);
				Если ТЗ = Неопределено Тогда
					ТЗ = Новый ТаблицаЗначений();
					Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник);
					Результат.Вставить(Источник.ИмяТаблицы, ТЗ);
				Иначе
					Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				Запросы_ВыгрузитьСписокОписанийВТИзЗапроса(Источник.Запрос, Результат);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Запросы_НоваяТЗИзОписанияВТ(ТЗ, Источник)
	
	Для Каждого ЭлементКоллекции Из Источник.ДоступныеПоля Цикл
		Имя = ЭлементКоллекции.Имя; 
		МассивСтрок = СтрРазделить(ЭлементКоллекции.Имя, ".");
		Если МассивСтрок.Количество() > 0 Тогда
			Имя = МассивСтрок[0];
		КонецЕсли;
		Если ТЗ.Колонки.Найти(Имя) = Неопределено Тогда
			ТЗ.Колонки.Добавить(Имя, ЭлементКоллекции.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура Запросы_ЗагрузитьВТ(МенеджерВТ, Знач ИмяВТ, Знач ТЗ)
	
	Запросы_ПроверитьТЗНаПомещение(ТЗ);
	
	КоличествоКолонок = ТЗ.Колонки.Количество();
	
	ТекстДок = Новый ТекстовыйДокумент();
	ТекстДок.ДобавитьСтроку("ВЫБРАТЬ");
	
	НомерКолонки = 1;
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Постфикс = ?(НомерКолонки = КоличествоКолонок, "", ",");
		ТекстДок.ДобавитьСтроку(Символы.Таб + "ТЗ." + Колонка.Имя + Постфикс);
		НомерКолонки = НомерКолонки + 1;
	КонецЦикла;
	
	ТекстДок.ДобавитьСтроку("ПОМЕСТИТЬ " + ИмяВТ);
	ТекстДок.ДобавитьСтроку("ИЗ");
	ТекстДок.ДобавитьСтроку(Символы.Таб + "&ТЗ КАК ТЗ");
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("ТЗ", ТЗ);
	Запрос.Текст = ТекстДок.ПолучитьТекст();
	Запрос.Выполнить();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура Запросы_ПроверитьТЗНаПомещение(ТЗ)
	
	ЗаменяемыеКолонки = Новый Массив();
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл
		Если Колонка.ТипЗначения.Типы().Количество() = 0 Тогда
			ЗаменяемыеКолонки.Добавить(Колонка.Имя);			
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаменяемыеКолонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = ТЗ.Скопировать();
	
	Итер = ЗаменяемыеКолонки.Количество()-1;
	Пока Итер >= 0 Цикл
		ИмяКолонки 		= ЗаменяемыеКолонки[Итер];
		ПрежняяКолонка  = ТЗ.Колонки[ИмяКолонки];
		Описание 		= Новый ОписаниеТипов(ПрежняяКолонка.ТипЗначения, "Null,Число");
		МассивЗначений 	= ТЗ.ВыгрузитьКолонку(ПрежняяКолонка);
		ТЗ.Колонки.Удалить(ПрежняяКолонка);                                             			
		НоваяКолонка	= ТЗ.Колонки.Добавить(ИмяКолонки, Описание);
		ТЗ.ЗагрузитьКолонку(МассивЗначений, НоваяКолонка);
		Итер = Итер-1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Запросы_ТипИзОписанияТипов(Знач Значение) 
	
	Результат = Тип("Неопределено");
	
	Если ТипЗнч(Значение) = Тип("ОписаниеТипов") Тогда
		МассивТипов = Значение.Типы();
		Если МассивТипов.Количество() = 0 Тогда
			Результат = Тип("Неопределено");
		ИначеЕсли МассивТипов.Количество() = 1 Тогда
			Результат = МассивТипов[0];
		Иначе
			Результат = Новый СписокЗначений();
			Результат.ЗагрузитьЗначения(МассивТипов);
		КонецЕсли;		
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементСписка Из Значение Цикл
			ЗначениеПараметра = Запросы_ТипИзОписанияТипов(ЭлементСписка.Значение);
			Если ТипЗнч(ЗначениеПараметра) = Тип("Тип") Тогда
				Результат.Добавить(ЗначениеПараметра);
			ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ЗначениеПараметра Цикл
					Результат.Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Запросы_МоментВремениИзСсылки(Знач Значение)
	
	Результат = Неопределено;
	
	Если ТипЗнч(Значение) <> Тип("СписокЗначений") Тогда
		Результат = Значение.МоментВремени();			
	Иначе
		Результат = Новый СписокЗначений();
		Для Каждого ЭлементСписка Из Значение Цикл
			Результат.Добавить(ЭлементСписка.Значение.МоментВремени());
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
			
КонецФункции

#КонецОбласти

#Область ТипыЗначений

&НаКлиенте
Процедура ТипыЗначений_УстановитьОграничениеТипа(Элемент, ТекДанные)
	
	Если (ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент")) > 0
		Или (ТипЗнч(ТекДанные.ТипЗначения) = Тип("ОписаниеТипов") И ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени"))) Тогда
		Элемент.ОграничениеТипа = ЭтотОбъект.ОписаниеТиповДокумент;
	ИначеЕсли ТекДанные.ТипЗначения = "Таблица значений" Тогда
		Элемент.ОграничениеТипа = ЭтотОбъект.ОписаниеТиповСтрока;
	ИначеЕсли ТекДанные.ФлагСЗ Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
	Иначе
		Элемент.ОграничениеТипа = ТекДанные.ТипЗначения;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ТипыЗначений_ПривестиЗначениеПоТипуЗначения(ТекДанные)
	
	Если (ТекДанные.ФлагГраница И Найти(ТекДанные.ВидГраницы, "Момент")) > 0
		Или ТекДанные.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповДокумент.ПривестиЗначение(ТекДанные.Значение);
	ИначеЕсли ТекДанные.ТипЗначения = "Таблица значений" Тогда
		ТекДанные.Значение = ЭтотОбъект.ОписаниеТиповСтрока.ПривестиЗначение(ТекДанные.Значение);
	Иначе
		ТекДанные.Значение = ТекДанные.ТипЗначения.ПривестиЗначение(ТекДанные.Значение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

