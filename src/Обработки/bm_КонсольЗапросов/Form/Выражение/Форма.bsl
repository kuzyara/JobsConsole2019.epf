
#Область СвойстваЭлементовФормы

	//Элементы.ФормаСохранитьБезПроверки.ПоложениеВКоманднойПанели=ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	//Элементы.ИсточникиДоступныеПоля.Шапка = Ложь
	//Элементы.ИсточникиДоступныеПоля.ИзменятьСоставСтрок = Ложь;
	//Элементы.ИсточникиДоступныеПоля.ИзменятьПорядокСтрок = Ложь;
	//Элементы.ИсточникиДоступныеПоляЗначение.ТолькоПросмотр = Истина;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
  	Форма_НастроитьФорму();
	
	НастройкаВыражения_ЗагрузитьСервер(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// bookmark
	Если ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Количество() = 1 Тогда
		Элементы.ИсточникиДоступныеПоля.Развернуть(ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

#Область ИсточникиДоступныеПоля

&НаКлиенте
Процедура ИсточникиДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИсточникиДоступныеПоля_РазвернутьДоступныеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникиДоступныеПоляНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Идентификатор = ПараметрыПеретаскивания.Значение[0];
	ТекДанные = ЭтотОбъект.ИсточникиДоступныеПоля.НайтиПоИдентификатору(Идентификатор);
	ПараметрыПеретаскивания.Значение = ИсточникиДоступныеПоля_ВыражениеДоступногоПоля(ТекДанные);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ОК(Команда)
	
	ПараметрЗакрытия = Новый Структура();
	ПараметрЗакрытия.Вставить("Выражение", СокрЛП(ЭтотОбъект.ВыражениеДокумент.ПолучитьТекст()));
	Если ЭтотОбъект.ТаблицаФормы = "ВыбираемыеПоля" Тогда
		ПараметрЗакрытия.Вставить("ЭтоВТ", 			Ложь);
		ПараметрЗакрытия.Вставить("ТипЗначения", 	Неопределено);
		ПараметрЗакрытия.Вставить("Псевдоним", 		"");
		ПараметрЗакрытия.Вставить("САФ", 			Ложь);
	КонецЕсли;
	
	Попытка
		НастройкаОператора_ПроверитьВыражение(ПараметрЗакрытия);
		ЭтотОбъект.Закрыть(ПараметрЗакрытия);
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ЭтотОбъект.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьБезПроверки(Команда)
	
	ПараметрЗакрытия = Новый Структура();
	ПараметрЗакрытия.Вставить("Выражение", СокрЛП(ЭтотОбъект.ВыражениеДокумент.ПолучитьТекст()));
	Если ЭтотОбъект.ТаблицаФормы = "ВыбираемыеПоля" Тогда
		ПараметрЗакрытия.Вставить("ЭтоВТ", 			Ложь);
		ПараметрЗакрытия.Вставить("ТипЗначения", 	Неопределено);
		ПараметрЗакрытия.Вставить("Псевдоним", 		"");
		ПараметрЗакрытия.Вставить("САФ", 			Ложь);
	КонецЕсли;
	
	ЭтотОбъект.Закрыть(ПараметрЗакрытия);
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДоступныеПоля(Команда)
	
	ИсточникиДоступныеПоля_РазвернутьДоступныеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекст(Команда)
	
	ЭтотОбъект.ВыражениеДокумент.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыделенныйТекст(Команда)
	
	Элементы.ВыражениеДокумент.ВыделенныйТекст = "";
	
КонецПроцедуры

#КонецОбласти  

#Область Форма

&НаСервере
Процедура Форма_НастроитьФорму()
	
	ЭтотОбъект.ПеречислениеТипСтроки = Новый Структура();
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("Источник", 		"Источник");
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("ДоступноеПоле", 	"ДоступноеПоле");
	ЭтотОбъект.ПеречислениеТипСтроки.Вставить("ВыбираемоеПоле", "ВыбираемоеПоле");
	
	ЭтотОбъект.ПеречислениеТипИсточника = Новый Структура();
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ТаблицаСхемыЗапроса", 					"ТаблицаСхемыЗапроса");
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ВложенныйЗапросСхемыЗапроса", 			"ВложенныйЗапросСхемыЗапроса");
	ЭтотОбъект.ПеречислениеТипИсточника.Вставить("ОписаниеВременнойТаблицыСхемыЗапроса", 	"ОписаниеВременнойТаблицыСхемыЗапроса");
	
	ЭтотОбъект.ПеречислениеТипТаблицы = Новый Структура();
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ОбычнаяТаблица", 	"ОбычнаяТаблица");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ТабличнаяЧасть", 	"ТабличнаяЧасть");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ВиртТаблица", 		"ВиртТаблица");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("Изменения", 		"Изменения");
	ЭтотОбъект.ПеречислениеТипТаблицы.Вставить("ВремТаблица", 		"ВремТаблица");
	
	ЭтотОбъект.ПеречислениеКартинки = Новый Структура();
	ЭтотОбъект.ПеречислениеКартинки.Вставить("ВиртТаблица", 				Элементы.КартинкаВиртТаблица.Картинка);	
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Последовательность", 			Элементы.КартинкаПоследовательность.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("ЗапросВыбораСхемыЗапроса", 	Элементы.КартинкаЗапросВыбораСхемыЗапроса.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Оператор", 					Элементы.КартинкаОператор.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("Функция", 					Элементы.КартинкаФункция.Картинка);
	ЭтотОбъект.ПеречислениеКартинки.Вставить("ВложЗапрос", 					Элементы.КартинкаВложЗапрос.Картинка);
	
	ОписаниеКоллекций_Заполнить();
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаВыражения

&НаСервере
Функция НастройкаВыражения_ЗагрузитьСервер(Знач ПараметрыОткрытия)
	
	ЭтотОбъект.СхемаЗапросаВХ 			= ПараметрыОткрытия.СхемаЗапросаВХ;
	ЭтотОбъект.ПараметрСтруктураСтроки 	= ПараметрыОткрытия.ПараметрСтруктураСтроки;
	ЭтотОбъект.ТаблицаФормы 			= ПараметрыОткрытия.ТаблицаФормы;
	ЭтотОбъект.ВыражениеДокумент.УстановитьТекст(ПараметрыОткрытия.Выражение);
	Если Параметры.Свойство("СтруктураВыражения") Тогда
		ЭтотОбъект.СтруктураВыражения = ПараметрыОткрытия.СтруктураВыражения;
	КонецЕсли;
			
	Источники = ПараметрыОткрытия.Источники;
	Если Параметры.ТаблицаФормы <> "Параметры" Тогда
		КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
		Для Каждого Строка Из Источники Цикл
			НовСтр = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Строка);
			ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.НайтиПоПсевдониму(НовСтр.Псевдоним);
			ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(НовСтр, ИсточникСхемыЗапроса.Источник);
		КонецЦикла;
	Иначе 
		НовСтр = ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы().Добавить();
		ИскомаяСтрока = НайтиСтрокуКоллекции(Источники, ЭтотОбъект.СтруктураВыражения.Псевдоним, "Псевдоним");
		ЗаполнитьЗначенияСвойств(НовСтр, ИскомаяСтрока);
		ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляУсловия(НовСтр, ЭтотОбъект.СтруктураВыражения.ДоступныеПоля);
		Элементы.ИсточникиДоступныеПоля.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастройкаОператора_ПроверитьВыражение(ПараметрЗакрытия)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	
	// При добавлении поля с функцией может не сработать, если есть группировка по этому полю
	Оператор.Группировки.Очистить();
	
	ВыражениеСтрока = ПараметрЗакрытия.Выражение;
		
	Попытка
		
		Если ЭтотОбъект.ТаблицаФормы = "ВыбираемыеПоля" Тогда
			
			//Исключение не срабатывает+ Уходит в дамп
			// Поэтому проверка через добавление
			//ВыражениеСхемыЗапроса = Новый ВыражениеСхемыЗапроса(ВыражениеСтрока);
			//Оператор.ВыбираемыеПоля[ЭтотОбъект.СтруктураВыражения.ИндексСтроки] = ВыражениеСхемыЗапроса;
			//Оператор.ВыбираемыеПоля.Установить(ЭтотОбъект.СтруктураВыражения.ИндексСтроки, ВыражениеСхемыЗапроса);
			//Исключение не срабатывает-
			
			ТекКоличество = Оператор[ТаблицаФормы].Количество();
			
			Элемент = Оператор[ТаблицаФормы].Добавить(ВыражениеСтрока);
			
			Если ТипЗнч(Элемент) = Тип("ВыражениеСхемыЗапроса") Тогда
				
				СтруктураКолонки = СхемаЗапроса_ПолучитьСтруктуруКолонки(Запрос, Элемент);
				ПараметрЗакрытия.Псевдоним = СтруктураКолонки.Псевдоним;
				ТипЗначения = СтруктураКолонки.ТипЗначения;
				ЭтоВТ = СтрНайти(Строка(ТипЗначения), "табличная часть") > 0;
				Если ЭтоВТ Тогда
					ПараметрЗакрытия.Выражение 	= Строка(Элемент);
					ПараметрЗакрытия.ЭтоВТ 		= Истина;
				Иначе
					ПараметрЗакрытия.Выражение 		= Строка(Элемент);
					ПараметрЗакрытия.ТипЗначения 	= ТипЗначения; 
					ПараметрЗакрытия.САФ 			= Элемент.СодержитАгрегатнуюФункцию();
				КонецЕсли;
								
			Иначе // ?                  
				ПараметрЗакрытия.Выражение 		= Элемент.Имя;
				ПараметрЗакрытия.ЭтоВТ 			= Истина;			
			КонецЕсли;
			
		ИначеЕсли ЭтотОбъект.ТаблицаФормы = "Соединения"
			Или ЭтотОбъект.ТаблицаФормы = "Отбор" Тогда
			
			ТекКоличество = Оператор["Отбор"].Количество();
			
			Оператор["Отбор"].Добавить(ВыражениеСтрока);
			Индекс = Оператор["Отбор"].Количество() - 1;
			
			Элемент = Оператор["Отбор"][Индекс];
			ПараметрЗакрытия.Выражение = Строка(Элемент);
			
		ИначеЕсли ЭтотОбъект.ТаблицаФормы = "Параметры" Тогда
			
			Источник = Оператор.Источники.НайтиПоПсевдониму(ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы()[0].Значение).Источник;
			Источник.Параметры[ЭтотОбъект.СтруктураВыражения.Индекс].Выражение = Новый ВыражениеСхемыЗапроса(ВыражениеСтрока);
			
			//Текст запроса может быть изменен+          
			ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				Оператор.ВыбираемыеПоля.Добавить("NULL");
				ТекстЗапроса = Запрос.ПолучитьТекстЗапроса();
			КонецЕсли;
			Запрос.УстановитьТекстЗапроса(ТекстЗапроса);
			Оператор = Запрос.Операторы[ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора];
			Источник = Оператор.Источники.НайтиПоПсевдониму(ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы()[0].Значение).Источник;
			//Текст запроса может быть изменен-
	
			ПараметрЗакрытия.Выражение = Строка(Источник.Параметры[ЭтотОбъект.СтруктураВыражения.Индекс].Выражение); 
			
		ИначеЕсли ЭтотОбъект.ТаблицаФормы = "Порядок"
			Или ЭтотОбъект.ТаблицаФормы = "КонтрольныеТочкиИтогов" Тогда
			
			ТекКоличество = Запрос[ТаблицаФормы].Количество();
			
			Запрос[ТаблицаФормы].Добавить(ВыражениеСтрока);
			Если Запрос[ТаблицаФормы].Количество() = ТекКоличество Тогда
				ВызватьИсключение("Выражение не добавлено");
			КонецЕсли;
			Индекс = Запрос[ТаблицаФормы].Количество() - 1;
			
			Элемент = Запрос[ТаблицаФормы][Индекс];
			ИмяКолонки = ?(ТаблицаФормы = "Порядок", "Элемент", "Выражение");
			Если ТипЗнч(Элемент[ИмяКолонки]) = Тип("ВыражениеСхемыЗапроса") Тогда 
				ПараметрЗакрытия.Выражение = Строка(Элемент[ИмяКолонки]);
			ИначеЕсли ТипЗнч(Элемент[ИмяКолонки]) = Тип("КолонкаСхемыЗапроса") Тогда 
				ПараметрЗакрытия.Выражение = Элемент[ИмяКолонки].Псевдоним;
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////
// Служебные функции

#Область ОписаниеКоллекций

&НаСервере
Процедура ОписаниеКоллекций_Заполнить()
	
	ОписаниеКоллекций_ДобавитьОписание("КритерииОтбора", 			"КритерийОтбора", 			БиблиотекаКартинок.КритерийОтбора);
	ОписаниеКоллекций_ДобавитьОписание("ПланыОбмена", 				"ПланОбмена", 				БиблиотекаКартинок.ПланОбмена, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Константы", 				"Константа", 				БиблиотекаКартинок.Константа);
	ОписаниеКоллекций_ДобавитьОписание("Справочники", 				"Справочник", 				БиблиотекаКартинок.Справочник, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Документы", 				"Документ", 				БиблиотекаКартинок.Документ, 				Истина);
	ОписаниеКоллекций_ДобавитьОписание("Последовательности", 		"Последовательность", 		ЭтотОбъект.ПеречислениеКартинки.Последовательность);
	ОписаниеКоллекций_ДобавитьОписание("ЖурналыДокументов", 		"ЖурналДокументов", 		БиблиотекаКартинок.ЖурналДокументов);
	ОписаниеКоллекций_ДобавитьОписание("Перечисления", 				"Перечисление", 			БиблиотекаКартинок.Перечисление);
	ОписаниеКоллекций_ДобавитьОписание("ПланыВидовХарактеристик", 	"ПланВидовХарактеристик", 	БиблиотекаКартинок.ПланВидовХарактеристик, 	Истина);
	ОписаниеКоллекций_ДобавитьОписание("ПланыСчетов", 				"ПланСчетов", 				БиблиотекаКартинок.ПланСчетов, 				Истина, Истина);
	ОписаниеКоллекций_ДобавитьОписание("ПланыВидовРасчета", 		"ПланВидовРасчета", 		БиблиотекаКартинок.ПланВидовРасчета, 		Истина, Истина);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыСведений", 			"РегистрСведений", 			БиблиотекаКартинок.РегистрСведений);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыНакопления", 		"РегистрНакопления", 		БиблиотекаКартинок.РегистрНакопления);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыБухгалтерии", 		"РегистрБухгалтерии", 		БиблиотекаКартинок.РегистрБухгалтерии);
	ОписаниеКоллекций_ДобавитьОписание("РегистрыРасчета", 			"РегистрРасчета", 			БиблиотекаКартинок.РегистрРасчета);
	ОписаниеКоллекций_ДобавитьОписание("Перерасчеты", 				"Перерасчет", 				БиблиотекаКартинок.Обновить);
	ОписаниеКоллекций_ДобавитьОписание("БизнесПроцессы", 			"БизнесПроцесс", 			БиблиотекаКартинок.БизнесПроцесс, 			Истина);
	ОписаниеКоллекций_ДобавитьОписание("Задачи", 					"Задача", 					БиблиотекаКартинок.Задача, 					Истина);
	ОписаниеКоллекций_ДобавитьОписание("ВнешниеИсточникиДанных", 	"ВнешнийИсточникДанных", 	БиблиотекаКартинок.ВнешнийИсточникДанных, 	Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОписаниеКоллекций_ДобавитьОписание(Знач ИмяМнч, Знач ИмяЕдч, Знач Картинка, Знач ЕстьТЧ = Ложь, Знач ЕстьСТЧ = Ложь)
	
	НовСтр = ЭтотОбъект.ОписаниеКоллекций.Добавить();
	НовСтр.ИмяМнч 	= ИмяМнч;
	НовСтр.ИмяЕдч 	= ИмяЕдч;
	НовСтр.Картинка = Картинка;
	НовСтр.ЕстьТЧ 	= ЕстьТЧ;
	НовСтр.ЕстьСТЧ 	= ЕстьСТЧ;
	
КонецПроцедуры

#КонецОбласти

#Область ИсточникиДоступныеПоля

&НаКлиенте
Процедура ИсточникиДоступныеПоля_РазвернутьДоступныеПоля()
	
	ТекДанные = Элементы.ИсточникиДоступныеПоля.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ТипСтроки <> ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле Тогда
		Возврат;
	КонецЕсли;
	
	Коллекция = ТекДанные.ПолучитьЭлементы();
	
	Если Коллекция.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
		
	МассивЗначений = Новый Массив();
	
	ИскомаяСтрока = ТекДанные;
	Пока ИскомаяСтрока <> Неопределено Цикл
		МассивЗначений.Добавить(ИскомаяСтрока.Значение);
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Если МассивЗначений.Количество() > 1 Тогда
		МассивДоступныхПолей = ИсточникиДоступныеПоля_МассивДоступныхПолей(МассивЗначений);
		Для Каждого Структура Из МассивДоступныхПолей Цикл
			НовСтр = Коллекция.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Структура);
			НовСтр.Картинка = БиблиотекаКартинок.Реквизит;
		КонецЦикла;
		Элементы.ИсточникиДоступныеПоля.Развернуть(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляИсточника(Знач Строка, Знач Источник)
	
	Для Каждого ДоступноеПоле Из Источник.ДоступныеПоля Цикл
		НовСтр = Строка.ПолучитьЭлементы().Добавить();
		НовСтр.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
		НовСтр.Имя 			= ДоступноеПоле.Имя;
		НовСтр.Значение 	= ДоступноеПоле.Имя;
		Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
			НовСтр.ЭтоВТ = Истина;
			Для Каждого ДоступноеПолеВТ Из ДоступноеПоле.Поля Цикл
				НовСтрВТ = НовСтр.ПолучитьЭлементы().Добавить();
				НовСтрВТ.ТипСтроки 		= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
				НовСтрВТ.Имя 			= ДоступноеПолеВТ.Имя;
				НовСтрВТ.Значение 		= ДоступноеПолеВТ.Имя;
				НовСтрВТ.ТипЗначения 	= ДоступноеПолеВТ.ТипЗначения;
				ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтрВТ, ДоступноеПолеВТ);
			КонецЦикла;
		Иначе
			НовСтр.ТипЗначения = ДоступноеПоле.ТипЗначения;
		КонецЕсли;
		ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтр, ДоступноеПоле);
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ИсточникиДоступныеПоля_ЗаполнитьДоступныеПоляУсловия(Знач ТекДанные, Знач ДоступныеПоля)
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();	
	ИсточникСхемыЗапроса = КурсорСЗ.Оператор.Источники.НайтиПоПсевдониму(ТекДанные.Псевдоним);
	
	Для Каждого ДоступноеПоле Из ИсточникСхемыЗапроса.Источник.ДоступныеПоля Цикл
		Если ДоступныеПоля.НайтиПоЗначению(ДоступноеПоле.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = ТекДанные.ПолучитьЭлементы().Добавить();
		НовСтр.ТипСтроки 	= ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле;
		НовСтр.Имя			= ДоступноеПоле.Имя;
		НовСтр.Значение 	= ДоступноеПоле.Имя;
		// Не обязательно?
		Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
			НовСтр.ЭтоВТ = Истина;
		Иначе
			НовСтр.ТипЗначения = ДоступноеПоле.ТипЗначения;
		КонецЕсли;
		ТаблицаФормы_УстановитьКартинкуДоступногоПоля(НовСтр, ДоступноеПоле);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИсточникиДоступныеПоля_МассивДоступныхПолей(Знач МассивЗначений)
	
	Результат = Новый Массив();
	
	КурсорСЗ = СхемаЗапроса_ПолучитьКурсорСЗ();
	Запрос 		= КурсорСЗ.Запрос;
	Оператор 	= КурсорСЗ.Оператор;
	
	Псевдоним = МассивЗначений[МассивЗначений.Количество() - 1];
	ИсточникСхемыЗапроса = Оператор.Источники.НайтиПоПсевдониму(Псевдоним);
	ДоступныеПоля = ИсточникСхемыЗапроса.Источник.ДоступныеПоля;
	
	Если ДоступныеПоля.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Итер = МассивЗначений.Количество() - 2;
	
	Пока Итер >= 0 Цикл
		ДоступноеПоле = ДоступныеПоля.Найти(МассивЗначений[Итер]);
		ДоступныеПоля = ДоступноеПоле.Поля;
		Если Итер = 0 Тогда
			Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл
				Структура = Новый Структура("ТипСтроки, Значение, ЭтоВТ, ТипЗначения", ЭтотОбъект.ПеречислениеТипСтроки.ДоступноеПоле, ДоступноеПоле.Имя);
				// Не обязательно?
				Если ТипЗнч(ДоступноеПоле) = Тип("ДоступнаяВложеннаяТаблицаСхемыЗапроса") Тогда
					Структура.ЭтоВТ = Истина;
				Иначе
					Структура.ТипЗначения = ДоступноеПоле.ТипЗначения;
				КонецЕсли;
				Результат.Добавить(Структура);			
			КонецЦикла;
			Возврат Результат;
		КонецЕсли;
		Итер = Итер - 1;		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция ИсточникиДоступныеПоля_ВыражениеДоступногоПоля(Знач ТекДанные)
	
	Если ТекДанные.ТипСтроки = ЭтотОбъект.ПеречислениеТипСтроки.ВыбираемоеПоле Тогда
		Возврат ТекДанные.Значение;
	КонецЕсли;	
	
	МассивЗначений = Новый Массив();	
	СодержитВТ     = Ложь;
	
	ИскомаяСтрока = ТекДанные;
	Пока ИскомаяСтрока <> Неопределено Цикл
		МассивЗначений.Добавить(ИскомаяСтрока.Значение);
		ИскомаяСтрока = ИскомаяСтрока.ПолучитьРодителя();
	КонецЦикла;
	
	Значение = "";
	Итер = МассивЗначений.Количество() - 1;
	ПерваяСтрока = Истина;
	Пока Итер >= 0 Цикл
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
		Иначе
			Значение = Значение + ".";
		КонецЕсли;
		Значение = Значение + МассивЗначений[Итер];
		Итер = Итер - 1;
	КонецЦикла;
	
	Если Найти(ЭтотОбъект.ИмяФормы, "Выражение") > 0 И ЭтотОбъект.ТаблицаФормы = "Параметры" Тогда
		Значение = ТекстПослеТочкиСНачала(Значение);
		Значение = Значение + " = &" + ТекстПослеТочкиСКонца(Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Функция ИсточникиДоступныеПоля_СведенияОЗначенииИсточника(Знач Значение)
	
	Результат = Новый Структура("Источник,ВТ,ТипПоля", "", "", "");
	
	МассивСтрок = СтрРазделить(Значение, ".");
	
	Для Каждого СтрокаИсточник Из ЭтотОбъект.ИсточникиДоступныеПоля.ПолучитьЭлементы() Цикл
		Если СтрокаИсточник.Значение = МассивСтрок[0] Тогда
			Результат.Источник = МассивСтрок[0];
			Если МассивСтрок.Количество() = 1 Тогда
				Результат.ТипПоля = "Источник";
				Возврат Результат;
			КонецЕсли;
			Для Каждого Строка Из СтрокаИсточник.ПолучитьЭлементы() Цикл
				Если Строка.Значение = МассивСтрок[1] Тогда
					Если Не Строка.ЭтоВТ Тогда
						Результат.ТипПоля = "ПолеИсточника";
					Иначе
						Результат.ВТ = МассивСтрок[1];
						Если МассивСтрок.Количество() = 2 Тогда
							Результат.ТипПоля = "ВТ";	         							
						Иначе
							Результат.ТипПоля = "ПолеВТ"; 
						КонецЕсли;
					КонецЕсли;
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ТаблицаФормы

&НаСервере
Процедура ТаблицаФормы_УстановитьКартинкуДоступногоПоля(Знач Строка, Знач ДоступноеПоле)
	
	Если Не Строка.ЭтоВТ Тогда
		Если ДоступноеПоле.Роль.Измерение Тогда
			Картинка = БиблиотекаКартинок.Измерение;
		ИначеЕсли ДоступноеПоле.Роль.Ресурс Тогда
			Картинка = БиблиотекаКартинок.Ресурс;						
		Иначе
			Картинка = БиблиотекаКартинок.Реквизит;
		КонецЕсли;
	Иначе
		Картинка = БиблиотекаКартинок.ВложеннаяТаблица;
	КонецЕсли;
	
	Строка.Картинка = Картинка;
	
КонецПроцедуры

#КонецОбласти

#Область СхемаЗапроса

&НаСервере
Функция СхемаЗапроса_ПолучитьКурсорСЗ()
	
	Возврат СхемаЗапроса_КурсорСЗ(ЭтотОбъект.СхемаЗапросаВХ, ЭтотОбъект.ПараметрСтруктураСтроки);
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_КурсорСЗ(Знач АдресВХ, Знач СтруктураСтроки)
	
	Результат = Новый Структура();
	СхемаЗапроса = ПолучитьИзВременногоХранилища(АдресВХ);
	ЗапросПакета 	= СхемаЗапроса.ПакетЗапросов[СтруктураСтроки.ИндексЗапроса]; 
	КурсорОператора = СхемаЗапроса_КурсорОператора(ЗапросПакета, СтруктураСтроки.ПозицияОператора);
	Результат.Вставить("СхемаЗапроса", 	СхемаЗапроса);
	Результат.Вставить("ЗапросПакета", 	ЗапросПакета);
	Результат.Вставить("Запрос", 		КурсорОператора.Запрос);
	Результат.Вставить("Оператор", 		КурсорОператора.Оператор);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СхемаЗапроса_КурсорОператора(Знач Запрос, Знач ПозицияОператора, ТекПозицияОператора = 0)
	
	Для Каждого Оператор Из Запрос.Операторы Цикл
		Если ТекПозицияОператора = ПозицияОператора Тогда
			Возврат Новый Структура("Запрос, Оператор", Запрос, Оператор);
		КонецЕсли;
		ТекПозицияОператора = ТекПозицияОператора + 1;
		Для Каждого ИсточникСхемыЗапроса Из Оператор.Источники Цикл
			Если ТипЗнч(ИсточникСхемыЗапроса.Источник) = Тип("ВложенныйЗапросСхемыЗапроса") Тогда
				Оператор = СхемаЗапроса_КурсорОператора(ИсточникСхемыЗапроса.Источник.Запрос, ПозицияОператора, ТекПозицияОператора);
				Если Оператор <> Неопределено Тогда
					Возврат Оператор;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СхемаЗапроса_ПолучитьСтруктуруКолонки(Знач Запрос, Знач ИскомоеВыражение)
	
	Резт = Новый Структура("ТипЗначения,Псевдоним", Неопределено, "Поле1");
	
	ИндексОператора = ЭтотОбъект.ПараметрСтруктураСтроки.ИндексОператора;
	
	Итер = Запрос.Колонки.Количество() - 1;
	Пока Итер >= 0 Цикл
		Колонка = Запрос.Колонки[Итер];
		Если ТипЗнч(Колонка) <> Тип("КолонкаВложеннаяТаблицаСхемыЗапроса") Тогда
			Если ИскомоеВыражение = Колонка.Поля[ИндексОператора] Тогда
				ЗаполнитьЗначенияСвойств(Резт, Колонка);
				Возврат Резт;
			КонецЕсли;
		Иначе     
			ИтерВТ = Колонка.Колонки.Количество() - 1;
			Пока ИтерВТ >= 0 Цикл
				КолонкаВТ = Колонка.Колонки[ИтерВТ];
				Если ИскомоеВыражение = КолонкаВТ.Поля[ИндексОператора] Тогда
					ЗаполнитьЗначенияСвойств(Резт, КолонкаВТ);
					Возврат Резт;
				КонецЕсли;
				ИтерВТ = ИтерВТ - 1;
			КонецЦикла;
		КонецЕсли;
		Итер = Итер - 1;
	КонецЦикла;
	
	Возврат Резт;
	
КонецФункции

#КонецОбласти

#Область Выражения

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ПрименитьФункцию(Знач Выражение, Знач ИмяФункции) Экспорт
	
	Выражение 	= Выражения_ОчиститьФункцию(Выражение);
	ИмяФункции 	= СтрЗаменить(ИмяФункции, "ПрименитьФункцию", "");
	
	Если ИмяФункции = "КОЛИЧЕСТВО_РАЗЛИЧНЫЕ" Тогда
		Выражение = "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + Выражение + ")";
	Иначе
		Выражение = ИмяФункции + "(" + Выражение + ")"; 
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ОчиститьФункцию(Знач Выражение) Экспорт
	
	Поз1 = 0;
	Поз2 = 0;
	
	Если СтрНачинаетсяС(Выражение, "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ") Тогда
		Поз1 = СтрДлина("КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ");			
	Иначе
		СтрокаФункций = "СУММА,МИНИМУМ,МАКСИМУМ,СРЕДНЕЕ,КОЛИЧЕСТВО";
		МассивФункций = СтрРазделить(СтрокаФункций, ",");
		Для Каждого Элемент Из МассивФункций Цикл
			Если СтрНачинаетсяС(Выражение, Элемент + "(") Тогда
				Поз1 = СтрДлина(Элемент + "(");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Поз2 = СтрНайти(Выражение, ")", НаправлениеПоиска.СКонца);
	
	Если Поз1 > 0 И Поз2 > 0 Тогда
		Выражение = Сред(Выражение, Поз1 + 1, Поз2 - Поз1 - 1);
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ПрименитьEСТЬNULL(Знач Выражение, Знач ТипЗначения) Экспорт
	
	ПустоеЗначение = ПустоеЗначениеЕСТЬNULL(ТипЗначения);	
	Выражение = "ЕСТЬNULL(" + Выражение + ", " + ПустоеЗначение + ")";
	
	Возврат Выражение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Выражения_ОчиститьЕСТЬNULL(Знач Выражение) Экспорт
	
	Если Не СтрНачинаетсяС(Выражение, "ЕСТЬNULL(") Тогда
		Возврат Выражение;
	КонецЕсли;
	
	Поз1 = СтрДлина("ЕСТЬNULL(");
	Поз2 = СтрНайти(Выражение, ",", НаправлениеПоиска.СНачала);
	
	Если Поз1 > 0 И Поз2 > 0 Тогда
		Выражение = Сред(Выражение, Поз1 + 1, Поз2 - Поз1 - 1);
	КонецЕсли;
	
	Возврат Выражение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПустоеЗначениеЕСТЬNULL(Знач ТипЗначения)
	
	Если ТипЗначения = Неопределено
		Или ТипЗначения.Типы().Количество() = 0
		Или ТипЗначения.Типы().Количество() > 1 Тогда
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Тип = ТипЗначения.Типы()[0];
	
	ОМ = Метаданные.НайтиПоТипу(Тип);
	
	Если ОМ <> Неопределено Тогда 
		ПолноеИмя = ОМ.ПолноеИмя();
		Значение = "ЗНАЧЕНИЕ(" + ПолноеИмя + ".ПустаяСсылка)";
		Возврат Значение;
	КонецЕсли;
	
	Если Тип = Тип("Число") Тогда
		Возврат "0";
	ИначеЕсли Тип = Тип("Строка") Тогда
		Возврат """""";
	ИначеЕсли Тип = Тип("Дата") Тогда
		Возврат "ДАТАВРЕМЯ(1,1,1)";
	КонецЕсли;
	
	Возврат "НЕОПРЕДЕЛЕНО";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПослеТочкиСКонца(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".", НаправлениеПоиска.СКонца);
	Значение = Прав(Текст, СтрДлина(Текст) - Поз);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПослеТочкиСНачала(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".", НаправлениеПоиска.СНачала);
	Значение = Прав(Текст, СтрДлина(Текст) - Поз);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПередТочкойСНачала(Знач Текст) Экспорт
	
	Поз = СтрНайти(Текст, ".");
	Значение = Лев(Текст, Поз - 1);
	Возврат Значение;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КорректныйПсевдоним(Коллекция, Знач Псевдоним) Экспорт
	
	Найдено = Ложь;
	Для Каждого Строка Из Коллекция Цикл
		Если Псевдоним = Строка.Псевдоним Тогда
			Найдено = Истина;	
		КонецЕсли;
	КонецЦикла;
	
	Если Найдено Тогда
		Псевдоним = ИнкрементПсевдонима(Псевдоним);
		Псевдоним = КорректныйПсевдоним(Коллекция, Псевдоним);
	КонецЕсли;
	
	Возврат Псевдоним;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнкрементПсевдонима(Знач Псевдоним)
	
	Окончание = Прав(Псевдоним, 1);
	Если СтрНайти("0123456789", Окончание) > 0 Тогда
		Значение 	= Число(Окончание);
		Псевдоним 	= Лев(Псевдоним, СтрДлина(Псевдоним) - 1);
	Иначе
		Значение 	= 0;
	КонецЕсли;
	
	Возврат Псевдоним + Строка(Значение + 1);
	 	 
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеПеречисления(Знач Текст) Экспорт
	
	МассивСтрок = СтрРазделить(Текст, " ");
	Для Каждого Строка Из МассивСтрок Цикл
		Строка = ВРег(Строка);
	КонецЦикла;
	
	Результат = СтрСоединить(МассивСтрок);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуКоллекции(Знач Коллекция, Знач Значение, Знач ИмяКолонки)
	
	Для Каждого Строка Из Коллекция Цикл
		Если Строка[ИмяКолонки] = Значение Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
			
КонецФункции

#КонецОбласти


