Процедура Преобразовать(Запрос, флНеОчищатьСтрокиРЛС = Истина) Экспорт
	Перем тзСтруктураБД;
	Перем РегВыр;

	Перем тзКешИспользуемыхТаблиц;
	Перем тзКешИспользуемыхПолей;
	Перем _КонецОператора;

	Инициализировать(РегВыр, тзСтруктураБД, тзКешИспользуемыхТаблиц, тзКешИспользуемыхПолей);

	//уберем строки, порожденные RLS
	Если Не флНеОчищатьСтрокиРЛС Тогда
		ИсключитьRLS(РегВыр, Запрос);
	КонецЕсли;	
	
    ЗаменитьСтандартныеКоманды(РегВыр, тзКешИспользуемыхПолей, Запрос);
	
	Выражение = СокрЛП(Запрос);	
	
	РегВыр.Pattern = "([_A-Za-zА-Я0-9\]\[])+"; //([_A-Za-z0-9\.\""\[\]])*
	Найденные = ВыполнитьПоискСКонтролемОшибок(РегВыр, Выражение);
	
	//переименуем таблицы и сделаем кеш нужных строк из тзСтруктураБД
	Для н = 0 По Найденные.Count()-1 Цикл
		Значение = Найденные.Item(н).Value;
		Если Найти(ВРЕГ(Значение), "_FLD") > 0 Тогда
			//пропускаем
		Иначе	
			ВыполнитьПреобразованиеДляИмениТаблицы(тзКешИспользуемыхТаблиц, тзСтруктураБД, Запрос, Значение);
		КонецЕсли;
	КонецЦикла;	
	
	//обработаем реквизиты
	РегВыр.Pattern = "(_)?[Ff][Ll][Dd]([0-9_A-Za-z])+";
	Найденные = ВыполнитьПоискСКонтролемОшибок(РегВыр, Запрос);
	
	тзКешИспользуемыхТаблиц.Свернуть("Поля, ИмяТаблицыХранения, Метаданные");
	тзКешИспользуемыхПолей.Свернуть("ИмяПоляХранения, ИмяПоля");
		
	Для н = 0 По Найденные.Count()-1 Цикл
		ИмяРеквизита = Найденные.Item(н).Value;
		
		//по кешу
		СтрокаСПараметрами = НайтиНаименованиеРеквизита1С(тзКешИспользуемыхТаблиц, тзСтруктураБД, тзКешИспользуемыхПолей, ИмяРеквизита);	
		
		Если СтрокаСПараметрами <> Неопределено Тогда
			Запрос = СтрЗаменить(Запрос, ИмяРеквизита, ?(ПустаяСтрока(СтрокаСПараметрами.ИмяПоля),ИмяРеквизита,СтрокаСПараметрами.ИмяПоля));	
			//кешируем
			ЗаполнитьЗначенияСвойств(тзКешИспользуемыхПолей.Добавить(), СтрокаСПараметрами);
		КонецЕсли;	
	КонецЦикла;	
	
	Запрос = СтрЗаменить(Запрос,".ТабличнаяЧасть.",".");
	
	ЗаменитьВопросыНаПараметры(Запрос);
	ЗаменитьИдентификаторыНаПараметры(Запрос);
	
КонецПроцедуры

Процедура ЗаменитьВопросыНаПараметры(Запрос)
	Результат = Новый ТекстовыйДокумент;
	НомерПараметра = 0;
	Для Сч = 1 По СтрЧислоСтрок(Запрос) Цикл
		ТекСтрока = СокрЛП(СтрПолучитьСтроку(Запрос, Сч));
		~ОбработатьСтрокуЕщёРазик:
		ПозицияПараметра = СтрНайти(ТекСтрока, "?");
		Если ПозицияПараметра > 0 Тогда
			НомерПараметра = НомерПараметра + 1;
			ТекСтрока = Сред(ТекСтрока, 1, ПозицияПараметра - 1) + СтрШаблон("&p_%1", НомерПараметра) + Сред(ТекСтрока,  ПозицияПараметра + 1);
			Перейти ~ОбработатьСтрокуЕщёРазик;
		КонецЕсли;
		Результат.ДобавитьСтроку(ТекСтрока);
	КонецЦикла;
	Запрос = Результат.ПолучитьТекст();
КонецПроцедуры

Процедура ЗаменитьИдентификаторыНаПараметры(Запрос)
	Результат = Новый ТекстовыйДокумент;
	ЧислоСтрокЗапроса = СтрЧислоСтрок(Запрос);
	НайденныеИдентификаторы = Новый Соответствие;
	//НайденныеИдентификаторы = ВосстановитьЗначение("НайденныеИдентификаторы");
	//Если НайденныеИдентификаторы = Неопределено Тогда
	//	НайденныеИдентификаторы = Новый Соответствие;
	//КонецЕсли;
	Для Сч = 1 По ЧислоСтрокЗапроса Цикл
		ТекСтрока = СокрЛП(СтрПолучитьСтроку(Запрос, Сч));
		Поз = СтрНайти(ТекСтрока, "0x");
		Если Поз = 0 Тогда
			Результат.ДобавитьСтроку(ТекСтрока);
			Продолжить;
		КонецЕсли;
		ТекИдентификатор = Сред(ТекСтрока, Поз);
		Если СтрДлина(ТекИдентификатор) = СтрДлина("0x839B0D52FD1363834A6670C07CD7ED39") И Лев(ТекИдентификатор, 2) = "0x" Тогда
			Если ТекИдентификатор = "0x00000000000000000000000000000000" Тогда
				Результат.ДобавитьСтроку(ТекСтрока);
				Продолжить;
			КонецЕсли;
			#Если Клиент Тогда
				Состояние(СтрШаблон("Расшифровка %3 строка %1/%2", Сч, ЧислоСтрокЗапроса, ТекИдентификатор));
			#КонецЕсли
			
			УникальныйИдентификаторОбъекта = ПреобразоватьСлужебныйИдентификатор(СтрЗаменить(ТекИдентификатор, "0x", ""));
		
			ПредставлениеСсылки = "";
			Если НайденныеИдентификаторы[УникальныйИдентификаторОбъекта] <> Неопределено Тогда
				ПредставлениеСсылки = НайденныеИдентификаторы[УникальныйИдентификаторОбъекта];
			Иначе
				НайденныеОбъекты = НайтиОбъектыПоУникальномуИдентификатору(УникальныйИдентификаторОбъекта);
				Для Каждого НайденныйОбъект Из НайденныеОбъекты Цикл
					ПредставлениеСсылки = ПредставлениеСсылки + СтрШаблон(" ( ""%1"" - %2 )", НайденныйОбъект, ИмяТаблицыПоСсылке(НайденныйОбъект));
				КонецЦикла;
				НайденныеИдентификаторы.Вставить(УникальныйИдентификаторОбъекта, ПредставлениеСсылки);
			КонецЕсли;
			ТекСтрока = ТекСтрока + ПредставлениеСсылки;
		КонецЕсли;
		Результат.ДобавитьСтроку(ТекСтрока);
	КонецЦикла;
	//СохранитьЗначение("НайденныеИдентификаторы", НайденныеИдентификаторы);
	Запрос = Результат.ПолучитьТекст();
КонецПроцедуры

Функция ИмяТаблицыПоСсылке(Ссылка) Экспорт
    Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).ПолноеИмя();
КонецФункции
Функция НайтиОбъектыПоУникальномуИдентификатору(Знач УникальныйИдентификаторОбъекта)
	
	УникальныйИдентификаторОбъектаСтрока = Строка(УникальныйИдентификаторОбъекта);
	
	НайденныеОбъекты = Новый Массив;
	
	МассивСсылочныхМетаданных = Новый Массив;
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыОбмена);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыСчетов);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Документы);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Справочники);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыВидовХарактеристик);
	МассивСсылочныхМетаданных.Добавить(Метаданные.ПланыВидовРасчета);
	МассивСсылочныхМетаданных.Добавить(Метаданные.БизнесПроцессы);
	МассивСсылочныхМетаданных.Добавить(Метаданные.Задачи);	

	Для Каждого СсылочныеМетаданные Из МассивСсылочныхМетаданных Цикл
		
		Для Каждого ОбъектМетаданные Из СсылочныеМетаданные Цикл
			
			ПолноеИмяОбъекта = ОбъектМетаданные.ПолноеИмя();
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъекта);
			
			СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(УникальныйИдентификаторОбъекта);
			
			Если СсылкаСуществует(СсылкаНаОбъект, ПолноеИмяОбъекта) Тогда
				НайденныеОбъекты.Добавить(СсылкаНаОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОбъектМетаданныхПеречисление Из Метаданные.Перечисления Цикл
		
		МенеджерПеречисления = Перечисления[ОбъектМетаданныхПеречисление.Имя];
		
		Для Каждого ЗначениеПеречисления Из ОбъектМетаданныхПеречисление.ЗначенияПеречисления Цикл
			
			СсылкаНаПеречисление = МенеджерПеречисления[ЗначениеПеречисления.Имя];	
			ИнформацияОСсылке = РасширеннаяИнформацияОСсылке(СсылкаНаПеречисление);
			
			Если ИнформацияОСсылке.ИдентификаторОбъекта = УникальныйИдентификаторОбъектаСтрока Тогда
				НайденныеОбъекты.Добавить(СсылкаНаПеречисление);	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат НайденныеОбъекты;
	
КонецФункции
Функция СсылкаСуществует(ЛюбаяСсылка, ПолноеИмяТипа)
	
    ТекстЗапроса = "
        |ВЫБРАТЬ
        |    Ссылка
        |ИЗ
        |    Справочник.ИмяСправочника КАК Таблица
        |ГДЕ
        |    Ссылка = &Ссылка
        |";
			
    Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"Справочник.ИмяСправочника",
		ПолноеИмяТипа);
	
    Запрос.УстановитьПараметр("Ссылка", ЛюбаяСсылка);
    
    УстановитьПривилегированныйРежим(Истина);
    
    Возврат НЕ Запрос.Выполнить().Пустой();
    
КонецФункции
Функция РасширеннаяИнформацияОСсылке(СсылкаНаОбъект)
	
	ИнформацияОСсылке = Новый Структура;
	ИнформацияОСсылке.Вставить("ИдентификаторОбъекта", Неопределено);
	ИнформацияОСсылке.Вставить("ИдентификаторТипа", Неопределено);
	ИнформацияОСсылке.Вставить("ЧисловойИдентификаторТипа", Неопределено);
	
	ВнутреннееОпределениеСсылки = ЗначениеВСтрокуВнутр(СсылкаНаОбъект);
	ЧастиВнутреннегоОпределенияСсылки = РазложитьСтрокуВМассивПодстрок(ВнутреннееОпределениеСсылки, ",");
	Если ЧастиВнутреннегоОпределенияСсылки.Количество() = 3 Тогда
		
		ИнформацияОСсылке.ИдентификаторТипа = ЧастиВнутреннегоОпределенияСсылки.Получить(1);
		ВнутреннийИдентификаторСсылки = СтрЗаменить(ЧастиВнутреннегоОпределенияСсылки.Получить(2), "}", "");
		ИнформацияПоСлужебномуПредставлениюСсылки = ИнформацияПоСлужебномуПредставлениюСсылки("(" + ВнутреннийИдентификаторСсылки + ")");
		
		ИнформацияОСсылке.ИдентификаторОбъекта = ИнформацияПоСлужебномуПредставлениюСсылки.ИдентификаторЗначения;
		ИнформацияОСсылке.ЧисловойИдентификаторТипа = ИнформацияПоСлужебномуПредставлениюСсылки.ЧисловойИдентификаторТипа;
		
	Иначе			
		
		Если НЕ СсылкаНаОбъект = Неопределено Тогда
			ИнформацияОСсылке.ИдентификаторОбъекта = СсылкаНаОбъект.УникальныйИдентификатор();
		Иначе
			ИнформацияОСсылке.ИдентификаторОбъекта = "";
		КонецЕсли;
		
	КонецЕсли;
	
	ИнформацияОСсылке.ИдентификаторОбъекта = Строка(ИнформацияОСсылке.ИдентификаторОбъекта);
	
	Возврат ИнформацияОСсылке;

КонецФункции
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь)
	
	Если Разделитель = "," 
		И ПропускатьПустыеСтроки = Неопределено 
		И СокращатьНепечатаемыеСимволы Тогда 
		
		Результат = СтрРазделить(Значение, ",", Ложь);
		Для Индекс = 0 По Результат.ВГраница() Цикл
			Результат[Индекс] = СокрЛП(Результат[Индекс])
		КонецЦикла;
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
Функция ПреобразоватьКЧислу(Знач ИсходноеЗначение)
	
	Попытка
		Возврат Число(ИсходноеЗначение);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции
Функция ИнформацияПоСлужебномуПредставлениюСсылки(Знач ПредставлениеБитойСсылки)
	
	ИнформацияОСсылке = Новый Структура;
	ИнформацияОСсылке.Вставить("ИдентификаторЗначения", Неопределено);
	ИнформацияОСсылке.Вставить("ЧисловойИдентификаторТипа", Неопределено);
	
	НачалоДанных = Найти(ПредставлениеБитойСсылки, "(");
	КонецДанных = Найти(ПредставлениеБитойСсылки, ")");
	ЗначащиеДанныеСсылки = Сред(ПредставлениеБитойСсылки, НачалоДанных + 1,  КонецДанных - НачалоДанных - 1);
	ЧастиИдентификатораСсылки = РазложитьСтрокуВМассивПодстрок(ЗначащиеДанныеСсылки, ":");
	Если ЧастиИдентификатораСсылки.Количество() = 2 Тогда
		
		ЧисловойИдентификаторТипа = ПреобразоватьКЧислу(ЧастиИдентификатораСсылки.Получить(0));
		ИнформацияОСсылке.ЧисловойИдентификаторТипа = ЧисловойИдентификаторТипа;
		
		ИдентификаторЗначения = ЧастиИдентификатораСсылки.Получить(1);		
		Если ЭтоУникальныйИдентификатор(ИдентификаторЗначения) Тогда
			ИнформацияОСсылке.ИдентификаторЗначения = ИдентификаторЗначения;
		Иначе
			ИдентификаторЗначения = ПреобразоватьСлужебныйИдентификатор(ИдентификаторЗначения);
			Если ЭтоУникальныйИдентификатор(ИдентификаторЗначения) Тогда
				ИнформацияОСсылке.ИдентификаторЗначения	= ИдентификаторЗначения;
			Иначе			
				ИнформацияОСсылке.ИдентификаторЗначения = Неопределено;
			КонецЕсли;
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ИнформацияОСсылке;
	
КонецФункции

Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
				
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
	КонецЕсли;
			
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Менеджер;
	
КонецФункции
Функция ПреобразоватьСлужебныйИдентификатор(Знач ИсходныйИдентификатор)
	
	УникальныйИдентификаторСтрокой = Сред(ИсходныйИдентификатор, 25, 8) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 21, 4) 
		+ "-"
		+ Сред(ИсходныйИдентификатор, 17, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 1, 4) 
		+ "-" 
		+ Сред(ИсходныйИдентификатор, 5, 12);	
		
	Если ЭтоУникальныйИдентификатор(УникальныйИдентификаторСтрокой) Тогда
		Возврат Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ЭтоУникальныйИдентификатор(Знач УникальныйИдентификаторСтрокой)
	
	РезультатПроверки = Неопределено;
	
	Попытка
		ПроверочныйИдентификатор = Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой);
		РезультатПроверки = Истина;
	Исключение
		РезультатПроверки = Ложь;
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура Инициализировать(РегВыр, тзСтруктураБД, тзКешИспользуемыхТаблиц, тзКешИспользуемыхПолей)
	РегВыр = Новый COMОбъект("VBScript.RegExp");
	РегВыр.IgnoreCase = Истина; //Игнорируем регистр
	РегВыр.Global = Истина; //Поиск всех вхождений шаблона
    РегВыр.Multiline = Истина;
	
	тзСтруктураБД = ПолучитьСтруктуруХраненияБазыДанных(,Истина);
	тзКешИспользуемыхТаблиц = Новый ТаблицаЗначений;
	тзКешИспользуемыхТаблиц.Колонки.Добавить("Поля");
	тзКешИспользуемыхТаблиц.Колонки.Добавить("ИмяТаблицыХранения");
	тзКешИспользуемыхТаблиц.Колонки.Добавить("Метаданные");
	
	тзКешИспользуемыхПолей = Новый ТаблицаЗначений;
	тзКешИспользуемыхПолей.Колонки.Добавить("ИмяПоляХранения");
	тзКешИспользуемыхПолей.Колонки.Добавить("ИмяПоля");
	
	_КонецОператора = "((^)|([\s()])+)";
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Folder", "ЭтоГруппа");	
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "IDRRef", "Ссылка");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "ParentIDRRef", "Родитель");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Date_Time", "Дата");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Number", "Номер");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"CASE"+_КонецОператора, "ВЫБОР");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"WHEN"+_КонецОператора, "КОГДА");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"ELSE"+_КонецОператора, "ИНАЧЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"THEN"+_КонецОператора, "ТОГДА");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"END"+_КонецОператора, "КОНЕЦ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Active", "Активность");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Period", "Период");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Posted", "Проведен");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "RecorderTRef", "Регистратор");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "RecorderRRef", "Регистратор");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "RecordKind", "ВидДвижения");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Description", "Наименование");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, "Code", "Код");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"0x01"+_КонецОператора, "1");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"0x00"+_КонецОператора, "0");
	//ДобавитьСтрокуВКешПолей(_КонецОператора+"WITH((^)|([\s()])*)[(](([\s()])*)NOLOCK(([\s()])*)[)]", "");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"WITH"+_КонецОператора, "");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"NOLOCK"+_КонецОператора, "");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"WHERE"+_КонецОператора, "ГДЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"ON"+_КонецОператора, "ПО");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"AND"+_КонецОператора, "И");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"OR"+_КонецОператора, "ИЛИ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"LEFT((^)|(\s))+OUTER((^)|(\s))+JOIN"+_КонецОператора, "ЛЕВОЕ СОЕДИНЕНИЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"RIGHT((^)|(\s))+OUTER((^)|(\s))+JOIN"+_КонецОператора, "ПРАВОЕ СОЕДИНЕНИЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"INNER((^)|(\s))+JOIN"+_КонецОператора, "ВНУТРЕННЕЕ СОЕДИНЕНИЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"SELECT"+_КонецОператора, "ВЫБРАТЬ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"FROM"+_КонецОператора, "ИЗ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"EXISTS"+_КонецОператора, "СУЩЕСТВУЕТ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"COUNT"+_КонецОператора, "КОЛИЧЕСТВО");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"AVG"+_КонецОператора, "СРЕДНЕЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"MAX"+_КонецОператора, "МАКСИМУМ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"MIN"+_КонецОператора, "МИНИМУМ");
    ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"SUM"+_КонецОператора, "СУММА");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"AS"+_КонецОператора, "КАК");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"IN"+_КонецОператора, "В");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"DISTINCT"+_КонецОператора, "РАЗЛИЧНЫЕ");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"LINENO_"+_КонецОператора, "НомерСтроки");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"GROUP(\s)+BY"+_КонецОператора, "СГРУППИРОВАТЬ ПО");
	ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей, _КонецОператора+"ORDER(\s)+BY"+_КонецОператора, "УПОРЯДОЧИТЬ ПО");
	
	///RRef - УникальныйИдентификатор
	///RTRef - ТипСсылка
	///_TYPE - Тип
КонецПроцедуры

Процедура ВыполнитьПреобразованиеДляИмениТаблицы(тзКешИспользуемыхТаблиц, тзСтруктураБД, Запрос, Значение)
	//Если Не флНеИспользоватьКеширование Тогда
		СтрокаСПараметрами = тзКешИспользуемыхТаблиц.Найти(Значение, "ИмяТаблицыХранения");		
		Если СтрокаСПараметрами <> Неопределено Тогда
			Запрос = СтрЗаменить(Запрос, Значение, ?(ПустаяСтрока(СтрокаСПараметрами.Метаданные),Значение,СтрокаСПараметрами.Метаданные));	
		КонецЕсли;
	//КонецЕсли;
	СтрокаСПараметрами = тзСтруктураБД.Найти(Значение, "ИмяТаблицыХранения");	
	Если СтрокаСПараметрами <> Неопределено Тогда
		Запрос = СтрЗаменить(Запрос, Значение, ?(ПустаяСтрока(СтрокаСПараметрами.Метаданные),Значение,СтрокаСПараметрами.Метаданные));	
		//кешируем
		ЗаполнитьЗначенияСвойств(тзКешИспользуемыхТаблиц.Добавить(), СтрокаСПараметрами);
	КонецЕсли;
КонецПроцедуры

Функция УбратьСкобкиВначалеИВконце(Строка)
	Пока Лев(Строка,1) = "(" ИЛИ Лев(Строка,1) = ")" Цикл
		Строка = Сред(Строка,2);
	КонецЦикла;
	
	Длина = СтрДлина(Строка);
	Пока Прав(Строка,1) = "(" ИЛИ Прав(Строка,1) = ")" И Длина > 0 Цикл
		Строка = Лев(Строка,Длина-1);
		Длина = Длина - 1;
	КонецЦикла;	
	
	Возврат Строка;
КонецФункции

Процедура ЗаменитьСтандартныеКоманды(РегВыр, тзКешИспользуемыхПолей, Запрос)
	Для Каждого СтрокаСПараметрами Из тзКешИспользуемыхПолей Цикл
		РегВыр.Pattern = СтрокаСПараметрами.ИмяПоля;
		Найденные = ВыполнитьПоискСКонтролемОшибок(РегВыр, Запрос);
		
		//переименуем таблицы и сделаем кеш нужных строк из тзСтруктураБД
		Для н = 0 По Найденные.Count()-1 Цикл
			НовоеЗначение =  СтрокаСПараметрами.ИмяПоляХранения;
			Значение = Найденные.Item(н).Value;
			ТЗначение = СокрЛП(УбратьСкобкиВначалеИВконце(СокрЛП(Значение)));
			ТЗначение = СтрЗаменить(Значение, ТЗначение, НовоеЗначение);
			
			Запрос = СтрЗаменить(Запрос,Значение,ТЗначение);
		КонецЦикла;	
	КонецЦикла;	
	
	//породил какую-то хрень вместо хинтов, нужно почистить
	Запрос = СтрЗаменить(Запрос,"()","");
КонецПроцедуры

//надо бы упростить
Процедура ИсключитьRLS(РегВыр, Запрос)
	спИмена = Новый СписокЗначений;
	
	РегВыр.Pattern = "\bT[0-9]+\b";
	Найденные = ВыполнитьПоискСКонтролемОшибок(РегВыр, Запрос);
	
	//переименуем таблицы и сделаем кеш нужных строк из тзСтруктураБД
	Для н = 0 По Найденные.Count()-1 Цикл
		Значение = Найденные.Item(н).Value;
		Если спИмена.НайтиПоЗначению(Значение) = Неопределено Тогда
			 спИмена.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	спИмена.СортироватьПоЗначению();
	_КонецОператора = "((^)|([\s()])+)";
	Для Каждого ИмяТаблицы Из спИмена Цикл
		_Any = "([%$#,\.@&*<>{}\w\s()+-=|?]|(^))+";
	    РегВыр.Pattern = "(\bINNER((^)|(\s))+JOIN\b|\bLEFT((^)|(\s))+OUTER((^)|(\s))+JOIN\b)"
	    //+"([\w\s()]|(^))+SELECT([\w\s()]|(^))+"
	    + _Any + "[(]EXISTS[(]SELECT"
	    + _Any + "SDBL_RLS_SIGNAL" + _Any
	    //+ _КонецОператора + "([.\s])+"
	    +"[)]((^)|(\s))+"+ИмяТаблицы
	    +_КонецОператора + "ON"+_КонецОператора+"([_A-Za-zА-Я0-9\]\[\.])+IDRRef = "+ИмяТаблицы+".IDRRef"
	   + "";
	  	Найденные = ВыполнитьПоискСКонтролемОшибок(РегВыр, Запрос);
		
		//переименуем таблицы и сделаем кеш нужных строк из тзСтруктураБД
		Для н = 0 По Найденные.Count()-1 Цикл
			Значение = Найденные.Item(н).Value;
				
			Запрос = СтрЗаменить(Запрос, Значение, ""); //удаляем
		КонецЦикла;
	КонецЦикла;	
 КонецПроцедуры

Функция ВыполнитьЗаменуСКонтролемОшибок(РегВыр, Выражение, ВыражениеЗамены = "") Экспорт
	Попытка
		Возврат РегВыр.Replace(Выражение, ВыражениеЗамены);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки()); 
		#КонецЕсли 	
	КонецПопытки;	
КонецФункции

Функция ВыполнитьПоискСКонтролемОшибок(РегВыр, Выражение)
	Попытка
		Возврат РегВыр.Execute(Выражение);
	Исключение
		#Если Клиент Тогда
			Сообщить(ОписаниеОшибки()); 
		#КонецЕсли 	
	КонецПопытки;	
КонецФункции

Функция НайтиНаименованиеРеквизита1С(тзКешИспользуемыхТаблиц, тзСтруктураБД, тзКешИспользуемыхПолей, Знач ИмяРеквизита)
	Если ПРАВ(ИмяРеквизита,1) = "_" Тогда
		ИмяРеквизита = ЛЕВ(ИмяРеквизита, СтрДлина(ИмяРеквизита)-1);
	КонецЕсли;
    	
	Если Лев(ИмяРеквизита,1)<>"_" Тогда
		ИмяРеквизита = "_" + ИмяРеквизита;
	КонецЕсли;
	
	Если тзКешИспользуемыхТаблиц.Количество() = 0 Тогда //ИЛИ флНеИспользоватьКеширование Тогда
		тзКешИспользуемыхТаблиц = тзСтруктураБД.Скопировать(, "Поля, ИмяТаблицыХранения, Метаданные");	
	КонецЕсли;
	
	//Если Не флНеИспользоватьКеширование Тогда
		НайденнаяСтрока = тзКешИспользуемыхПолей.Найти(ИмяРеквизита, "ИмяПоляХранения");		
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	//КонецЕсли;
	
	Для Каждого СтрокаСПараметрами Из тзКешИспользуемыхТаблиц Цикл
		НайденнаяСтрока = СтрокаСПараметрами.Поля.Найти(ИмяРеквизита, "ИмяПоляХранения");		
		
		Если НайденнаяСтрока <> Неопределено Тогда
			Возврат НайденнаяСтрока;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
КонецФункции

Процедура ДобавитьСтрокуВКешПолей(тзКешИспользуемыхПолей,ИмяПоля, ИмяПоляХранения)
	ЗаполнитьЗначенияСвойств(тзКешИспользуемыхПолей.Добавить(), Новый Структура("ИмяПоля, ИмяПоляХранения", ИмяПоля, ИмяПоляХранения));
КонецПроцедуры
